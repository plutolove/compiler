
// Generated from ./src/parser/SQLParser.g4 by ANTLR 4.12.0


#include "SQLParserVisitor.h"

#include "SQLParserParser.h"


using namespace antlrcpp;
using namespace sql;

using namespace antlr4;

namespace {

struct SQLParserParserStaticData final {
  SQLParserParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SQLParserParserStaticData(const SQLParserParserStaticData&) = delete;
  SQLParserParserStaticData(SQLParserParserStaticData&&) = delete;
  SQLParserParserStaticData& operator=(const SQLParserParserStaticData&) = delete;
  SQLParserParserStaticData& operator=(SQLParserParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sqlparserParserOnceFlag;
SQLParserParserStaticData *sqlparserParserStaticData = nullptr;

void sqlparserParserInitialize() {
  assert(sqlparserParserStaticData == nullptr);
  auto staticData = std::make_unique<SQLParserParserStaticData>(
    std::vector<std::string>{
      "singleStatement", "singleDataType", "statement", "commentSpec", "query", 
      "queryOrganization", "queryTerm", "queryPrimary", "sortItem", "querySpecification", 
      "selectClause", "whereClause", "fromClause", "setQuantifier", "relation", 
      "identifierList", "identifierSeq", "orderedIdentifierList", "orderedIdentifier", 
      "identifierCommentList", "identifierComment", "relationPrimary", "tableAlias", 
      "multipartIdentifierList", "multipartIdentifier", "namedExpression", 
      "namedExpressionSeq", "expression", "booleanExpression", "predicate", 
      "valueExpression", "primaryExpression", "constant", "comparisonOperator", 
      "arithmeticOperator", "predicateOperator", "booleanValue", "interval", 
      "errorCapturingMultiUnitsInterval", "multiUnitsInterval", "errorCapturingUnitToUnitInterval", 
      "unitToUnitInterval", "intervalValue", "colPosition", "dataType", 
      "qualifiedColTypeWithPositionList", "qualifiedColTypeWithPosition", 
      "colTypeList", "colType", "complexColTypeList", "complexColType", 
      "whenClause", "windowClause", "namedWindow", "windowSpec", "windowFrame", 
      "frameBound", "qualifiedNameList", "functionName", "qualifiedName", 
      "errorCapturingIdentifier", "errorCapturingIdentifierExtra", "identifier", 
      "strictIdentifier", "quotedIdentifier", "number", "alterColumnAction", 
      "ansiNonReserved", "strictNonReserved", "nonReserved"
    },
    std::vector<std::string>{
      "", "';'", "','", "'('", "')'", "'.'", "'['", "']'", "':'", "'ADD'", 
      "'AFTER'", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANTI'", "'ANY'", 
      "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", 
      "'BETWEEN'", "'BOTH'", "'BUCKET'", "'BUCKETS'", "'BY'", "'CACHE'", 
      "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHECK'", "'CLEAR'", 
      "'CLUSTER'", "'CLUSTERED'", "'CODEGEN'", "'COLLATE'", "'COLLECTION'", 
      "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", 
      "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", "'COST'", "'CREATE'", 
      "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
      "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DATA'", "'DATABASE'", "", 
      "'DBPROPERTIES'", "'DEFINED'", "'DELETE'", "'DELIMITED'", "'DESC'", 
      "'DESCRIBE'", "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", "'DISTINCT'", 
      "'DISTRIBUTE'", "'DIV'", "'DROP'", "'ELSE'", "'END'", "'ESCAPE'", 
      "'ESCAPED'", "'EXCEPT'", "'EXCHANGE'", "'EXISTS'", "'EXPLAIN'", "'EXPORT'", 
      "'EXTENDED'", "'EXTERNAL'", "'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", 
      "'FILTER'", "'FILEFORMAT'", "'FIRST'", "'FOLLOWING'", "'FOR'", "'FOREIGN'", 
      "'FORMAT'", "'FORMATTED'", "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", 
      "'GLOBAL'", "'GRANT'", "'GROUP'", "'GROUPING'", "'HAVING'", "'IF'", 
      "'IGNORE'", "'IMPORT'", "'IN'", "'INDEX'", "'INDEXES'", "'INNER'", 
      "'INPATH'", "'INPUTFORMAT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", 
      "'INTO'", "'IS'", "'ITEMS'", "'JOIN'", "'KEYS'", "'LAST'", "'LATERAL'", 
      "'LAZY'", "'LEADING'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINES'", "'LIST'", 
      "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCKS'", "'LOGICAL'", 
      "'MACRO'", "'MAP'", "'MATCHED'", "'MERGE'", "'MSCK'", "'NAMESPACE'", 
      "'NAMESPACES'", "'NATURAL'", "'NO'", "", "'NULL'", "'NULLS'", "'OF'", 
      "'ON'", "'ONLY'", "'OPTION'", "'OPTIONS'", "'OR'", "'ORDER'", "'OUT'", 
      "'OUTER'", "'OUTPUTFORMAT'", "'OVER'", "'OVERLAPS'", "'OVERLAY'", 
      "'OVERWRITE'", "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PERCENT'", 
      "'PIVOT'", "'PLACING'", "'POSITION'", "'PRECEDING'", "'PRIMARY'", 
      "'PRINCIPALS'", "'PROPERTIES'", "'PURGE'", "'QUERY'", "'RANGE'", "'RECORDREADER'", 
      "'RECORDWRITER'", "'RECOVER'", "'REDUCE'", "'REFERENCES'", "'REFRESH'", 
      "'RENAME'", "'REPAIR'", "'REPLACE'", "'RESET'", "'RESTRICT'", "'REVOKE'", 
      "'RIGHT'", "", "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", 
      "'ROWS'", "'SCHEMA'", "'SELECT'", "'SEMI'", "'SEPARATED'", "'SERDE'", 
      "'SERDEPROPERTIES'", "'SESSION_USER'", "'SET'", "'MINUS'", "'SETS'", 
      "'SHOW'", "'SKEWED'", "'SOME'", "'SORT'", "'SORTED'", "'START'", "'STATISTICS'", 
      "'STORED'", "'STRATIFY'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", "'TABLE'", 
      "'TABLES'", "'TABLESAMPLE'", "'TBLPROPERTIES'", "", "'TERMINATED'", 
      "'THEN'", "'TO'", "'TOUCH'", "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONS'", 
      "'TRANSFORM'", "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TYPE'", "'UNARCHIVE'", 
      "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNLOCK'", 
      "'UNSET'", "'UPDATE'", "'USE'", "'USER'", "'USING'", "'VALUES'", "'VIEW'", 
      "'VIEWS'", "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "", "'<=>'", 
      "'<>'", "'!='", "'<'", "", "'>'", "", "'+'", "'-'", "'*'", "'/'", 
      "'%'", "'~'", "'&'", "'|'", "'||'", "'^'", "", "", "", "", "", "", 
      "", "", "", "", "", "", "'/**/'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "ADD", "AFTER", "ALL", "ALTER", 
      "ANALYZE", "AND", "ANTI", "ANY", "ARCHIVE", "ARRAY", "AS", "ASC", 
      "AT", "AUTHORIZATION", "BETWEEN", "BOTH", "BUCKET", "BUCKETS", "BY", 
      "CACHE", "CASCADE", "CASE", "CAST", "CHANGE", "CHECK", "CLEAR", "CLUSTER", 
      "CLUSTERED", "CODEGEN", "COLLATE", "COLLECTION", "COLUMN", "COLUMNS", 
      "COMMENT", "COMMIT", "COMPACT", "COMPACTIONS", "COMPUTE", "CONCATENATE", 
      "CONSTRAINT", "COST", "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_DATE", 
      "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATABASE", 
      "DATABASES", "DBPROPERTIES", "DEFINED", "DELETE", "DELIMITED", "DESC", 
      "DESCRIBE", "DFS", "DIRECTORIES", "DIRECTORY", "DISTINCT", "DISTRIBUTE", 
      "DIV", "DROP", "ELSE", "END", "ESCAPE", "ESCAPED", "EXCEPT", "EXCHANGE", 
      "EXISTS", "EXPLAIN", "EXPORT", "EXTENDED", "EXTERNAL", "EXTRACT", 
      "FALSE", "FETCH", "FIELDS", "FILTER", "FILEFORMAT", "FIRST", "FOLLOWING", 
      "FOR", "FOREIGN", "FORMAT", "FORMATTED", "FROM", "FULL", "FUNCTION", 
      "FUNCTIONS", "GLOBAL", "GRANT", "GROUP", "GROUPING", "HAVING", "IF", 
      "IGNORE", "IMPORT", "IN", "INDEX", "INDEXES", "INNER", "INPATH", "INPUTFORMAT", 
      "INSERT", "INTERSECT", "INTERVAL", "INTO", "IS", "ITEMS", "JOIN", 
      "KEYS", "LAST", "LATERAL", "LAZY", "LEADING", "LEFT", "LIKE", "LIMIT", 
      "LINES", "LIST", "LOAD", "LOCAL", "LOCATION", "LOCK", "LOCKS", "LOGICAL", 
      "MACRO", "MAP", "MATCHED", "MERGE", "MSCK", "NAMESPACE", "NAMESPACES", 
      "NATURAL", "NO", "NOT", "NULL", "NULLS", "OF", "ON", "ONLY", "OPTION", 
      "OPTIONS", "OR", "ORDER", "OUT", "OUTER", "OUTPUTFORMAT", "OVER", 
      "OVERLAPS", "OVERLAY", "OVERWRITE", "PARTITION", "PARTITIONED", "PARTITIONS", 
      "PERCENTLIT", "PIVOT", "PLACING", "POSITION", "PRECEDING", "PRIMARY", 
      "PRINCIPALS", "PROPERTIES", "PURGE", "QUERY", "RANGE", "RECORDREADER", 
      "RECORDWRITER", "RECOVER", "REDUCE", "REFERENCES", "REFRESH", "RENAME", 
      "REPAIR", "REPLACE", "RESET", "RESTRICT", "REVOKE", "RIGHT", "RLIKE", 
      "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "SCHEMA", "SELECT", 
      "SEMI", "SEPARATED", "SERDE", "SERDEPROPERTIES", "SESSION_USER", "SET", 
      "SETMINUS", "SETS", "SHOW", "SKEWED", "SOME", "SORT", "SORTED", "START", 
      "STATISTICS", "STORED", "STRATIFY", "STRUCT", "SUBSTR", "SUBSTRING", 
      "TABLE", "TABLES", "TABLESAMPLE", "TBLPROPERTIES", "TEMPORARY", "TERMINATED", 
      "THEN", "TO", "TOUCH", "TRAILING", "TRANSACTION", "TRANSACTIONS", 
      "TRANSFORM", "TRIM", "TRUE", "TRUNCATE", "TYPE", "UNARCHIVE", "UNBOUNDED", 
      "UNCACHE", "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", "UNSET", "UPDATE", 
      "USE", "USER", "USING", "VALUES", "VIEW", "VIEWS", "WHEN", "WHERE", 
      "WINDOW", "WITH", "EQ", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", "GT", 
      "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "TILDE", "AMPERSAND", 
      "PIPE", "CONCAT_PIPE", "HAT", "STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", 
      "TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", "DECIMAL_VALUE", 
      "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
      "SIMPLE_COMMENT", "BRACKETED_EMPTY_COMMENT", "BRACKETED_COMMENT", 
      "WS", "UNRECOGNIZED"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,289,917,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
  	63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,
  	0,5,0,143,8,0,10,0,12,0,146,9,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,
  	3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,5,5,166,8,5,10,5,12,5,169,9,5,3,5,171,
  	8,5,1,5,1,5,1,5,1,5,1,5,5,5,178,8,5,10,5,12,5,181,9,5,3,5,183,8,5,1,5,
  	1,5,1,5,3,5,188,8,5,3,5,190,8,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,
  	7,201,8,7,1,8,1,8,3,8,205,8,8,1,8,1,8,3,8,209,8,8,1,9,1,9,3,9,213,8,9,
  	1,9,3,9,216,8,9,1,10,1,10,3,10,220,8,10,1,10,1,10,1,11,1,11,1,11,1,12,
  	1,12,1,12,1,12,5,12,231,8,12,10,12,12,12,234,9,12,1,13,1,13,1,14,1,14,
  	1,15,1,15,1,15,1,15,1,16,1,16,1,16,5,16,247,8,16,10,16,12,16,250,9,16,
  	1,17,1,17,1,17,1,17,5,17,256,8,17,10,17,12,17,259,9,17,1,17,1,17,1,18,
  	1,18,3,18,265,8,18,1,19,1,19,1,19,1,19,5,19,271,8,19,10,19,12,19,274,
  	9,19,1,19,1,19,1,20,1,20,3,20,280,8,20,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,295,8,21,1,22,3,22,298,8,22,1,
  	22,1,22,3,22,302,8,22,3,22,304,8,22,1,23,1,23,1,23,5,23,309,8,23,10,23,
  	12,23,312,9,23,1,24,1,24,1,24,5,24,317,8,24,10,24,12,24,320,9,24,1,25,
  	1,25,3,25,324,8,25,1,25,1,25,3,25,328,8,25,3,25,330,8,25,1,26,1,26,1,
  	26,5,26,335,8,26,10,26,12,26,338,9,26,1,27,1,27,1,28,1,28,1,28,1,28,1,
  	28,3,28,347,8,28,3,28,349,8,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,357,
  	8,28,10,28,12,28,360,9,28,1,29,3,29,363,8,29,1,29,1,29,1,29,1,29,1,29,
  	1,29,3,29,371,8,29,1,29,1,29,1,29,1,29,1,29,5,29,378,8,29,10,29,12,29,
  	381,9,29,1,29,1,29,1,29,3,29,386,8,29,1,29,1,29,1,29,1,29,1,29,1,29,3,
  	29,394,8,29,1,29,1,29,1,29,3,29,399,8,29,1,29,1,29,1,29,1,29,3,29,405,
  	8,29,1,29,1,29,3,29,409,8,29,1,29,1,29,1,29,3,29,414,8,29,1,29,1,29,1,
  	29,3,29,419,8,29,1,29,1,29,1,29,3,29,424,8,29,1,30,1,30,1,30,1,30,3,30,
  	430,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,451,8,30,10,30,12,30,454,9,30,
  	1,31,1,31,1,31,1,31,4,31,460,8,31,11,31,12,31,461,1,31,1,31,3,31,466,
  	8,31,1,31,1,31,1,31,1,31,1,31,4,31,473,8,31,11,31,12,31,474,1,31,1,31,
  	3,31,479,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,31,5,31,495,8,31,10,31,12,31,498,9,31,3,31,500,8,31,1,31,
  	1,31,1,31,1,31,1,31,1,31,3,31,508,8,31,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,31,3,31,517,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,4,31,538,8,31,11,31,12,31,
  	539,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,553,8,
  	31,10,31,12,31,556,9,31,3,31,558,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
  	31,3,31,567,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,577,8,31,
  	10,31,12,31,580,9,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,4,32,590,
  	8,32,11,32,12,32,591,3,32,594,8,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
  	1,36,1,37,1,37,1,37,3,37,607,8,37,1,38,1,38,3,38,611,8,38,1,39,1,39,1,
  	39,4,39,616,8,39,11,39,12,39,617,1,40,1,40,1,40,3,40,623,8,40,1,41,1,
  	41,1,41,1,41,1,41,1,42,3,42,631,8,42,1,42,1,42,3,42,635,8,42,1,43,1,43,
  	1,43,3,43,640,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,3,44,657,8,44,1,44,1,44,3,44,661,8,44,1,44,1,
  	44,1,44,1,44,1,44,5,44,668,8,44,10,44,12,44,671,9,44,1,44,3,44,674,8,
  	44,3,44,676,8,44,1,45,1,45,1,45,5,45,681,8,45,10,45,12,45,684,9,45,1,
  	46,1,46,1,46,1,46,3,46,690,8,46,1,46,3,46,693,8,46,1,46,3,46,696,8,46,
  	1,47,1,47,1,47,5,47,701,8,47,10,47,12,47,704,9,47,1,48,1,48,1,48,1,48,
  	3,48,710,8,48,1,48,3,48,713,8,48,1,49,1,49,1,49,5,49,718,8,49,10,49,12,
  	49,721,9,49,1,50,1,50,1,50,1,50,1,50,3,50,728,8,50,1,50,3,50,731,8,50,
  	1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,5,52,742,8,52,10,52,12,52,
  	745,9,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,5,54,762,8,54,10,54,12,54,765,9,54,1,54,1,54,1,54,1,54,
  	1,54,5,54,772,8,54,10,54,12,54,775,9,54,3,54,777,8,54,1,54,1,54,1,54,
  	1,54,1,54,5,54,784,8,54,10,54,12,54,787,9,54,3,54,789,8,54,3,54,791,8,
  	54,1,54,3,54,794,8,54,1,54,3,54,797,8,54,1,55,1,55,1,55,1,55,1,55,1,55,
  	1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,815,8,55,1,56,
  	1,56,1,56,1,56,1,56,1,56,1,56,3,56,824,8,56,1,57,1,57,1,57,5,57,829,8,
  	57,10,57,12,57,832,9,57,1,58,1,58,1,58,1,58,3,58,838,8,58,1,59,1,59,1,
  	59,5,59,843,8,59,10,59,12,59,846,9,59,1,60,1,60,1,60,1,61,1,61,4,61,853,
  	8,61,11,61,12,61,854,1,61,3,61,858,8,61,1,62,1,62,3,62,862,8,62,1,63,
  	1,63,1,63,1,63,3,63,868,8,63,1,64,1,64,1,65,3,65,873,8,65,1,65,1,65,3,
  	65,877,8,65,1,65,1,65,3,65,881,8,65,1,65,1,65,3,65,885,8,65,1,65,1,65,
  	3,65,889,8,65,1,65,1,65,3,65,893,8,65,1,65,1,65,3,65,897,8,65,1,65,3,
  	65,900,8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,909,8,66,1,67,1,67,
  	1,68,1,68,1,69,1,69,1,69,0,3,56,60,62,70,0,2,4,6,8,10,12,14,16,18,20,
  	22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
  	68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
  	112,114,116,118,120,122,124,126,128,130,132,134,136,138,0,22,2,0,20,20,
  	65,65,2,0,91,91,123,123,2,0,11,11,70,70,3,0,86,86,234,234,242,242,2,0,
  	264,265,269,269,2,0,72,72,266,268,2,0,264,265,272,272,2,0,54,54,56,56,
  	1,0,256,263,2,0,72,72,264,273,4,0,14,14,109,109,147,147,155,155,2,0,86,
  	86,234,234,1,0,264,265,2,0,278,278,280,280,2,0,71,71,164,164,2,0,156,
  	156,211,211,2,0,92,92,171,171,1,0,279,280,2,0,73,73,205,205,47,0,9,10,
  	12,13,15,15,17,18,20,21,23,23,25,29,32,32,34,37,39,39,41,47,49,49,52,
  	53,58,69,71,73,77,77,79,85,88,88,90,92,95,96,99,101,104,104,106,108,110,
  	111,113,115,117,117,120,120,122,125,128,144,146,146,149,150,153,154,157,
  	157,159,160,162,171,173,181,183,189,191,198,200,203,205,209,211,219,221,
  	225,228,228,230,239,243,246,249,251,254,254,15,0,15,15,51,51,78,78,98,
  	98,112,112,116,116,121,121,127,127,145,145,151,151,190,190,200,200,206,
  	206,240,240,248,248,16,0,9,14,16,50,52,77,79,97,99,111,113,115,117,120,
  	122,126,128,144,146,150,152,189,191,199,201,205,207,239,241,247,249,255,
  	1007,0,140,1,0,0,0,2,149,1,0,0,0,4,152,1,0,0,0,6,154,1,0,0,0,8,157,1,
  	0,0,0,10,170,1,0,0,0,12,191,1,0,0,0,14,200,1,0,0,0,16,202,1,0,0,0,18,
  	210,1,0,0,0,20,217,1,0,0,0,22,223,1,0,0,0,24,226,1,0,0,0,26,235,1,0,0,
  	0,28,237,1,0,0,0,30,239,1,0,0,0,32,243,1,0,0,0,34,251,1,0,0,0,36,262,
  	1,0,0,0,38,266,1,0,0,0,40,277,1,0,0,0,42,294,1,0,0,0,44,303,1,0,0,0,46,
  	305,1,0,0,0,48,313,1,0,0,0,50,321,1,0,0,0,52,331,1,0,0,0,54,339,1,0,0,
  	0,56,348,1,0,0,0,58,423,1,0,0,0,60,429,1,0,0,0,62,566,1,0,0,0,64,593,
  	1,0,0,0,66,595,1,0,0,0,68,597,1,0,0,0,70,599,1,0,0,0,72,601,1,0,0,0,74,
  	603,1,0,0,0,76,608,1,0,0,0,78,615,1,0,0,0,80,619,1,0,0,0,82,624,1,0,0,
  	0,84,634,1,0,0,0,86,639,1,0,0,0,88,675,1,0,0,0,90,677,1,0,0,0,92,685,
  	1,0,0,0,94,697,1,0,0,0,96,705,1,0,0,0,98,714,1,0,0,0,100,722,1,0,0,0,
  	102,732,1,0,0,0,104,737,1,0,0,0,106,746,1,0,0,0,108,796,1,0,0,0,110,814,
  	1,0,0,0,112,823,1,0,0,0,114,825,1,0,0,0,116,837,1,0,0,0,118,839,1,0,0,
  	0,120,847,1,0,0,0,122,857,1,0,0,0,124,861,1,0,0,0,126,867,1,0,0,0,128,
  	869,1,0,0,0,130,899,1,0,0,0,132,908,1,0,0,0,134,910,1,0,0,0,136,912,1,
  	0,0,0,138,914,1,0,0,0,140,144,3,4,2,0,141,143,5,1,0,0,142,141,1,0,0,0,
  	143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,147,1,0,0,0,146,144,
  	1,0,0,0,147,148,5,0,0,1,148,1,1,0,0,0,149,150,3,88,44,0,150,151,5,0,0,
  	1,151,3,1,0,0,0,152,153,3,8,4,0,153,5,1,0,0,0,154,155,5,42,0,0,155,156,
  	5,274,0,0,156,7,1,0,0,0,157,158,3,12,6,0,158,159,3,10,5,0,159,9,1,0,0,
  	0,160,161,5,156,0,0,161,162,5,27,0,0,162,167,3,16,8,0,163,164,5,2,0,0,
  	164,166,3,16,8,0,165,163,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,
  	168,1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,170,160,1,0,0,0,170,171,1,
  	0,0,0,171,182,1,0,0,0,172,173,5,211,0,0,173,174,5,27,0,0,174,179,3,16,
  	8,0,175,176,5,2,0,0,176,178,3,16,8,0,177,175,1,0,0,0,178,181,1,0,0,0,
  	179,177,1,0,0,0,179,180,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,182,172,
  	1,0,0,0,182,183,1,0,0,0,183,189,1,0,0,0,184,187,5,129,0,0,185,188,5,11,
  	0,0,186,188,3,54,27,0,187,185,1,0,0,0,187,186,1,0,0,0,188,190,1,0,0,0,
  	189,184,1,0,0,0,189,190,1,0,0,0,190,11,1,0,0,0,191,192,3,14,7,0,192,13,
  	1,0,0,0,193,201,3,18,9,0,194,195,5,220,0,0,195,201,3,48,24,0,196,197,
  	5,3,0,0,197,198,3,8,4,0,198,199,5,4,0,0,199,201,1,0,0,0,200,193,1,0,0,
  	0,200,194,1,0,0,0,200,196,1,0,0,0,201,15,1,0,0,0,202,204,3,54,27,0,203,
  	205,7,0,0,0,204,203,1,0,0,0,204,205,1,0,0,0,205,208,1,0,0,0,206,207,5,
  	149,0,0,207,209,7,1,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,17,1,0,0,
  	0,210,212,3,20,10,0,211,213,3,24,12,0,212,211,1,0,0,0,212,213,1,0,0,0,
  	213,215,1,0,0,0,214,216,3,22,11,0,215,214,1,0,0,0,215,216,1,0,0,0,216,
  	19,1,0,0,0,217,219,5,199,0,0,218,220,3,26,13,0,219,218,1,0,0,0,219,220,
  	1,0,0,0,220,221,1,0,0,0,221,222,3,52,26,0,222,21,1,0,0,0,223,224,5,253,
  	0,0,224,225,3,56,28,0,225,23,1,0,0,0,226,227,5,97,0,0,227,232,3,28,14,
  	0,228,229,5,2,0,0,229,231,3,28,14,0,230,228,1,0,0,0,231,234,1,0,0,0,232,
  	230,1,0,0,0,232,233,1,0,0,0,233,25,1,0,0,0,234,232,1,0,0,0,235,236,7,
  	2,0,0,236,27,1,0,0,0,237,238,3,42,21,0,238,29,1,0,0,0,239,240,5,3,0,0,
  	240,241,3,32,16,0,241,242,5,4,0,0,242,31,1,0,0,0,243,248,3,120,60,0,244,
  	245,5,2,0,0,245,247,3,120,60,0,246,244,1,0,0,0,247,250,1,0,0,0,248,246,
  	1,0,0,0,248,249,1,0,0,0,249,33,1,0,0,0,250,248,1,0,0,0,251,252,5,3,0,
  	0,252,257,3,36,18,0,253,254,5,2,0,0,254,256,3,36,18,0,255,253,1,0,0,0,
  	256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,260,1,0,0,0,259,257,
  	1,0,0,0,260,261,5,4,0,0,261,35,1,0,0,0,262,264,3,120,60,0,263,265,7,0,
  	0,0,264,263,1,0,0,0,264,265,1,0,0,0,265,37,1,0,0,0,266,267,5,3,0,0,267,
  	272,3,40,20,0,268,269,5,2,0,0,269,271,3,40,20,0,270,268,1,0,0,0,271,274,
  	1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,272,1,0,0,
  	0,275,276,5,4,0,0,276,39,1,0,0,0,277,279,3,124,62,0,278,280,3,6,3,0,279,
  	278,1,0,0,0,279,280,1,0,0,0,280,41,1,0,0,0,281,282,3,48,24,0,282,283,
  	3,44,22,0,283,295,1,0,0,0,284,285,5,3,0,0,285,286,3,8,4,0,286,287,5,4,
  	0,0,287,288,3,44,22,0,288,295,1,0,0,0,289,290,5,3,0,0,290,291,3,28,14,
  	0,291,292,5,4,0,0,292,293,3,44,22,0,293,295,1,0,0,0,294,281,1,0,0,0,294,
  	284,1,0,0,0,294,289,1,0,0,0,295,43,1,0,0,0,296,298,5,19,0,0,297,296,1,
  	0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,301,3,126,63,0,300,302,3,30,
  	15,0,301,300,1,0,0,0,301,302,1,0,0,0,302,304,1,0,0,0,303,297,1,0,0,0,
  	303,304,1,0,0,0,304,45,1,0,0,0,305,310,3,48,24,0,306,307,5,2,0,0,307,
  	309,3,48,24,0,308,306,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,
  	1,0,0,0,311,47,1,0,0,0,312,310,1,0,0,0,313,318,3,120,60,0,314,315,5,5,
  	0,0,315,317,3,120,60,0,316,314,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,
  	0,318,319,1,0,0,0,319,49,1,0,0,0,320,318,1,0,0,0,321,329,3,54,27,0,322,
  	324,5,19,0,0,323,322,1,0,0,0,323,324,1,0,0,0,324,327,1,0,0,0,325,328,
  	3,120,60,0,326,328,3,30,15,0,327,325,1,0,0,0,327,326,1,0,0,0,328,330,
  	1,0,0,0,329,323,1,0,0,0,329,330,1,0,0,0,330,51,1,0,0,0,331,336,3,50,25,
  	0,332,333,5,2,0,0,333,335,3,50,25,0,334,332,1,0,0,0,335,338,1,0,0,0,336,
  	334,1,0,0,0,336,337,1,0,0,0,337,53,1,0,0,0,338,336,1,0,0,0,339,340,3,
  	56,28,0,340,55,1,0,0,0,341,342,6,28,-1,0,342,343,5,147,0,0,343,349,3,
  	56,28,4,344,346,3,60,30,0,345,347,3,58,29,0,346,345,1,0,0,0,346,347,1,
  	0,0,0,347,349,1,0,0,0,348,341,1,0,0,0,348,344,1,0,0,0,349,358,1,0,0,0,
  	350,351,10,2,0,0,351,352,5,14,0,0,352,357,3,56,28,3,353,354,10,1,0,0,
  	354,355,5,155,0,0,355,357,3,56,28,2,356,350,1,0,0,0,356,353,1,0,0,0,357,
  	360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,57,1,0,0,0,360,358,1,
  	0,0,0,361,363,5,147,0,0,362,361,1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,
  	0,364,365,5,23,0,0,365,366,3,60,30,0,366,367,5,14,0,0,367,368,3,60,30,
  	0,368,424,1,0,0,0,369,371,5,147,0,0,370,369,1,0,0,0,370,371,1,0,0,0,371,
  	372,1,0,0,0,372,373,5,109,0,0,373,374,5,3,0,0,374,379,3,54,27,0,375,376,
  	5,2,0,0,376,378,3,54,27,0,377,375,1,0,0,0,378,381,1,0,0,0,379,377,1,0,
  	0,0,379,380,1,0,0,0,380,382,1,0,0,0,381,379,1,0,0,0,382,383,5,4,0,0,383,
  	424,1,0,0,0,384,386,5,147,0,0,385,384,1,0,0,0,385,386,1,0,0,0,386,387,
  	1,0,0,0,387,388,5,109,0,0,388,389,5,3,0,0,389,390,3,8,4,0,390,391,5,4,
  	0,0,391,424,1,0,0,0,392,394,5,147,0,0,393,392,1,0,0,0,393,394,1,0,0,0,
  	394,395,1,0,0,0,395,396,5,191,0,0,396,424,3,60,30,0,397,399,5,147,0,0,
  	398,397,1,0,0,0,398,399,1,0,0,0,399,400,1,0,0,0,400,401,5,128,0,0,401,
  	404,3,60,30,0,402,403,5,76,0,0,403,405,5,274,0,0,404,402,1,0,0,0,404,
  	405,1,0,0,0,405,424,1,0,0,0,406,408,5,119,0,0,407,409,5,147,0,0,408,407,
  	1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,424,5,148,0,0,411,413,5,119,
  	0,0,412,414,5,147,0,0,413,412,1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,
  	415,424,7,3,0,0,416,418,5,119,0,0,417,419,5,147,0,0,418,417,1,0,0,0,418,
  	419,1,0,0,0,419,420,1,0,0,0,420,421,5,70,0,0,421,422,5,97,0,0,422,424,
  	3,60,30,0,423,362,1,0,0,0,423,370,1,0,0,0,423,385,1,0,0,0,423,393,1,0,
  	0,0,423,398,1,0,0,0,423,406,1,0,0,0,423,411,1,0,0,0,423,416,1,0,0,0,424,
  	59,1,0,0,0,425,426,6,30,-1,0,426,430,3,62,31,0,427,428,7,4,0,0,428,430,
  	3,60,30,7,429,425,1,0,0,0,429,427,1,0,0,0,430,452,1,0,0,0,431,432,10,
  	6,0,0,432,433,7,5,0,0,433,451,3,60,30,7,434,435,10,5,0,0,435,436,7,6,
  	0,0,436,451,3,60,30,6,437,438,10,4,0,0,438,439,5,270,0,0,439,451,3,60,
  	30,5,440,441,10,3,0,0,441,442,5,273,0,0,442,451,3,60,30,4,443,444,10,
  	2,0,0,444,445,5,271,0,0,445,451,3,60,30,3,446,447,10,1,0,0,447,448,3,
  	66,33,0,448,449,3,60,30,2,449,451,1,0,0,0,450,431,1,0,0,0,450,434,1,0,
  	0,0,450,437,1,0,0,0,450,440,1,0,0,0,450,443,1,0,0,0,450,446,1,0,0,0,451,
  	454,1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,61,1,0,0,0,454,452,1,
  	0,0,0,455,456,6,31,-1,0,456,567,7,7,0,0,457,459,5,30,0,0,458,460,3,102,
  	51,0,459,458,1,0,0,0,460,461,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,
  	462,465,1,0,0,0,463,464,5,74,0,0,464,466,3,54,27,0,465,463,1,0,0,0,465,
  	466,1,0,0,0,466,467,1,0,0,0,467,468,5,75,0,0,468,567,1,0,0,0,469,470,
  	5,30,0,0,470,472,3,54,27,0,471,473,3,102,51,0,472,471,1,0,0,0,473,474,
  	1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,478,1,0,0,0,476,477,5,74,
  	0,0,477,479,3,54,27,0,478,476,1,0,0,0,478,479,1,0,0,0,479,480,1,0,0,0,
  	480,481,5,75,0,0,481,567,1,0,0,0,482,483,5,31,0,0,483,484,5,3,0,0,484,
  	485,3,54,27,0,485,486,5,19,0,0,486,487,3,88,44,0,487,488,5,4,0,0,488,
  	567,1,0,0,0,489,490,5,217,0,0,490,499,5,3,0,0,491,496,3,50,25,0,492,493,
  	5,2,0,0,493,495,3,50,25,0,494,492,1,0,0,0,495,498,1,0,0,0,496,494,1,0,
  	0,0,496,497,1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,499,491,1,0,0,0,499,
  	500,1,0,0,0,500,501,1,0,0,0,501,567,5,4,0,0,502,503,5,91,0,0,503,504,
  	5,3,0,0,504,507,3,54,27,0,505,506,5,107,0,0,506,508,5,149,0,0,507,505,
  	1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,0,509,510,5,4,0,0,510,567,1,0,0,
  	0,511,512,5,123,0,0,512,513,5,3,0,0,513,516,3,54,27,0,514,515,5,107,0,
  	0,515,517,5,149,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,518,1,0,0,0,518,
  	519,5,4,0,0,519,567,1,0,0,0,520,521,5,170,0,0,521,522,5,3,0,0,522,523,
  	3,60,30,0,523,524,5,109,0,0,524,525,3,60,30,0,525,526,5,4,0,0,526,567,
  	1,0,0,0,527,567,3,64,32,0,528,567,5,266,0,0,529,530,3,118,59,0,530,531,
  	5,5,0,0,531,532,5,266,0,0,532,567,1,0,0,0,533,534,5,3,0,0,534,537,3,50,
  	25,0,535,536,5,2,0,0,536,538,3,50,25,0,537,535,1,0,0,0,538,539,1,0,0,
  	0,539,537,1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,542,5,4,0,0,542,
  	567,1,0,0,0,543,544,5,3,0,0,544,545,3,8,4,0,545,546,5,4,0,0,546,567,1,
  	0,0,0,547,548,3,116,58,0,548,557,5,3,0,0,549,554,3,54,27,0,550,551,5,
  	2,0,0,551,553,3,54,27,0,552,550,1,0,0,0,553,556,1,0,0,0,554,552,1,0,0,
  	0,554,555,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,557,549,1,0,0,0,557,
  	558,1,0,0,0,558,559,1,0,0,0,559,560,5,4,0,0,560,567,1,0,0,0,561,567,3,
  	124,62,0,562,563,5,3,0,0,563,564,3,54,27,0,564,565,5,4,0,0,565,567,1,
  	0,0,0,566,455,1,0,0,0,566,457,1,0,0,0,566,469,1,0,0,0,566,482,1,0,0,0,
  	566,489,1,0,0,0,566,502,1,0,0,0,566,511,1,0,0,0,566,520,1,0,0,0,566,527,
  	1,0,0,0,566,528,1,0,0,0,566,529,1,0,0,0,566,533,1,0,0,0,566,543,1,0,0,
  	0,566,547,1,0,0,0,566,561,1,0,0,0,566,562,1,0,0,0,567,578,1,0,0,0,568,
  	569,10,4,0,0,569,570,5,6,0,0,570,571,3,60,30,0,571,572,5,7,0,0,572,577,
  	1,0,0,0,573,574,10,2,0,0,574,575,5,5,0,0,575,577,3,124,62,0,576,568,1,
  	0,0,0,576,573,1,0,0,0,577,580,1,0,0,0,578,576,1,0,0,0,578,579,1,0,0,0,
  	579,63,1,0,0,0,580,578,1,0,0,0,581,594,5,148,0,0,582,594,3,74,37,0,583,
  	584,3,124,62,0,584,585,5,274,0,0,585,594,1,0,0,0,586,594,3,130,65,0,587,
  	594,3,72,36,0,588,590,5,274,0,0,589,588,1,0,0,0,590,591,1,0,0,0,591,589,
  	1,0,0,0,591,592,1,0,0,0,592,594,1,0,0,0,593,581,1,0,0,0,593,582,1,0,0,
  	0,593,583,1,0,0,0,593,586,1,0,0,0,593,587,1,0,0,0,593,589,1,0,0,0,594,
  	65,1,0,0,0,595,596,7,8,0,0,596,67,1,0,0,0,597,598,7,9,0,0,598,69,1,0,
  	0,0,599,600,7,10,0,0,600,71,1,0,0,0,601,602,7,11,0,0,602,73,1,0,0,0,603,
  	606,5,117,0,0,604,607,3,76,38,0,605,607,3,80,40,0,606,604,1,0,0,0,606,
  	605,1,0,0,0,606,607,1,0,0,0,607,75,1,0,0,0,608,610,3,78,39,0,609,611,
  	3,82,41,0,610,609,1,0,0,0,610,611,1,0,0,0,611,77,1,0,0,0,612,613,3,84,
  	42,0,613,614,3,124,62,0,614,616,1,0,0,0,615,612,1,0,0,0,616,617,1,0,0,
  	0,617,615,1,0,0,0,617,618,1,0,0,0,618,79,1,0,0,0,619,622,3,82,41,0,620,
  	623,3,78,39,0,621,623,3,82,41,0,622,620,1,0,0,0,622,621,1,0,0,0,622,623,
  	1,0,0,0,623,81,1,0,0,0,624,625,3,84,42,0,625,626,3,124,62,0,626,627,5,
  	227,0,0,627,628,3,124,62,0,628,83,1,0,0,0,629,631,7,12,0,0,630,629,1,
  	0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,635,7,13,0,0,633,635,5,274,
  	0,0,634,630,1,0,0,0,634,633,1,0,0,0,635,85,1,0,0,0,636,640,5,91,0,0,637,
  	638,5,10,0,0,638,640,3,120,60,0,639,636,1,0,0,0,639,637,1,0,0,0,640,87,
  	1,0,0,0,641,642,5,18,0,0,642,643,5,260,0,0,643,644,3,88,44,0,644,645,
  	5,262,0,0,645,676,1,0,0,0,646,647,5,139,0,0,647,648,5,260,0,0,648,649,
  	3,88,44,0,649,650,5,2,0,0,650,651,3,88,44,0,651,652,5,262,0,0,652,676,
  	1,0,0,0,653,660,5,217,0,0,654,656,5,260,0,0,655,657,3,98,49,0,656,655,
  	1,0,0,0,656,657,1,0,0,0,657,658,1,0,0,0,658,661,5,262,0,0,659,661,5,258,
  	0,0,660,654,1,0,0,0,660,659,1,0,0,0,661,676,1,0,0,0,662,673,3,124,62,
  	0,663,664,5,3,0,0,664,669,5,278,0,0,665,666,5,2,0,0,666,668,5,278,0,0,
  	667,665,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,672,
  	1,0,0,0,671,669,1,0,0,0,672,674,5,4,0,0,673,663,1,0,0,0,673,674,1,0,0,
  	0,674,676,1,0,0,0,675,641,1,0,0,0,675,646,1,0,0,0,675,653,1,0,0,0,675,
  	662,1,0,0,0,676,89,1,0,0,0,677,682,3,92,46,0,678,679,5,2,0,0,679,681,
  	3,92,46,0,680,678,1,0,0,0,681,684,1,0,0,0,682,680,1,0,0,0,682,683,1,0,
  	0,0,683,91,1,0,0,0,684,682,1,0,0,0,685,686,3,48,24,0,686,689,3,88,44,
  	0,687,688,5,147,0,0,688,690,5,148,0,0,689,687,1,0,0,0,689,690,1,0,0,0,
  	690,692,1,0,0,0,691,693,3,6,3,0,692,691,1,0,0,0,692,693,1,0,0,0,693,695,
  	1,0,0,0,694,696,3,86,43,0,695,694,1,0,0,0,695,696,1,0,0,0,696,93,1,0,
  	0,0,697,702,3,96,48,0,698,699,5,2,0,0,699,701,3,96,48,0,700,698,1,0,0,
  	0,701,704,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,95,1,0,0,0,704,
  	702,1,0,0,0,705,706,3,120,60,0,706,709,3,88,44,0,707,708,5,147,0,0,708,
  	710,5,148,0,0,709,707,1,0,0,0,709,710,1,0,0,0,710,712,1,0,0,0,711,713,
  	3,6,3,0,712,711,1,0,0,0,712,713,1,0,0,0,713,97,1,0,0,0,714,719,3,100,
  	50,0,715,716,5,2,0,0,716,718,3,100,50,0,717,715,1,0,0,0,718,721,1,0,0,
  	0,719,717,1,0,0,0,719,720,1,0,0,0,720,99,1,0,0,0,721,719,1,0,0,0,722,
  	723,3,124,62,0,723,724,5,8,0,0,724,727,3,88,44,0,725,726,5,147,0,0,726,
  	728,5,148,0,0,727,725,1,0,0,0,727,728,1,0,0,0,728,730,1,0,0,0,729,731,
  	3,6,3,0,730,729,1,0,0,0,730,731,1,0,0,0,731,101,1,0,0,0,732,733,5,252,
  	0,0,733,734,3,54,27,0,734,735,5,226,0,0,735,736,3,54,27,0,736,103,1,0,
  	0,0,737,738,5,254,0,0,738,743,3,106,53,0,739,740,5,2,0,0,740,742,3,106,
  	53,0,741,739,1,0,0,0,742,745,1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,
  	744,105,1,0,0,0,745,743,1,0,0,0,746,747,3,120,60,0,747,748,5,19,0,0,748,
  	749,3,108,54,0,749,107,1,0,0,0,750,797,3,120,60,0,751,752,5,3,0,0,752,
  	753,3,120,60,0,753,754,5,4,0,0,754,797,1,0,0,0,755,790,5,3,0,0,756,757,
  	5,35,0,0,757,758,5,27,0,0,758,763,3,54,27,0,759,760,5,2,0,0,760,762,3,
  	54,27,0,761,759,1,0,0,0,762,765,1,0,0,0,763,761,1,0,0,0,763,764,1,0,0,
  	0,764,791,1,0,0,0,765,763,1,0,0,0,766,767,7,14,0,0,767,768,5,27,0,0,768,
  	773,3,54,27,0,769,770,5,2,0,0,770,772,3,54,27,0,771,769,1,0,0,0,772,775,
  	1,0,0,0,773,771,1,0,0,0,773,774,1,0,0,0,774,777,1,0,0,0,775,773,1,0,0,
  	0,776,766,1,0,0,0,776,777,1,0,0,0,777,788,1,0,0,0,778,779,7,15,0,0,779,
  	780,5,27,0,0,780,785,3,16,8,0,781,782,5,2,0,0,782,784,3,16,8,0,783,781,
  	1,0,0,0,784,787,1,0,0,0,785,783,1,0,0,0,785,786,1,0,0,0,786,789,1,0,0,
  	0,787,785,1,0,0,0,788,778,1,0,0,0,788,789,1,0,0,0,789,791,1,0,0,0,790,
  	756,1,0,0,0,790,776,1,0,0,0,791,793,1,0,0,0,792,794,3,110,55,0,793,792,
  	1,0,0,0,793,794,1,0,0,0,794,795,1,0,0,0,795,797,5,4,0,0,796,750,1,0,0,
  	0,796,751,1,0,0,0,796,755,1,0,0,0,797,109,1,0,0,0,798,799,5,177,0,0,799,
  	815,3,112,56,0,800,801,5,197,0,0,801,815,3,112,56,0,802,803,5,177,0,0,
  	803,804,5,23,0,0,804,805,3,112,56,0,805,806,5,14,0,0,806,807,3,112,56,
  	0,807,815,1,0,0,0,808,809,5,197,0,0,809,810,5,23,0,0,810,811,3,112,56,
  	0,811,812,5,14,0,0,812,813,3,112,56,0,813,815,1,0,0,0,814,798,1,0,0,0,
  	814,800,1,0,0,0,814,802,1,0,0,0,814,808,1,0,0,0,815,111,1,0,0,0,816,817,
  	5,238,0,0,817,824,7,16,0,0,818,819,5,53,0,0,819,824,5,196,0,0,820,821,
  	3,54,27,0,821,822,7,16,0,0,822,824,1,0,0,0,823,816,1,0,0,0,823,818,1,
  	0,0,0,823,820,1,0,0,0,824,113,1,0,0,0,825,830,3,118,59,0,826,827,5,2,
  	0,0,827,829,3,118,59,0,828,826,1,0,0,0,829,832,1,0,0,0,830,828,1,0,0,
  	0,830,831,1,0,0,0,831,115,1,0,0,0,832,830,1,0,0,0,833,838,3,118,59,0,
  	834,838,5,89,0,0,835,838,5,127,0,0,836,838,5,190,0,0,837,833,1,0,0,0,
  	837,834,1,0,0,0,837,835,1,0,0,0,837,836,1,0,0,0,838,117,1,0,0,0,839,844,
  	3,124,62,0,840,841,5,5,0,0,841,843,3,124,62,0,842,840,1,0,0,0,843,846,
  	1,0,0,0,844,842,1,0,0,0,844,845,1,0,0,0,845,119,1,0,0,0,846,844,1,0,0,
  	0,847,848,3,124,62,0,848,849,3,122,61,0,849,121,1,0,0,0,850,851,5,265,
  	0,0,851,853,3,124,62,0,852,850,1,0,0,0,853,854,1,0,0,0,854,852,1,0,0,
  	0,854,855,1,0,0,0,855,858,1,0,0,0,856,858,1,0,0,0,857,852,1,0,0,0,857,
  	856,1,0,0,0,858,123,1,0,0,0,859,862,3,126,63,0,860,862,3,136,68,0,861,
  	859,1,0,0,0,861,860,1,0,0,0,862,125,1,0,0,0,863,868,5,283,0,0,864,868,
  	3,128,64,0,865,868,3,134,67,0,866,868,3,138,69,0,867,863,1,0,0,0,867,
  	864,1,0,0,0,867,865,1,0,0,0,867,866,1,0,0,0,868,127,1,0,0,0,869,870,5,
  	284,0,0,870,129,1,0,0,0,871,873,5,265,0,0,872,871,1,0,0,0,872,873,1,0,
  	0,0,873,874,1,0,0,0,874,900,7,17,0,0,875,877,5,265,0,0,876,875,1,0,0,
  	0,876,877,1,0,0,0,877,878,1,0,0,0,878,900,5,278,0,0,879,881,5,265,0,0,
  	880,879,1,0,0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,900,5,275,0,0,883,
  	885,5,265,0,0,884,883,1,0,0,0,884,885,1,0,0,0,885,886,1,0,0,0,886,900,
  	5,276,0,0,887,889,5,265,0,0,888,887,1,0,0,0,888,889,1,0,0,0,889,890,1,
  	0,0,0,890,900,5,277,0,0,891,893,5,265,0,0,892,891,1,0,0,0,892,893,1,0,
  	0,0,893,894,1,0,0,0,894,900,5,281,0,0,895,897,5,265,0,0,896,895,1,0,0,
  	0,896,897,1,0,0,0,897,898,1,0,0,0,898,900,5,282,0,0,899,872,1,0,0,0,899,
  	876,1,0,0,0,899,880,1,0,0,0,899,884,1,0,0,0,899,888,1,0,0,0,899,892,1,
  	0,0,0,899,896,1,0,0,0,900,131,1,0,0,0,901,902,5,236,0,0,902,909,3,88,
  	44,0,903,909,3,6,3,0,904,909,3,86,43,0,905,906,7,18,0,0,906,907,5,147,
  	0,0,907,909,5,148,0,0,908,901,1,0,0,0,908,903,1,0,0,0,908,904,1,0,0,0,
  	908,905,1,0,0,0,909,133,1,0,0,0,910,911,7,19,0,0,911,135,1,0,0,0,912,
  	913,7,20,0,0,913,137,1,0,0,0,914,915,7,21,0,0,915,139,1,0,0,0,112,144,
  	167,170,179,182,187,189,200,204,208,212,215,219,232,248,257,264,272,279,
  	294,297,301,303,310,318,323,327,329,336,346,348,356,358,362,370,379,385,
  	393,398,404,408,413,418,423,429,450,452,461,465,474,478,496,499,507,516,
  	539,554,557,566,576,578,591,593,606,610,617,622,630,634,639,656,660,669,
  	673,675,682,689,692,695,702,709,712,719,727,730,743,763,773,776,785,788,
  	790,793,796,814,823,830,837,844,854,857,861,867,872,876,880,884,888,892,
  	896,899,908
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sqlparserParserStaticData = staticData.release();
}

}

SQLParserParser::SQLParserParser(TokenStream *input) : SQLParserParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

SQLParserParser::SQLParserParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  SQLParserParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *sqlparserParserStaticData->atn, sqlparserParserStaticData->decisionToDFA, sqlparserParserStaticData->sharedContextCache, options);
}

SQLParserParser::~SQLParserParser() {
  delete _interpreter;
}

const atn::ATN& SQLParserParser::getATN() const {
  return *sqlparserParserStaticData->atn;
}

std::string SQLParserParser::getGrammarFileName() const {
  return "SQLParser.g4";
}

const std::vector<std::string>& SQLParserParser::getRuleNames() const {
  return sqlparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& SQLParserParser::getVocabulary() const {
  return sqlparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SQLParserParser::getSerializedATN() const {
  return sqlparserParserStaticData->serializedATN;
}


//----------------- SingleStatementContext ------------------------------------------------------------------

SQLParserParser::SingleStatementContext::SingleStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::StatementContext* SQLParserParser::SingleStatementContext::statement() {
  return getRuleContext<SQLParserParser::StatementContext>(0);
}

tree::TerminalNode* SQLParserParser::SingleStatementContext::EOF() {
  return getToken(SQLParserParser::EOF, 0);
}


size_t SQLParserParser::SingleStatementContext::getRuleIndex() const {
  return SQLParserParser::RuleSingleStatement;
}


std::any SQLParserParser::SingleStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitSingleStatement(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::SingleStatementContext* SQLParserParser::singleStatement() {
  SingleStatementContext *_localctx = _tracker.createInstance<SingleStatementContext>(_ctx, getState());
  enterRule(_localctx, 0, SQLParserParser::RuleSingleStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(140);
    statement();
    setState(144);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SQLParserParser::T__0) {
      setState(141);
      match(SQLParserParser::T__0);
      setState(146);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(147);
    match(SQLParserParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleDataTypeContext ------------------------------------------------------------------

SQLParserParser::SingleDataTypeContext::SingleDataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::DataTypeContext* SQLParserParser::SingleDataTypeContext::dataType() {
  return getRuleContext<SQLParserParser::DataTypeContext>(0);
}

tree::TerminalNode* SQLParserParser::SingleDataTypeContext::EOF() {
  return getToken(SQLParserParser::EOF, 0);
}


size_t SQLParserParser::SingleDataTypeContext::getRuleIndex() const {
  return SQLParserParser::RuleSingleDataType;
}


std::any SQLParserParser::SingleDataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitSingleDataType(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::SingleDataTypeContext* SQLParserParser::singleDataType() {
  SingleDataTypeContext *_localctx = _tracker.createInstance<SingleDataTypeContext>(_ctx, getState());
  enterRule(_localctx, 2, SQLParserParser::RuleSingleDataType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(149);
    dataType();
    setState(150);
    match(SQLParserParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

SQLParserParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SQLParserParser::StatementContext::getRuleIndex() const {
  return SQLParserParser::RuleStatement;
}

void SQLParserParser::StatementContext::copyFrom(StatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- StatementDefaultContext ------------------------------------------------------------------

SQLParserParser::QueryContext* SQLParserParser::StatementDefaultContext::query() {
  return getRuleContext<SQLParserParser::QueryContext>(0);
}

SQLParserParser::StatementDefaultContext::StatementDefaultContext(StatementContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::StatementDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitStatementDefault(this);
  else
    return visitor->visitChildren(this);
}
SQLParserParser::StatementContext* SQLParserParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, SQLParserParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    _localctx = _tracker.createInstance<SQLParserParser::StatementDefaultContext>(_localctx);
    enterOuterAlt(_localctx, 1);
    setState(152);
    query();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommentSpecContext ------------------------------------------------------------------

SQLParserParser::CommentSpecContext::CommentSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::CommentSpecContext::COMMENT() {
  return getToken(SQLParserParser::COMMENT, 0);
}

tree::TerminalNode* SQLParserParser::CommentSpecContext::STRING() {
  return getToken(SQLParserParser::STRING, 0);
}


size_t SQLParserParser::CommentSpecContext::getRuleIndex() const {
  return SQLParserParser::RuleCommentSpec;
}


std::any SQLParserParser::CommentSpecContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitCommentSpec(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::CommentSpecContext* SQLParserParser::commentSpec() {
  CommentSpecContext *_localctx = _tracker.createInstance<CommentSpecContext>(_ctx, getState());
  enterRule(_localctx, 6, SQLParserParser::RuleCommentSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(154);
    match(SQLParserParser::COMMENT);
    setState(155);
    match(SQLParserParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryContext ------------------------------------------------------------------

SQLParserParser::QueryContext::QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::QueryTermContext* SQLParserParser::QueryContext::queryTerm() {
  return getRuleContext<SQLParserParser::QueryTermContext>(0);
}

SQLParserParser::QueryOrganizationContext* SQLParserParser::QueryContext::queryOrganization() {
  return getRuleContext<SQLParserParser::QueryOrganizationContext>(0);
}


size_t SQLParserParser::QueryContext::getRuleIndex() const {
  return SQLParserParser::RuleQuery;
}


std::any SQLParserParser::QueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitQuery(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::QueryContext* SQLParserParser::query() {
  QueryContext *_localctx = _tracker.createInstance<QueryContext>(_ctx, getState());
  enterRule(_localctx, 8, SQLParserParser::RuleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(157);
    queryTerm();
    setState(158);
    queryOrganization();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryOrganizationContext ------------------------------------------------------------------

SQLParserParser::QueryOrganizationContext::QueryOrganizationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::QueryOrganizationContext::ORDER() {
  return getToken(SQLParserParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> SQLParserParser::QueryOrganizationContext::BY() {
  return getTokens(SQLParserParser::BY);
}

tree::TerminalNode* SQLParserParser::QueryOrganizationContext::BY(size_t i) {
  return getToken(SQLParserParser::BY, i);
}

tree::TerminalNode* SQLParserParser::QueryOrganizationContext::SORT() {
  return getToken(SQLParserParser::SORT, 0);
}

tree::TerminalNode* SQLParserParser::QueryOrganizationContext::LIMIT() {
  return getToken(SQLParserParser::LIMIT, 0);
}

std::vector<SQLParserParser::SortItemContext *> SQLParserParser::QueryOrganizationContext::sortItem() {
  return getRuleContexts<SQLParserParser::SortItemContext>();
}

SQLParserParser::SortItemContext* SQLParserParser::QueryOrganizationContext::sortItem(size_t i) {
  return getRuleContext<SQLParserParser::SortItemContext>(i);
}

tree::TerminalNode* SQLParserParser::QueryOrganizationContext::ALL() {
  return getToken(SQLParserParser::ALL, 0);
}

SQLParserParser::ExpressionContext* SQLParserParser::QueryOrganizationContext::expression() {
  return getRuleContext<SQLParserParser::ExpressionContext>(0);
}


size_t SQLParserParser::QueryOrganizationContext::getRuleIndex() const {
  return SQLParserParser::RuleQueryOrganization;
}


std::any SQLParserParser::QueryOrganizationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitQueryOrganization(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::QueryOrganizationContext* SQLParserParser::queryOrganization() {
  QueryOrganizationContext *_localctx = _tracker.createInstance<QueryOrganizationContext>(_ctx, getState());
  enterRule(_localctx, 10, SQLParserParser::RuleQueryOrganization);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(170);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::ORDER) {
      setState(160);
      match(SQLParserParser::ORDER);
      setState(161);
      match(SQLParserParser::BY);
      setState(162);
      antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext = sortItem();
      antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->order.push_back(antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext);
      setState(167);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == SQLParserParser::T__1) {
        setState(163);
        match(SQLParserParser::T__1);
        setState(164);
        antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext = sortItem();
        antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->order.push_back(antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext);
        setState(169);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(182);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::SORT) {
      setState(172);
      match(SQLParserParser::SORT);
      setState(173);
      match(SQLParserParser::BY);
      setState(174);
      antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext = sortItem();
      antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sort.push_back(antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext);
      setState(179);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == SQLParserParser::T__1) {
        setState(175);
        match(SQLParserParser::T__1);
        setState(176);
        antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext = sortItem();
        antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sort.push_back(antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext);
        setState(181);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(189);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::LIMIT) {
      setState(184);
      match(SQLParserParser::LIMIT);
      setState(187);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
      case 1: {
        setState(185);
        match(SQLParserParser::ALL);
        break;
      }

      case 2: {
        setState(186);
        antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->limit = expression();
        break;
      }

      default:
        break;
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryTermContext ------------------------------------------------------------------

SQLParserParser::QueryTermContext::QueryTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SQLParserParser::QueryTermContext::getRuleIndex() const {
  return SQLParserParser::RuleQueryTerm;
}

void SQLParserParser::QueryTermContext::copyFrom(QueryTermContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- QueryTermDefaultContext ------------------------------------------------------------------

SQLParserParser::QueryPrimaryContext* SQLParserParser::QueryTermDefaultContext::queryPrimary() {
  return getRuleContext<SQLParserParser::QueryPrimaryContext>(0);
}

SQLParserParser::QueryTermDefaultContext::QueryTermDefaultContext(QueryTermContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::QueryTermDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitQueryTermDefault(this);
  else
    return visitor->visitChildren(this);
}
SQLParserParser::QueryTermContext* SQLParserParser::queryTerm() {
  QueryTermContext *_localctx = _tracker.createInstance<QueryTermContext>(_ctx, getState());
  enterRule(_localctx, 12, SQLParserParser::RuleQueryTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    _localctx = _tracker.createInstance<SQLParserParser::QueryTermDefaultContext>(_localctx);
    enterOuterAlt(_localctx, 1);
    setState(191);
    queryPrimary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryPrimaryContext ------------------------------------------------------------------

SQLParserParser::QueryPrimaryContext::QueryPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SQLParserParser::QueryPrimaryContext::getRuleIndex() const {
  return SQLParserParser::RuleQueryPrimary;
}

void SQLParserParser::QueryPrimaryContext::copyFrom(QueryPrimaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SubqueryContext ------------------------------------------------------------------

SQLParserParser::QueryContext* SQLParserParser::SubqueryContext::query() {
  return getRuleContext<SQLParserParser::QueryContext>(0);
}

SQLParserParser::SubqueryContext::SubqueryContext(QueryPrimaryContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::SubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitSubquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- QueryPrimaryDefaultContext ------------------------------------------------------------------

SQLParserParser::QuerySpecificationContext* SQLParserParser::QueryPrimaryDefaultContext::querySpecification() {
  return getRuleContext<SQLParserParser::QuerySpecificationContext>(0);
}

SQLParserParser::QueryPrimaryDefaultContext::QueryPrimaryDefaultContext(QueryPrimaryContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::QueryPrimaryDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitQueryPrimaryDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::TableContext::TABLE() {
  return getToken(SQLParserParser::TABLE, 0);
}

SQLParserParser::MultipartIdentifierContext* SQLParserParser::TableContext::multipartIdentifier() {
  return getRuleContext<SQLParserParser::MultipartIdentifierContext>(0);
}

SQLParserParser::TableContext::TableContext(QueryPrimaryContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::TableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitTable(this);
  else
    return visitor->visitChildren(this);
}
SQLParserParser::QueryPrimaryContext* SQLParserParser::queryPrimary() {
  QueryPrimaryContext *_localctx = _tracker.createInstance<QueryPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 14, SQLParserParser::RuleQueryPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(200);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SQLParserParser::SELECT: {
        _localctx = _tracker.createInstance<SQLParserParser::QueryPrimaryDefaultContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(193);
        querySpecification();
        break;
      }

      case SQLParserParser::TABLE: {
        _localctx = _tracker.createInstance<SQLParserParser::TableContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(194);
        match(SQLParserParser::TABLE);
        setState(195);
        multipartIdentifier();
        break;
      }

      case SQLParserParser::T__2: {
        _localctx = _tracker.createInstance<SQLParserParser::SubqueryContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(196);
        match(SQLParserParser::T__2);
        setState(197);
        query();
        setState(198);
        match(SQLParserParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortItemContext ------------------------------------------------------------------

SQLParserParser::SortItemContext::SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::ExpressionContext* SQLParserParser::SortItemContext::expression() {
  return getRuleContext<SQLParserParser::ExpressionContext>(0);
}

tree::TerminalNode* SQLParserParser::SortItemContext::NULLS() {
  return getToken(SQLParserParser::NULLS, 0);
}

tree::TerminalNode* SQLParserParser::SortItemContext::ASC() {
  return getToken(SQLParserParser::ASC, 0);
}

tree::TerminalNode* SQLParserParser::SortItemContext::DESC() {
  return getToken(SQLParserParser::DESC, 0);
}

tree::TerminalNode* SQLParserParser::SortItemContext::LAST() {
  return getToken(SQLParserParser::LAST, 0);
}

tree::TerminalNode* SQLParserParser::SortItemContext::FIRST() {
  return getToken(SQLParserParser::FIRST, 0);
}


size_t SQLParserParser::SortItemContext::getRuleIndex() const {
  return SQLParserParser::RuleSortItem;
}


std::any SQLParserParser::SortItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitSortItem(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::SortItemContext* SQLParserParser::sortItem() {
  SortItemContext *_localctx = _tracker.createInstance<SortItemContext>(_ctx, getState());
  enterRule(_localctx, 16, SQLParserParser::RuleSortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(202);
    expression();
    setState(204);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::ASC

    || _la == SQLParserParser::DESC) {
      setState(203);
      antlrcpp::downCast<SortItemContext *>(_localctx)->ordering = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == SQLParserParser::ASC

      || _la == SQLParserParser::DESC)) {
        antlrcpp::downCast<SortItemContext *>(_localctx)->ordering = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(208);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::NULLS) {
      setState(206);
      match(SQLParserParser::NULLS);
      setState(207);
      antlrcpp::downCast<SortItemContext *>(_localctx)->nullOrder = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == SQLParserParser::FIRST

      || _la == SQLParserParser::LAST)) {
        antlrcpp::downCast<SortItemContext *>(_localctx)->nullOrder = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuerySpecificationContext ------------------------------------------------------------------

SQLParserParser::QuerySpecificationContext::QuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::SelectClauseContext* SQLParserParser::QuerySpecificationContext::selectClause() {
  return getRuleContext<SQLParserParser::SelectClauseContext>(0);
}

SQLParserParser::FromClauseContext* SQLParserParser::QuerySpecificationContext::fromClause() {
  return getRuleContext<SQLParserParser::FromClauseContext>(0);
}

SQLParserParser::WhereClauseContext* SQLParserParser::QuerySpecificationContext::whereClause() {
  return getRuleContext<SQLParserParser::WhereClauseContext>(0);
}


size_t SQLParserParser::QuerySpecificationContext::getRuleIndex() const {
  return SQLParserParser::RuleQuerySpecification;
}


std::any SQLParserParser::QuerySpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitQuerySpecification(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::QuerySpecificationContext* SQLParserParser::querySpecification() {
  QuerySpecificationContext *_localctx = _tracker.createInstance<QuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 18, SQLParserParser::RuleQuerySpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(210);
    selectClause();
    setState(212);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::FROM) {
      setState(211);
      fromClause();
    }
    setState(215);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::WHERE) {
      setState(214);
      whereClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectClauseContext ------------------------------------------------------------------

SQLParserParser::SelectClauseContext::SelectClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::SelectClauseContext::SELECT() {
  return getToken(SQLParserParser::SELECT, 0);
}

SQLParserParser::NamedExpressionSeqContext* SQLParserParser::SelectClauseContext::namedExpressionSeq() {
  return getRuleContext<SQLParserParser::NamedExpressionSeqContext>(0);
}

SQLParserParser::SetQuantifierContext* SQLParserParser::SelectClauseContext::setQuantifier() {
  return getRuleContext<SQLParserParser::SetQuantifierContext>(0);
}


size_t SQLParserParser::SelectClauseContext::getRuleIndex() const {
  return SQLParserParser::RuleSelectClause;
}


std::any SQLParserParser::SelectClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectClause(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::SelectClauseContext* SQLParserParser::selectClause() {
  SelectClauseContext *_localctx = _tracker.createInstance<SelectClauseContext>(_ctx, getState());
  enterRule(_localctx, 20, SQLParserParser::RuleSelectClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(217);
    match(SQLParserParser::SELECT);
    setState(219);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      setState(218);
      setQuantifier();
      break;
    }

    default:
      break;
    }
    setState(221);
    namedExpressionSeq();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhereClauseContext ------------------------------------------------------------------

SQLParserParser::WhereClauseContext::WhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::WhereClauseContext::WHERE() {
  return getToken(SQLParserParser::WHERE, 0);
}

SQLParserParser::BooleanExpressionContext* SQLParserParser::WhereClauseContext::booleanExpression() {
  return getRuleContext<SQLParserParser::BooleanExpressionContext>(0);
}


size_t SQLParserParser::WhereClauseContext::getRuleIndex() const {
  return SQLParserParser::RuleWhereClause;
}


std::any SQLParserParser::WhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitWhereClause(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::WhereClauseContext* SQLParserParser::whereClause() {
  WhereClauseContext *_localctx = _tracker.createInstance<WhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 22, SQLParserParser::RuleWhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(223);
    match(SQLParserParser::WHERE);
    setState(224);
    booleanExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromClauseContext ------------------------------------------------------------------

SQLParserParser::FromClauseContext::FromClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::FromClauseContext::FROM() {
  return getToken(SQLParserParser::FROM, 0);
}

std::vector<SQLParserParser::RelationContext *> SQLParserParser::FromClauseContext::relation() {
  return getRuleContexts<SQLParserParser::RelationContext>();
}

SQLParserParser::RelationContext* SQLParserParser::FromClauseContext::relation(size_t i) {
  return getRuleContext<SQLParserParser::RelationContext>(i);
}


size_t SQLParserParser::FromClauseContext::getRuleIndex() const {
  return SQLParserParser::RuleFromClause;
}


std::any SQLParserParser::FromClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitFromClause(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::FromClauseContext* SQLParserParser::fromClause() {
  FromClauseContext *_localctx = _tracker.createInstance<FromClauseContext>(_ctx, getState());
  enterRule(_localctx, 24, SQLParserParser::RuleFromClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(226);
    match(SQLParserParser::FROM);
    setState(227);
    relation();
    setState(232);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SQLParserParser::T__1) {
      setState(228);
      match(SQLParserParser::T__1);
      setState(229);
      relation();
      setState(234);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetQuantifierContext ------------------------------------------------------------------

SQLParserParser::SetQuantifierContext::SetQuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::SetQuantifierContext::DISTINCT() {
  return getToken(SQLParserParser::DISTINCT, 0);
}

tree::TerminalNode* SQLParserParser::SetQuantifierContext::ALL() {
  return getToken(SQLParserParser::ALL, 0);
}


size_t SQLParserParser::SetQuantifierContext::getRuleIndex() const {
  return SQLParserParser::RuleSetQuantifier;
}


std::any SQLParserParser::SetQuantifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitSetQuantifier(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::SetQuantifierContext* SQLParserParser::setQuantifier() {
  SetQuantifierContext *_localctx = _tracker.createInstance<SetQuantifierContext>(_ctx, getState());
  enterRule(_localctx, 26, SQLParserParser::RuleSetQuantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(235);
    _la = _input->LA(1);
    if (!(_la == SQLParserParser::ALL

    || _la == SQLParserParser::DISTINCT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationContext ------------------------------------------------------------------

SQLParserParser::RelationContext::RelationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::RelationPrimaryContext* SQLParserParser::RelationContext::relationPrimary() {
  return getRuleContext<SQLParserParser::RelationPrimaryContext>(0);
}


size_t SQLParserParser::RelationContext::getRuleIndex() const {
  return SQLParserParser::RuleRelation;
}


std::any SQLParserParser::RelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitRelation(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::RelationContext* SQLParserParser::relation() {
  RelationContext *_localctx = _tracker.createInstance<RelationContext>(_ctx, getState());
  enterRule(_localctx, 28, SQLParserParser::RuleRelation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(237);
    relationPrimary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierListContext ------------------------------------------------------------------

SQLParserParser::IdentifierListContext::IdentifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::IdentifierSeqContext* SQLParserParser::IdentifierListContext::identifierSeq() {
  return getRuleContext<SQLParserParser::IdentifierSeqContext>(0);
}


size_t SQLParserParser::IdentifierListContext::getRuleIndex() const {
  return SQLParserParser::RuleIdentifierList;
}


std::any SQLParserParser::IdentifierListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitIdentifierList(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::IdentifierListContext* SQLParserParser::identifierList() {
  IdentifierListContext *_localctx = _tracker.createInstance<IdentifierListContext>(_ctx, getState());
  enterRule(_localctx, 30, SQLParserParser::RuleIdentifierList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(239);
    match(SQLParserParser::T__2);
    setState(240);
    identifierSeq();
    setState(241);
    match(SQLParserParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierSeqContext ------------------------------------------------------------------

SQLParserParser::IdentifierSeqContext::IdentifierSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SQLParserParser::ErrorCapturingIdentifierContext *> SQLParserParser::IdentifierSeqContext::errorCapturingIdentifier() {
  return getRuleContexts<SQLParserParser::ErrorCapturingIdentifierContext>();
}

SQLParserParser::ErrorCapturingIdentifierContext* SQLParserParser::IdentifierSeqContext::errorCapturingIdentifier(size_t i) {
  return getRuleContext<SQLParserParser::ErrorCapturingIdentifierContext>(i);
}


size_t SQLParserParser::IdentifierSeqContext::getRuleIndex() const {
  return SQLParserParser::RuleIdentifierSeq;
}


std::any SQLParserParser::IdentifierSeqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitIdentifierSeq(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::IdentifierSeqContext* SQLParserParser::identifierSeq() {
  IdentifierSeqContext *_localctx = _tracker.createInstance<IdentifierSeqContext>(_ctx, getState());
  enterRule(_localctx, 32, SQLParserParser::RuleIdentifierSeq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(243);
    antlrcpp::downCast<IdentifierSeqContext *>(_localctx)->errorCapturingIdentifierContext = errorCapturingIdentifier();
    antlrcpp::downCast<IdentifierSeqContext *>(_localctx)->ident.push_back(antlrcpp::downCast<IdentifierSeqContext *>(_localctx)->errorCapturingIdentifierContext);
    setState(248);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SQLParserParser::T__1) {
      setState(244);
      match(SQLParserParser::T__1);
      setState(245);
      antlrcpp::downCast<IdentifierSeqContext *>(_localctx)->errorCapturingIdentifierContext = errorCapturingIdentifier();
      antlrcpp::downCast<IdentifierSeqContext *>(_localctx)->ident.push_back(antlrcpp::downCast<IdentifierSeqContext *>(_localctx)->errorCapturingIdentifierContext);
      setState(250);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderedIdentifierListContext ------------------------------------------------------------------

SQLParserParser::OrderedIdentifierListContext::OrderedIdentifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SQLParserParser::OrderedIdentifierContext *> SQLParserParser::OrderedIdentifierListContext::orderedIdentifier() {
  return getRuleContexts<SQLParserParser::OrderedIdentifierContext>();
}

SQLParserParser::OrderedIdentifierContext* SQLParserParser::OrderedIdentifierListContext::orderedIdentifier(size_t i) {
  return getRuleContext<SQLParserParser::OrderedIdentifierContext>(i);
}


size_t SQLParserParser::OrderedIdentifierListContext::getRuleIndex() const {
  return SQLParserParser::RuleOrderedIdentifierList;
}


std::any SQLParserParser::OrderedIdentifierListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderedIdentifierList(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::OrderedIdentifierListContext* SQLParserParser::orderedIdentifierList() {
  OrderedIdentifierListContext *_localctx = _tracker.createInstance<OrderedIdentifierListContext>(_ctx, getState());
  enterRule(_localctx, 34, SQLParserParser::RuleOrderedIdentifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(251);
    match(SQLParserParser::T__2);
    setState(252);
    orderedIdentifier();
    setState(257);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SQLParserParser::T__1) {
      setState(253);
      match(SQLParserParser::T__1);
      setState(254);
      orderedIdentifier();
      setState(259);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(260);
    match(SQLParserParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderedIdentifierContext ------------------------------------------------------------------

SQLParserParser::OrderedIdentifierContext::OrderedIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::ErrorCapturingIdentifierContext* SQLParserParser::OrderedIdentifierContext::errorCapturingIdentifier() {
  return getRuleContext<SQLParserParser::ErrorCapturingIdentifierContext>(0);
}

tree::TerminalNode* SQLParserParser::OrderedIdentifierContext::ASC() {
  return getToken(SQLParserParser::ASC, 0);
}

tree::TerminalNode* SQLParserParser::OrderedIdentifierContext::DESC() {
  return getToken(SQLParserParser::DESC, 0);
}


size_t SQLParserParser::OrderedIdentifierContext::getRuleIndex() const {
  return SQLParserParser::RuleOrderedIdentifier;
}


std::any SQLParserParser::OrderedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderedIdentifier(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::OrderedIdentifierContext* SQLParserParser::orderedIdentifier() {
  OrderedIdentifierContext *_localctx = _tracker.createInstance<OrderedIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 36, SQLParserParser::RuleOrderedIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(262);
    antlrcpp::downCast<OrderedIdentifierContext *>(_localctx)->ident = errorCapturingIdentifier();
    setState(264);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::ASC

    || _la == SQLParserParser::DESC) {
      setState(263);
      antlrcpp::downCast<OrderedIdentifierContext *>(_localctx)->ordering = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == SQLParserParser::ASC

      || _la == SQLParserParser::DESC)) {
        antlrcpp::downCast<OrderedIdentifierContext *>(_localctx)->ordering = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierCommentListContext ------------------------------------------------------------------

SQLParserParser::IdentifierCommentListContext::IdentifierCommentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SQLParserParser::IdentifierCommentContext *> SQLParserParser::IdentifierCommentListContext::identifierComment() {
  return getRuleContexts<SQLParserParser::IdentifierCommentContext>();
}

SQLParserParser::IdentifierCommentContext* SQLParserParser::IdentifierCommentListContext::identifierComment(size_t i) {
  return getRuleContext<SQLParserParser::IdentifierCommentContext>(i);
}


size_t SQLParserParser::IdentifierCommentListContext::getRuleIndex() const {
  return SQLParserParser::RuleIdentifierCommentList;
}


std::any SQLParserParser::IdentifierCommentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitIdentifierCommentList(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::IdentifierCommentListContext* SQLParserParser::identifierCommentList() {
  IdentifierCommentListContext *_localctx = _tracker.createInstance<IdentifierCommentListContext>(_ctx, getState());
  enterRule(_localctx, 38, SQLParserParser::RuleIdentifierCommentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(266);
    match(SQLParserParser::T__2);
    setState(267);
    identifierComment();
    setState(272);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SQLParserParser::T__1) {
      setState(268);
      match(SQLParserParser::T__1);
      setState(269);
      identifierComment();
      setState(274);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(275);
    match(SQLParserParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierCommentContext ------------------------------------------------------------------

SQLParserParser::IdentifierCommentContext::IdentifierCommentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::IdentifierContext* SQLParserParser::IdentifierCommentContext::identifier() {
  return getRuleContext<SQLParserParser::IdentifierContext>(0);
}

SQLParserParser::CommentSpecContext* SQLParserParser::IdentifierCommentContext::commentSpec() {
  return getRuleContext<SQLParserParser::CommentSpecContext>(0);
}


size_t SQLParserParser::IdentifierCommentContext::getRuleIndex() const {
  return SQLParserParser::RuleIdentifierComment;
}


std::any SQLParserParser::IdentifierCommentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitIdentifierComment(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::IdentifierCommentContext* SQLParserParser::identifierComment() {
  IdentifierCommentContext *_localctx = _tracker.createInstance<IdentifierCommentContext>(_ctx, getState());
  enterRule(_localctx, 40, SQLParserParser::RuleIdentifierComment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(277);
    identifier();
    setState(279);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::COMMENT) {
      setState(278);
      commentSpec();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationPrimaryContext ------------------------------------------------------------------

SQLParserParser::RelationPrimaryContext::RelationPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SQLParserParser::RelationPrimaryContext::getRuleIndex() const {
  return SQLParserParser::RuleRelationPrimary;
}

void SQLParserParser::RelationPrimaryContext::copyFrom(RelationPrimaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AliasedRelationContext ------------------------------------------------------------------

SQLParserParser::RelationContext* SQLParserParser::AliasedRelationContext::relation() {
  return getRuleContext<SQLParserParser::RelationContext>(0);
}

SQLParserParser::TableAliasContext* SQLParserParser::AliasedRelationContext::tableAlias() {
  return getRuleContext<SQLParserParser::TableAliasContext>(0);
}

SQLParserParser::AliasedRelationContext::AliasedRelationContext(RelationPrimaryContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::AliasedRelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitAliasedRelation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AliasedQueryContext ------------------------------------------------------------------

SQLParserParser::QueryContext* SQLParserParser::AliasedQueryContext::query() {
  return getRuleContext<SQLParserParser::QueryContext>(0);
}

SQLParserParser::TableAliasContext* SQLParserParser::AliasedQueryContext::tableAlias() {
  return getRuleContext<SQLParserParser::TableAliasContext>(0);
}

SQLParserParser::AliasedQueryContext::AliasedQueryContext(RelationPrimaryContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::AliasedQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitAliasedQuery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableNameContext ------------------------------------------------------------------

SQLParserParser::MultipartIdentifierContext* SQLParserParser::TableNameContext::multipartIdentifier() {
  return getRuleContext<SQLParserParser::MultipartIdentifierContext>(0);
}

SQLParserParser::TableAliasContext* SQLParserParser::TableNameContext::tableAlias() {
  return getRuleContext<SQLParserParser::TableAliasContext>(0);
}

SQLParserParser::TableNameContext::TableNameContext(RelationPrimaryContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::TableNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitTableName(this);
  else
    return visitor->visitChildren(this);
}
SQLParserParser::RelationPrimaryContext* SQLParserParser::relationPrimary() {
  RelationPrimaryContext *_localctx = _tracker.createInstance<RelationPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 42, SQLParserParser::RuleRelationPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(294);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<SQLParserParser::TableNameContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(281);
      multipartIdentifier();
      setState(282);
      tableAlias();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<SQLParserParser::AliasedQueryContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(284);
      match(SQLParserParser::T__2);
      setState(285);
      query();
      setState(286);
      match(SQLParserParser::T__3);
      setState(287);
      tableAlias();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<SQLParserParser::AliasedRelationContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(289);
      match(SQLParserParser::T__2);
      setState(290);
      relation();
      setState(291);
      match(SQLParserParser::T__3);
      setState(292);
      tableAlias();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableAliasContext ------------------------------------------------------------------

SQLParserParser::TableAliasContext::TableAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::StrictIdentifierContext* SQLParserParser::TableAliasContext::strictIdentifier() {
  return getRuleContext<SQLParserParser::StrictIdentifierContext>(0);
}

tree::TerminalNode* SQLParserParser::TableAliasContext::AS() {
  return getToken(SQLParserParser::AS, 0);
}

SQLParserParser::IdentifierListContext* SQLParserParser::TableAliasContext::identifierList() {
  return getRuleContext<SQLParserParser::IdentifierListContext>(0);
}


size_t SQLParserParser::TableAliasContext::getRuleIndex() const {
  return SQLParserParser::RuleTableAlias;
}


std::any SQLParserParser::TableAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitTableAlias(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::TableAliasContext* SQLParserParser::tableAlias() {
  TableAliasContext *_localctx = _tracker.createInstance<TableAliasContext>(_ctx, getState());
  enterRule(_localctx, 44, SQLParserParser::RuleTableAlias);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(303);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      setState(297);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx)) {
      case 1: {
        setState(296);
        match(SQLParserParser::AS);
        break;
      }

      default:
        break;
      }
      setState(299);
      strictIdentifier();
      setState(301);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::T__2) {
        setState(300);
        identifierList();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultipartIdentifierListContext ------------------------------------------------------------------

SQLParserParser::MultipartIdentifierListContext::MultipartIdentifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SQLParserParser::MultipartIdentifierContext *> SQLParserParser::MultipartIdentifierListContext::multipartIdentifier() {
  return getRuleContexts<SQLParserParser::MultipartIdentifierContext>();
}

SQLParserParser::MultipartIdentifierContext* SQLParserParser::MultipartIdentifierListContext::multipartIdentifier(size_t i) {
  return getRuleContext<SQLParserParser::MultipartIdentifierContext>(i);
}


size_t SQLParserParser::MultipartIdentifierListContext::getRuleIndex() const {
  return SQLParserParser::RuleMultipartIdentifierList;
}


std::any SQLParserParser::MultipartIdentifierListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitMultipartIdentifierList(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::MultipartIdentifierListContext* SQLParserParser::multipartIdentifierList() {
  MultipartIdentifierListContext *_localctx = _tracker.createInstance<MultipartIdentifierListContext>(_ctx, getState());
  enterRule(_localctx, 46, SQLParserParser::RuleMultipartIdentifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(305);
    multipartIdentifier();
    setState(310);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SQLParserParser::T__1) {
      setState(306);
      match(SQLParserParser::T__1);
      setState(307);
      multipartIdentifier();
      setState(312);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultipartIdentifierContext ------------------------------------------------------------------

SQLParserParser::MultipartIdentifierContext::MultipartIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SQLParserParser::ErrorCapturingIdentifierContext *> SQLParserParser::MultipartIdentifierContext::errorCapturingIdentifier() {
  return getRuleContexts<SQLParserParser::ErrorCapturingIdentifierContext>();
}

SQLParserParser::ErrorCapturingIdentifierContext* SQLParserParser::MultipartIdentifierContext::errorCapturingIdentifier(size_t i) {
  return getRuleContext<SQLParserParser::ErrorCapturingIdentifierContext>(i);
}


size_t SQLParserParser::MultipartIdentifierContext::getRuleIndex() const {
  return SQLParserParser::RuleMultipartIdentifier;
}


std::any SQLParserParser::MultipartIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitMultipartIdentifier(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::MultipartIdentifierContext* SQLParserParser::multipartIdentifier() {
  MultipartIdentifierContext *_localctx = _tracker.createInstance<MultipartIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 48, SQLParserParser::RuleMultipartIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(313);
    antlrcpp::downCast<MultipartIdentifierContext *>(_localctx)->errorCapturingIdentifierContext = errorCapturingIdentifier();
    antlrcpp::downCast<MultipartIdentifierContext *>(_localctx)->parts.push_back(antlrcpp::downCast<MultipartIdentifierContext *>(_localctx)->errorCapturingIdentifierContext);
    setState(318);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SQLParserParser::T__4) {
      setState(314);
      match(SQLParserParser::T__4);
      setState(315);
      antlrcpp::downCast<MultipartIdentifierContext *>(_localctx)->errorCapturingIdentifierContext = errorCapturingIdentifier();
      antlrcpp::downCast<MultipartIdentifierContext *>(_localctx)->parts.push_back(antlrcpp::downCast<MultipartIdentifierContext *>(_localctx)->errorCapturingIdentifierContext);
      setState(320);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedExpressionContext ------------------------------------------------------------------

SQLParserParser::NamedExpressionContext::NamedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::ExpressionContext* SQLParserParser::NamedExpressionContext::expression() {
  return getRuleContext<SQLParserParser::ExpressionContext>(0);
}

SQLParserParser::IdentifierListContext* SQLParserParser::NamedExpressionContext::identifierList() {
  return getRuleContext<SQLParserParser::IdentifierListContext>(0);
}

tree::TerminalNode* SQLParserParser::NamedExpressionContext::AS() {
  return getToken(SQLParserParser::AS, 0);
}

SQLParserParser::ErrorCapturingIdentifierContext* SQLParserParser::NamedExpressionContext::errorCapturingIdentifier() {
  return getRuleContext<SQLParserParser::ErrorCapturingIdentifierContext>(0);
}


size_t SQLParserParser::NamedExpressionContext::getRuleIndex() const {
  return SQLParserParser::RuleNamedExpression;
}


std::any SQLParserParser::NamedExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitNamedExpression(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::NamedExpressionContext* SQLParserParser::namedExpression() {
  NamedExpressionContext *_localctx = _tracker.createInstance<NamedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 50, SQLParserParser::RuleNamedExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(321);
    expression();
    setState(329);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      setState(323);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
      case 1: {
        setState(322);
        match(SQLParserParser::AS);
        break;
      }

      default:
        break;
      }
      setState(327);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case SQLParserParser::ADD:
        case SQLParserParser::AFTER:
        case SQLParserParser::ALL:
        case SQLParserParser::ALTER:
        case SQLParserParser::ANALYZE:
        case SQLParserParser::AND:
        case SQLParserParser::ANTI:
        case SQLParserParser::ANY:
        case SQLParserParser::ARCHIVE:
        case SQLParserParser::ARRAY:
        case SQLParserParser::AS:
        case SQLParserParser::ASC:
        case SQLParserParser::AT:
        case SQLParserParser::AUTHORIZATION:
        case SQLParserParser::BETWEEN:
        case SQLParserParser::BOTH:
        case SQLParserParser::BUCKET:
        case SQLParserParser::BUCKETS:
        case SQLParserParser::BY:
        case SQLParserParser::CACHE:
        case SQLParserParser::CASCADE:
        case SQLParserParser::CASE:
        case SQLParserParser::CAST:
        case SQLParserParser::CHANGE:
        case SQLParserParser::CHECK:
        case SQLParserParser::CLEAR:
        case SQLParserParser::CLUSTER:
        case SQLParserParser::CLUSTERED:
        case SQLParserParser::CODEGEN:
        case SQLParserParser::COLLATE:
        case SQLParserParser::COLLECTION:
        case SQLParserParser::COLUMN:
        case SQLParserParser::COLUMNS:
        case SQLParserParser::COMMENT:
        case SQLParserParser::COMMIT:
        case SQLParserParser::COMPACT:
        case SQLParserParser::COMPACTIONS:
        case SQLParserParser::COMPUTE:
        case SQLParserParser::CONCATENATE:
        case SQLParserParser::CONSTRAINT:
        case SQLParserParser::COST:
        case SQLParserParser::CREATE:
        case SQLParserParser::CROSS:
        case SQLParserParser::CUBE:
        case SQLParserParser::CURRENT:
        case SQLParserParser::CURRENT_DATE:
        case SQLParserParser::CURRENT_TIME:
        case SQLParserParser::CURRENT_TIMESTAMP:
        case SQLParserParser::CURRENT_USER:
        case SQLParserParser::DATA:
        case SQLParserParser::DATABASE:
        case SQLParserParser::DATABASES:
        case SQLParserParser::DBPROPERTIES:
        case SQLParserParser::DEFINED:
        case SQLParserParser::DELETE:
        case SQLParserParser::DELIMITED:
        case SQLParserParser::DESC:
        case SQLParserParser::DESCRIBE:
        case SQLParserParser::DFS:
        case SQLParserParser::DIRECTORIES:
        case SQLParserParser::DIRECTORY:
        case SQLParserParser::DISTINCT:
        case SQLParserParser::DISTRIBUTE:
        case SQLParserParser::DIV:
        case SQLParserParser::DROP:
        case SQLParserParser::ELSE:
        case SQLParserParser::END:
        case SQLParserParser::ESCAPE:
        case SQLParserParser::ESCAPED:
        case SQLParserParser::EXCEPT:
        case SQLParserParser::EXCHANGE:
        case SQLParserParser::EXISTS:
        case SQLParserParser::EXPLAIN:
        case SQLParserParser::EXPORT:
        case SQLParserParser::EXTENDED:
        case SQLParserParser::EXTERNAL:
        case SQLParserParser::EXTRACT:
        case SQLParserParser::FALSE:
        case SQLParserParser::FETCH:
        case SQLParserParser::FIELDS:
        case SQLParserParser::FILTER:
        case SQLParserParser::FILEFORMAT:
        case SQLParserParser::FIRST:
        case SQLParserParser::FOLLOWING:
        case SQLParserParser::FOR:
        case SQLParserParser::FOREIGN:
        case SQLParserParser::FORMAT:
        case SQLParserParser::FORMATTED:
        case SQLParserParser::FROM:
        case SQLParserParser::FULL:
        case SQLParserParser::FUNCTION:
        case SQLParserParser::FUNCTIONS:
        case SQLParserParser::GLOBAL:
        case SQLParserParser::GRANT:
        case SQLParserParser::GROUP:
        case SQLParserParser::GROUPING:
        case SQLParserParser::HAVING:
        case SQLParserParser::IF:
        case SQLParserParser::IGNORE:
        case SQLParserParser::IMPORT:
        case SQLParserParser::IN:
        case SQLParserParser::INDEX:
        case SQLParserParser::INDEXES:
        case SQLParserParser::INNER:
        case SQLParserParser::INPATH:
        case SQLParserParser::INPUTFORMAT:
        case SQLParserParser::INSERT:
        case SQLParserParser::INTERSECT:
        case SQLParserParser::INTERVAL:
        case SQLParserParser::INTO:
        case SQLParserParser::IS:
        case SQLParserParser::ITEMS:
        case SQLParserParser::JOIN:
        case SQLParserParser::KEYS:
        case SQLParserParser::LAST:
        case SQLParserParser::LATERAL:
        case SQLParserParser::LAZY:
        case SQLParserParser::LEADING:
        case SQLParserParser::LEFT:
        case SQLParserParser::LIKE:
        case SQLParserParser::LIMIT:
        case SQLParserParser::LINES:
        case SQLParserParser::LIST:
        case SQLParserParser::LOAD:
        case SQLParserParser::LOCAL:
        case SQLParserParser::LOCATION:
        case SQLParserParser::LOCK:
        case SQLParserParser::LOCKS:
        case SQLParserParser::LOGICAL:
        case SQLParserParser::MACRO:
        case SQLParserParser::MAP:
        case SQLParserParser::MATCHED:
        case SQLParserParser::MERGE:
        case SQLParserParser::MSCK:
        case SQLParserParser::NAMESPACE:
        case SQLParserParser::NAMESPACES:
        case SQLParserParser::NATURAL:
        case SQLParserParser::NO:
        case SQLParserParser::NOT:
        case SQLParserParser::NULL_:
        case SQLParserParser::NULLS:
        case SQLParserParser::OF:
        case SQLParserParser::ON:
        case SQLParserParser::ONLY:
        case SQLParserParser::OPTION:
        case SQLParserParser::OPTIONS:
        case SQLParserParser::OR:
        case SQLParserParser::ORDER:
        case SQLParserParser::OUT:
        case SQLParserParser::OUTER:
        case SQLParserParser::OUTPUTFORMAT:
        case SQLParserParser::OVER:
        case SQLParserParser::OVERLAPS:
        case SQLParserParser::OVERLAY:
        case SQLParserParser::OVERWRITE:
        case SQLParserParser::PARTITION:
        case SQLParserParser::PARTITIONED:
        case SQLParserParser::PARTITIONS:
        case SQLParserParser::PERCENTLIT:
        case SQLParserParser::PIVOT:
        case SQLParserParser::PLACING:
        case SQLParserParser::POSITION:
        case SQLParserParser::PRECEDING:
        case SQLParserParser::PRIMARY:
        case SQLParserParser::PRINCIPALS:
        case SQLParserParser::PROPERTIES:
        case SQLParserParser::PURGE:
        case SQLParserParser::QUERY:
        case SQLParserParser::RANGE:
        case SQLParserParser::RECORDREADER:
        case SQLParserParser::RECORDWRITER:
        case SQLParserParser::RECOVER:
        case SQLParserParser::REDUCE:
        case SQLParserParser::REFERENCES:
        case SQLParserParser::REFRESH:
        case SQLParserParser::RENAME:
        case SQLParserParser::REPAIR:
        case SQLParserParser::REPLACE:
        case SQLParserParser::RESET:
        case SQLParserParser::RESTRICT:
        case SQLParserParser::REVOKE:
        case SQLParserParser::RIGHT:
        case SQLParserParser::RLIKE:
        case SQLParserParser::ROLE:
        case SQLParserParser::ROLES:
        case SQLParserParser::ROLLBACK:
        case SQLParserParser::ROLLUP:
        case SQLParserParser::ROW:
        case SQLParserParser::ROWS:
        case SQLParserParser::SCHEMA:
        case SQLParserParser::SELECT:
        case SQLParserParser::SEMI:
        case SQLParserParser::SEPARATED:
        case SQLParserParser::SERDE:
        case SQLParserParser::SERDEPROPERTIES:
        case SQLParserParser::SESSION_USER:
        case SQLParserParser::SET:
        case SQLParserParser::SETMINUS:
        case SQLParserParser::SETS:
        case SQLParserParser::SHOW:
        case SQLParserParser::SKEWED:
        case SQLParserParser::SOME:
        case SQLParserParser::SORT:
        case SQLParserParser::SORTED:
        case SQLParserParser::START:
        case SQLParserParser::STATISTICS:
        case SQLParserParser::STORED:
        case SQLParserParser::STRATIFY:
        case SQLParserParser::STRUCT:
        case SQLParserParser::SUBSTR:
        case SQLParserParser::SUBSTRING:
        case SQLParserParser::TABLE:
        case SQLParserParser::TABLES:
        case SQLParserParser::TABLESAMPLE:
        case SQLParserParser::TBLPROPERTIES:
        case SQLParserParser::TEMPORARY:
        case SQLParserParser::TERMINATED:
        case SQLParserParser::THEN:
        case SQLParserParser::TO:
        case SQLParserParser::TOUCH:
        case SQLParserParser::TRAILING:
        case SQLParserParser::TRANSACTION:
        case SQLParserParser::TRANSACTIONS:
        case SQLParserParser::TRANSFORM:
        case SQLParserParser::TRIM:
        case SQLParserParser::TRUE:
        case SQLParserParser::TRUNCATE:
        case SQLParserParser::TYPE:
        case SQLParserParser::UNARCHIVE:
        case SQLParserParser::UNBOUNDED:
        case SQLParserParser::UNCACHE:
        case SQLParserParser::UNION:
        case SQLParserParser::UNIQUE:
        case SQLParserParser::UNKNOWN:
        case SQLParserParser::UNLOCK:
        case SQLParserParser::UNSET:
        case SQLParserParser::UPDATE:
        case SQLParserParser::USE:
        case SQLParserParser::USER:
        case SQLParserParser::USING:
        case SQLParserParser::VALUES:
        case SQLParserParser::VIEW:
        case SQLParserParser::VIEWS:
        case SQLParserParser::WHEN:
        case SQLParserParser::WHERE:
        case SQLParserParser::WINDOW:
        case SQLParserParser::WITH:
        case SQLParserParser::IDENTIFIER:
        case SQLParserParser::BACKQUOTED_IDENTIFIER: {
          setState(325);
          antlrcpp::downCast<NamedExpressionContext *>(_localctx)->name = errorCapturingIdentifier();
          break;
        }

        case SQLParserParser::T__2: {
          setState(326);
          identifierList();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedExpressionSeqContext ------------------------------------------------------------------

SQLParserParser::NamedExpressionSeqContext::NamedExpressionSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SQLParserParser::NamedExpressionContext *> SQLParserParser::NamedExpressionSeqContext::namedExpression() {
  return getRuleContexts<SQLParserParser::NamedExpressionContext>();
}

SQLParserParser::NamedExpressionContext* SQLParserParser::NamedExpressionSeqContext::namedExpression(size_t i) {
  return getRuleContext<SQLParserParser::NamedExpressionContext>(i);
}


size_t SQLParserParser::NamedExpressionSeqContext::getRuleIndex() const {
  return SQLParserParser::RuleNamedExpressionSeq;
}


std::any SQLParserParser::NamedExpressionSeqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitNamedExpressionSeq(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::NamedExpressionSeqContext* SQLParserParser::namedExpressionSeq() {
  NamedExpressionSeqContext *_localctx = _tracker.createInstance<NamedExpressionSeqContext>(_ctx, getState());
  enterRule(_localctx, 52, SQLParserParser::RuleNamedExpressionSeq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(331);
    namedExpression();
    setState(336);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SQLParserParser::T__1) {
      setState(332);
      match(SQLParserParser::T__1);
      setState(333);
      namedExpression();
      setState(338);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

SQLParserParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::BooleanExpressionContext* SQLParserParser::ExpressionContext::booleanExpression() {
  return getRuleContext<SQLParserParser::BooleanExpressionContext>(0);
}


size_t SQLParserParser::ExpressionContext::getRuleIndex() const {
  return SQLParserParser::RuleExpression;
}


std::any SQLParserParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::ExpressionContext* SQLParserParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 54, SQLParserParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(339);
    booleanExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanExpressionContext ------------------------------------------------------------------

SQLParserParser::BooleanExpressionContext::BooleanExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SQLParserParser::BooleanExpressionContext::getRuleIndex() const {
  return SQLParserParser::RuleBooleanExpression;
}

void SQLParserParser::BooleanExpressionContext::copyFrom(BooleanExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LogicalNotContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::LogicalNotContext::NOT() {
  return getToken(SQLParserParser::NOT, 0);
}

SQLParserParser::BooleanExpressionContext* SQLParserParser::LogicalNotContext::booleanExpression() {
  return getRuleContext<SQLParserParser::BooleanExpressionContext>(0);
}

SQLParserParser::LogicalNotContext::LogicalNotContext(BooleanExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::LogicalNotContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitLogicalNot(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PredicatedContext ------------------------------------------------------------------

SQLParserParser::ValueExpressionContext* SQLParserParser::PredicatedContext::valueExpression() {
  return getRuleContext<SQLParserParser::ValueExpressionContext>(0);
}

SQLParserParser::PredicateContext* SQLParserParser::PredicatedContext::predicate() {
  return getRuleContext<SQLParserParser::PredicateContext>(0);
}

SQLParserParser::PredicatedContext::PredicatedContext(BooleanExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::PredicatedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitPredicated(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LogicalBinaryContext ------------------------------------------------------------------

std::vector<SQLParserParser::BooleanExpressionContext *> SQLParserParser::LogicalBinaryContext::booleanExpression() {
  return getRuleContexts<SQLParserParser::BooleanExpressionContext>();
}

SQLParserParser::BooleanExpressionContext* SQLParserParser::LogicalBinaryContext::booleanExpression(size_t i) {
  return getRuleContext<SQLParserParser::BooleanExpressionContext>(i);
}

tree::TerminalNode* SQLParserParser::LogicalBinaryContext::AND() {
  return getToken(SQLParserParser::AND, 0);
}

tree::TerminalNode* SQLParserParser::LogicalBinaryContext::OR() {
  return getToken(SQLParserParser::OR, 0);
}

SQLParserParser::LogicalBinaryContext::LogicalBinaryContext(BooleanExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::LogicalBinaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitLogicalBinary(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::BooleanExpressionContext* SQLParserParser::booleanExpression() {
   return booleanExpression(0);
}

SQLParserParser::BooleanExpressionContext* SQLParserParser::booleanExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  SQLParserParser::BooleanExpressionContext *_localctx = _tracker.createInstance<BooleanExpressionContext>(_ctx, parentState);
  SQLParserParser::BooleanExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 56;
  enterRecursionRule(_localctx, 56, SQLParserParser::RuleBooleanExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(348);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<LogicalNotContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(342);
      match(SQLParserParser::NOT);
      setState(343);
      booleanExpression(4);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PredicatedContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(344);
      valueExpression(0);
      setState(346);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
      case 1: {
        setState(345);
        predicate();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(358);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(356);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<LogicalBinaryContext>(_tracker.createInstance<BooleanExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleBooleanExpression);
          setState(350);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(351);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->operator_ = match(SQLParserParser::AND);
          setState(352);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->right = booleanExpression(3);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<LogicalBinaryContext>(_tracker.createInstance<BooleanExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleBooleanExpression);
          setState(353);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(354);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->operator_ = match(SQLParserParser::OR);
          setState(355);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->right = booleanExpression(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(360);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PredicateContext ------------------------------------------------------------------

SQLParserParser::PredicateContext::PredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::PredicateContext::AND() {
  return getToken(SQLParserParser::AND, 0);
}

tree::TerminalNode* SQLParserParser::PredicateContext::BETWEEN() {
  return getToken(SQLParserParser::BETWEEN, 0);
}

std::vector<SQLParserParser::ValueExpressionContext *> SQLParserParser::PredicateContext::valueExpression() {
  return getRuleContexts<SQLParserParser::ValueExpressionContext>();
}

SQLParserParser::ValueExpressionContext* SQLParserParser::PredicateContext::valueExpression(size_t i) {
  return getRuleContext<SQLParserParser::ValueExpressionContext>(i);
}

tree::TerminalNode* SQLParserParser::PredicateContext::NOT() {
  return getToken(SQLParserParser::NOT, 0);
}

std::vector<SQLParserParser::ExpressionContext *> SQLParserParser::PredicateContext::expression() {
  return getRuleContexts<SQLParserParser::ExpressionContext>();
}

SQLParserParser::ExpressionContext* SQLParserParser::PredicateContext::expression(size_t i) {
  return getRuleContext<SQLParserParser::ExpressionContext>(i);
}

tree::TerminalNode* SQLParserParser::PredicateContext::IN() {
  return getToken(SQLParserParser::IN, 0);
}

SQLParserParser::QueryContext* SQLParserParser::PredicateContext::query() {
  return getRuleContext<SQLParserParser::QueryContext>(0);
}

tree::TerminalNode* SQLParserParser::PredicateContext::RLIKE() {
  return getToken(SQLParserParser::RLIKE, 0);
}

tree::TerminalNode* SQLParserParser::PredicateContext::LIKE() {
  return getToken(SQLParserParser::LIKE, 0);
}

tree::TerminalNode* SQLParserParser::PredicateContext::ESCAPE() {
  return getToken(SQLParserParser::ESCAPE, 0);
}

tree::TerminalNode* SQLParserParser::PredicateContext::STRING() {
  return getToken(SQLParserParser::STRING, 0);
}

tree::TerminalNode* SQLParserParser::PredicateContext::IS() {
  return getToken(SQLParserParser::IS, 0);
}

tree::TerminalNode* SQLParserParser::PredicateContext::NULL_() {
  return getToken(SQLParserParser::NULL_, 0);
}

tree::TerminalNode* SQLParserParser::PredicateContext::TRUE() {
  return getToken(SQLParserParser::TRUE, 0);
}

tree::TerminalNode* SQLParserParser::PredicateContext::FALSE() {
  return getToken(SQLParserParser::FALSE, 0);
}

tree::TerminalNode* SQLParserParser::PredicateContext::UNKNOWN() {
  return getToken(SQLParserParser::UNKNOWN, 0);
}

tree::TerminalNode* SQLParserParser::PredicateContext::FROM() {
  return getToken(SQLParserParser::FROM, 0);
}

tree::TerminalNode* SQLParserParser::PredicateContext::DISTINCT() {
  return getToken(SQLParserParser::DISTINCT, 0);
}


size_t SQLParserParser::PredicateContext::getRuleIndex() const {
  return SQLParserParser::RulePredicate;
}


std::any SQLParserParser::PredicateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitPredicate(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::PredicateContext* SQLParserParser::predicate() {
  PredicateContext *_localctx = _tracker.createInstance<PredicateContext>(_ctx, getState());
  enterRule(_localctx, 58, SQLParserParser::RulePredicate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(423);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(362);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::NOT) {
        setState(361);
        match(SQLParserParser::NOT);
      }
      setState(364);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = match(SQLParserParser::BETWEEN);
      setState(365);
      antlrcpp::downCast<PredicateContext *>(_localctx)->lower = valueExpression(0);
      setState(366);
      match(SQLParserParser::AND);
      setState(367);
      antlrcpp::downCast<PredicateContext *>(_localctx)->upper = valueExpression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(370);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::NOT) {
        setState(369);
        match(SQLParserParser::NOT);
      }
      setState(372);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = match(SQLParserParser::IN);
      setState(373);
      match(SQLParserParser::T__2);
      setState(374);
      expression();
      setState(379);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == SQLParserParser::T__1) {
        setState(375);
        match(SQLParserParser::T__1);
        setState(376);
        expression();
        setState(381);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(382);
      match(SQLParserParser::T__3);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(385);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::NOT) {
        setState(384);
        match(SQLParserParser::NOT);
      }
      setState(387);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = match(SQLParserParser::IN);
      setState(388);
      match(SQLParserParser::T__2);
      setState(389);
      query();
      setState(390);
      match(SQLParserParser::T__3);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(393);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::NOT) {
        setState(392);
        match(SQLParserParser::NOT);
      }
      setState(395);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = match(SQLParserParser::RLIKE);
      setState(396);
      antlrcpp::downCast<PredicateContext *>(_localctx)->pattern = valueExpression(0);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(398);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::NOT) {
        setState(397);
        match(SQLParserParser::NOT);
      }
      setState(400);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = match(SQLParserParser::LIKE);
      setState(401);
      antlrcpp::downCast<PredicateContext *>(_localctx)->pattern = valueExpression(0);
      setState(404);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
      case 1: {
        setState(402);
        match(SQLParserParser::ESCAPE);
        setState(403);
        antlrcpp::downCast<PredicateContext *>(_localctx)->escapeChar = match(SQLParserParser::STRING);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(406);
      match(SQLParserParser::IS);
      setState(408);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::NOT) {
        setState(407);
        match(SQLParserParser::NOT);
      }
      setState(410);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = match(SQLParserParser::NULL_);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(411);
      match(SQLParserParser::IS);
      setState(413);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::NOT) {
        setState(412);
        match(SQLParserParser::NOT);
      }
      setState(415);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == SQLParserParser::FALSE || _la == SQLParserParser::TRUE

      || _la == SQLParserParser::UNKNOWN)) {
        antlrcpp::downCast<PredicateContext *>(_localctx)->kind = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(416);
      match(SQLParserParser::IS);
      setState(418);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::NOT) {
        setState(417);
        match(SQLParserParser::NOT);
      }
      setState(420);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = match(SQLParserParser::DISTINCT);
      setState(421);
      match(SQLParserParser::FROM);
      setState(422);
      antlrcpp::downCast<PredicateContext *>(_localctx)->right = valueExpression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueExpressionContext ------------------------------------------------------------------

SQLParserParser::ValueExpressionContext::ValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SQLParserParser::ValueExpressionContext::getRuleIndex() const {
  return SQLParserParser::RuleValueExpression;
}

void SQLParserParser::ValueExpressionContext::copyFrom(ValueExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ValueExpressionDefaultContext ------------------------------------------------------------------

SQLParserParser::PrimaryExpressionContext* SQLParserParser::ValueExpressionDefaultContext::primaryExpression() {
  return getRuleContext<SQLParserParser::PrimaryExpressionContext>(0);
}

SQLParserParser::ValueExpressionDefaultContext::ValueExpressionDefaultContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::ValueExpressionDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitValueExpressionDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ComparisonContext ------------------------------------------------------------------

SQLParserParser::ComparisonOperatorContext* SQLParserParser::ComparisonContext::comparisonOperator() {
  return getRuleContext<SQLParserParser::ComparisonOperatorContext>(0);
}

std::vector<SQLParserParser::ValueExpressionContext *> SQLParserParser::ComparisonContext::valueExpression() {
  return getRuleContexts<SQLParserParser::ValueExpressionContext>();
}

SQLParserParser::ValueExpressionContext* SQLParserParser::ComparisonContext::valueExpression(size_t i) {
  return getRuleContext<SQLParserParser::ValueExpressionContext>(i);
}

SQLParserParser::ComparisonContext::ComparisonContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::ComparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitComparison(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArithmeticBinaryContext ------------------------------------------------------------------

std::vector<SQLParserParser::ValueExpressionContext *> SQLParserParser::ArithmeticBinaryContext::valueExpression() {
  return getRuleContexts<SQLParserParser::ValueExpressionContext>();
}

SQLParserParser::ValueExpressionContext* SQLParserParser::ArithmeticBinaryContext::valueExpression(size_t i) {
  return getRuleContext<SQLParserParser::ValueExpressionContext>(i);
}

tree::TerminalNode* SQLParserParser::ArithmeticBinaryContext::ASTERISK() {
  return getToken(SQLParserParser::ASTERISK, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticBinaryContext::SLASH() {
  return getToken(SQLParserParser::SLASH, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticBinaryContext::PERCENT() {
  return getToken(SQLParserParser::PERCENT, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticBinaryContext::DIV() {
  return getToken(SQLParserParser::DIV, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticBinaryContext::PLUS() {
  return getToken(SQLParserParser::PLUS, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticBinaryContext::MINUS() {
  return getToken(SQLParserParser::MINUS, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticBinaryContext::CONCAT_PIPE() {
  return getToken(SQLParserParser::CONCAT_PIPE, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticBinaryContext::AMPERSAND() {
  return getToken(SQLParserParser::AMPERSAND, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticBinaryContext::HAT() {
  return getToken(SQLParserParser::HAT, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticBinaryContext::PIPE() {
  return getToken(SQLParserParser::PIPE, 0);
}

SQLParserParser::ArithmeticBinaryContext::ArithmeticBinaryContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::ArithmeticBinaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitArithmeticBinary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArithmeticUnaryContext ------------------------------------------------------------------

SQLParserParser::ValueExpressionContext* SQLParserParser::ArithmeticUnaryContext::valueExpression() {
  return getRuleContext<SQLParserParser::ValueExpressionContext>(0);
}

tree::TerminalNode* SQLParserParser::ArithmeticUnaryContext::MINUS() {
  return getToken(SQLParserParser::MINUS, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticUnaryContext::PLUS() {
  return getToken(SQLParserParser::PLUS, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticUnaryContext::TILDE() {
  return getToken(SQLParserParser::TILDE, 0);
}

SQLParserParser::ArithmeticUnaryContext::ArithmeticUnaryContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::ArithmeticUnaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitArithmeticUnary(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::ValueExpressionContext* SQLParserParser::valueExpression() {
   return valueExpression(0);
}

SQLParserParser::ValueExpressionContext* SQLParserParser::valueExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  SQLParserParser::ValueExpressionContext *_localctx = _tracker.createInstance<ValueExpressionContext>(_ctx, parentState);
  SQLParserParser::ValueExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 60;
  enterRecursionRule(_localctx, 60, SQLParserParser::RuleValueExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(429);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<ValueExpressionDefaultContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(426);
      primaryExpression(0);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<ArithmeticUnaryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(427);
      antlrcpp::downCast<ArithmeticUnaryContext *>(_localctx)->operator_ = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 264) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 264)) & 35) != 0))) {
        antlrcpp::downCast<ArithmeticUnaryContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(428);
      valueExpression(7);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(452);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(450);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ArithmeticBinaryContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(431);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(432);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->operator_ = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == SQLParserParser::DIV || ((((_la - 266) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 266)) & 7) != 0))) {
            antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(433);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->right = valueExpression(7);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<ArithmeticBinaryContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(434);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(435);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->operator_ = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 264) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 264)) & 259) != 0))) {
            antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(436);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->right = valueExpression(6);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<ArithmeticBinaryContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(437);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(438);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->operator_ = match(SQLParserParser::AMPERSAND);
          setState(439);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->right = valueExpression(5);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<ArithmeticBinaryContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(440);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(441);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->operator_ = match(SQLParserParser::HAT);
          setState(442);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->right = valueExpression(4);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<ArithmeticBinaryContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(443);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(444);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->operator_ = match(SQLParserParser::PIPE);
          setState(445);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->right = valueExpression(3);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<ComparisonContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(446);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(447);
          comparisonOperator();
          setState(448);
          antlrcpp::downCast<ComparisonContext *>(_localctx)->right = valueExpression(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(454);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PrimaryExpressionContext ------------------------------------------------------------------

SQLParserParser::PrimaryExpressionContext::PrimaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SQLParserParser::PrimaryExpressionContext::getRuleIndex() const {
  return SQLParserParser::RulePrimaryExpression;
}

void SQLParserParser::PrimaryExpressionContext::copyFrom(PrimaryExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- StructContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::StructContext::STRUCT() {
  return getToken(SQLParserParser::STRUCT, 0);
}

std::vector<SQLParserParser::NamedExpressionContext *> SQLParserParser::StructContext::namedExpression() {
  return getRuleContexts<SQLParserParser::NamedExpressionContext>();
}

SQLParserParser::NamedExpressionContext* SQLParserParser::StructContext::namedExpression(size_t i) {
  return getRuleContext<SQLParserParser::NamedExpressionContext>(i);
}

SQLParserParser::StructContext::StructContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::StructContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitStruct(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DereferenceContext ------------------------------------------------------------------

SQLParserParser::PrimaryExpressionContext* SQLParserParser::DereferenceContext::primaryExpression() {
  return getRuleContext<SQLParserParser::PrimaryExpressionContext>(0);
}

SQLParserParser::IdentifierContext* SQLParserParser::DereferenceContext::identifier() {
  return getRuleContext<SQLParserParser::IdentifierContext>(0);
}

SQLParserParser::DereferenceContext::DereferenceContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::DereferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitDereference(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleCaseContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::SimpleCaseContext::CASE() {
  return getToken(SQLParserParser::CASE, 0);
}

tree::TerminalNode* SQLParserParser::SimpleCaseContext::END() {
  return getToken(SQLParserParser::END, 0);
}

std::vector<SQLParserParser::ExpressionContext *> SQLParserParser::SimpleCaseContext::expression() {
  return getRuleContexts<SQLParserParser::ExpressionContext>();
}

SQLParserParser::ExpressionContext* SQLParserParser::SimpleCaseContext::expression(size_t i) {
  return getRuleContext<SQLParserParser::ExpressionContext>(i);
}

std::vector<SQLParserParser::WhenClauseContext *> SQLParserParser::SimpleCaseContext::whenClause() {
  return getRuleContexts<SQLParserParser::WhenClauseContext>();
}

SQLParserParser::WhenClauseContext* SQLParserParser::SimpleCaseContext::whenClause(size_t i) {
  return getRuleContext<SQLParserParser::WhenClauseContext>(i);
}

tree::TerminalNode* SQLParserParser::SimpleCaseContext::ELSE() {
  return getToken(SQLParserParser::ELSE, 0);
}

SQLParserParser::SimpleCaseContext::SimpleCaseContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::SimpleCaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleCase(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnReferenceContext ------------------------------------------------------------------

SQLParserParser::IdentifierContext* SQLParserParser::ColumnReferenceContext::identifier() {
  return getRuleContext<SQLParserParser::IdentifierContext>(0);
}

SQLParserParser::ColumnReferenceContext::ColumnReferenceContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::ColumnReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnReference(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RowConstructorContext ------------------------------------------------------------------

std::vector<SQLParserParser::NamedExpressionContext *> SQLParserParser::RowConstructorContext::namedExpression() {
  return getRuleContexts<SQLParserParser::NamedExpressionContext>();
}

SQLParserParser::NamedExpressionContext* SQLParserParser::RowConstructorContext::namedExpression(size_t i) {
  return getRuleContext<SQLParserParser::NamedExpressionContext>(i);
}

SQLParserParser::RowConstructorContext::RowConstructorContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::RowConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitRowConstructor(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LastContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::LastContext::LAST() {
  return getToken(SQLParserParser::LAST, 0);
}

SQLParserParser::ExpressionContext* SQLParserParser::LastContext::expression() {
  return getRuleContext<SQLParserParser::ExpressionContext>(0);
}

tree::TerminalNode* SQLParserParser::LastContext::IGNORE() {
  return getToken(SQLParserParser::IGNORE, 0);
}

tree::TerminalNode* SQLParserParser::LastContext::NULLS() {
  return getToken(SQLParserParser::NULLS, 0);
}

SQLParserParser::LastContext::LastContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::LastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitLast(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StarContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::StarContext::ASTERISK() {
  return getToken(SQLParserParser::ASTERISK, 0);
}

SQLParserParser::QualifiedNameContext* SQLParserParser::StarContext::qualifiedName() {
  return getRuleContext<SQLParserParser::QualifiedNameContext>(0);
}

SQLParserParser::StarContext::StarContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::StarContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitStar(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubscriptContext ------------------------------------------------------------------

SQLParserParser::PrimaryExpressionContext* SQLParserParser::SubscriptContext::primaryExpression() {
  return getRuleContext<SQLParserParser::PrimaryExpressionContext>(0);
}

SQLParserParser::ValueExpressionContext* SQLParserParser::SubscriptContext::valueExpression() {
  return getRuleContext<SQLParserParser::ValueExpressionContext>(0);
}

SQLParserParser::SubscriptContext::SubscriptContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::SubscriptContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitSubscript(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubqueryExpressionContext ------------------------------------------------------------------

SQLParserParser::QueryContext* SQLParserParser::SubqueryExpressionContext::query() {
  return getRuleContext<SQLParserParser::QueryContext>(0);
}

SQLParserParser::SubqueryExpressionContext::SubqueryExpressionContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::SubqueryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitSubqueryExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CurrentDatetimeContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::CurrentDatetimeContext::CURRENT_DATE() {
  return getToken(SQLParserParser::CURRENT_DATE, 0);
}

tree::TerminalNode* SQLParserParser::CurrentDatetimeContext::CURRENT_TIMESTAMP() {
  return getToken(SQLParserParser::CURRENT_TIMESTAMP, 0);
}

SQLParserParser::CurrentDatetimeContext::CurrentDatetimeContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::CurrentDatetimeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitCurrentDatetime(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CastContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::CastContext::CAST() {
  return getToken(SQLParserParser::CAST, 0);
}

SQLParserParser::ExpressionContext* SQLParserParser::CastContext::expression() {
  return getRuleContext<SQLParserParser::ExpressionContext>(0);
}

tree::TerminalNode* SQLParserParser::CastContext::AS() {
  return getToken(SQLParserParser::AS, 0);
}

SQLParserParser::DataTypeContext* SQLParserParser::CastContext::dataType() {
  return getRuleContext<SQLParserParser::DataTypeContext>(0);
}

SQLParserParser::CastContext::CastContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::CastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitCast(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ConstantDefaultContext ------------------------------------------------------------------

SQLParserParser::ConstantContext* SQLParserParser::ConstantDefaultContext::constant() {
  return getRuleContext<SQLParserParser::ConstantContext>(0);
}

SQLParserParser::ConstantDefaultContext::ConstantDefaultContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::ConstantDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitConstantDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ParenthesizedExpressionContext ------------------------------------------------------------------

SQLParserParser::ExpressionContext* SQLParserParser::ParenthesizedExpressionContext::expression() {
  return getRuleContext<SQLParserParser::ExpressionContext>(0);
}

SQLParserParser::ParenthesizedExpressionContext::ParenthesizedExpressionContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::ParenthesizedExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitParenthesizedExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FunctionCallContext ------------------------------------------------------------------

SQLParserParser::FunctionNameContext* SQLParserParser::FunctionCallContext::functionName() {
  return getRuleContext<SQLParserParser::FunctionNameContext>(0);
}

std::vector<SQLParserParser::ExpressionContext *> SQLParserParser::FunctionCallContext::expression() {
  return getRuleContexts<SQLParserParser::ExpressionContext>();
}

SQLParserParser::ExpressionContext* SQLParserParser::FunctionCallContext::expression(size_t i) {
  return getRuleContext<SQLParserParser::ExpressionContext>(i);
}

SQLParserParser::FunctionCallContext::FunctionCallContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::FunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SearchedCaseContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::SearchedCaseContext::CASE() {
  return getToken(SQLParserParser::CASE, 0);
}

tree::TerminalNode* SQLParserParser::SearchedCaseContext::END() {
  return getToken(SQLParserParser::END, 0);
}

std::vector<SQLParserParser::WhenClauseContext *> SQLParserParser::SearchedCaseContext::whenClause() {
  return getRuleContexts<SQLParserParser::WhenClauseContext>();
}

SQLParserParser::WhenClauseContext* SQLParserParser::SearchedCaseContext::whenClause(size_t i) {
  return getRuleContext<SQLParserParser::WhenClauseContext>(i);
}

tree::TerminalNode* SQLParserParser::SearchedCaseContext::ELSE() {
  return getToken(SQLParserParser::ELSE, 0);
}

SQLParserParser::ExpressionContext* SQLParserParser::SearchedCaseContext::expression() {
  return getRuleContext<SQLParserParser::ExpressionContext>(0);
}

SQLParserParser::SearchedCaseContext::SearchedCaseContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::SearchedCaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitSearchedCase(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PositionContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::PositionContext::POSITION() {
  return getToken(SQLParserParser::POSITION, 0);
}

tree::TerminalNode* SQLParserParser::PositionContext::IN() {
  return getToken(SQLParserParser::IN, 0);
}

std::vector<SQLParserParser::ValueExpressionContext *> SQLParserParser::PositionContext::valueExpression() {
  return getRuleContexts<SQLParserParser::ValueExpressionContext>();
}

SQLParserParser::ValueExpressionContext* SQLParserParser::PositionContext::valueExpression(size_t i) {
  return getRuleContext<SQLParserParser::ValueExpressionContext>(i);
}

SQLParserParser::PositionContext::PositionContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::PositionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitPosition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FirstContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::FirstContext::FIRST() {
  return getToken(SQLParserParser::FIRST, 0);
}

SQLParserParser::ExpressionContext* SQLParserParser::FirstContext::expression() {
  return getRuleContext<SQLParserParser::ExpressionContext>(0);
}

tree::TerminalNode* SQLParserParser::FirstContext::IGNORE() {
  return getToken(SQLParserParser::IGNORE, 0);
}

tree::TerminalNode* SQLParserParser::FirstContext::NULLS() {
  return getToken(SQLParserParser::NULLS, 0);
}

SQLParserParser::FirstContext::FirstContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::FirstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitFirst(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::PrimaryExpressionContext* SQLParserParser::primaryExpression() {
   return primaryExpression(0);
}

SQLParserParser::PrimaryExpressionContext* SQLParserParser::primaryExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  SQLParserParser::PrimaryExpressionContext *_localctx = _tracker.createInstance<PrimaryExpressionContext>(_ctx, parentState);
  SQLParserParser::PrimaryExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 62;
  enterRecursionRule(_localctx, 62, SQLParserParser::RulePrimaryExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(566);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<CurrentDatetimeContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(456);
      antlrcpp::downCast<CurrentDatetimeContext *>(_localctx)->name = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == SQLParserParser::CURRENT_DATE

      || _la == SQLParserParser::CURRENT_TIMESTAMP)) {
        antlrcpp::downCast<CurrentDatetimeContext *>(_localctx)->name = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<SearchedCaseContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(457);
      match(SQLParserParser::CASE);
      setState(459); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(458);
        whenClause();
        setState(461); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == SQLParserParser::WHEN);
      setState(465);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::ELSE) {
        setState(463);
        match(SQLParserParser::ELSE);
        setState(464);
        antlrcpp::downCast<SearchedCaseContext *>(_localctx)->elseExpression = expression();
      }
      setState(467);
      match(SQLParserParser::END);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<SimpleCaseContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(469);
      match(SQLParserParser::CASE);
      setState(470);
      antlrcpp::downCast<SimpleCaseContext *>(_localctx)->value = expression();
      setState(472); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(471);
        whenClause();
        setState(474); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == SQLParserParser::WHEN);
      setState(478);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::ELSE) {
        setState(476);
        match(SQLParserParser::ELSE);
        setState(477);
        antlrcpp::downCast<SimpleCaseContext *>(_localctx)->elseExpression = expression();
      }
      setState(480);
      match(SQLParserParser::END);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<CastContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(482);
      match(SQLParserParser::CAST);
      setState(483);
      match(SQLParserParser::T__2);
      setState(484);
      expression();
      setState(485);
      match(SQLParserParser::AS);
      setState(486);
      dataType();
      setState(487);
      match(SQLParserParser::T__3);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<StructContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(489);
      match(SQLParserParser::STRUCT);
      setState(490);
      match(SQLParserParser::T__2);
      setState(499);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -504) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & -1) != 0) || ((((_la - 264) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 264)) & 2096167) != 0)) {
        setState(491);
        antlrcpp::downCast<StructContext *>(_localctx)->namedExpressionContext = namedExpression();
        antlrcpp::downCast<StructContext *>(_localctx)->argument.push_back(antlrcpp::downCast<StructContext *>(_localctx)->namedExpressionContext);
        setState(496);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == SQLParserParser::T__1) {
          setState(492);
          match(SQLParserParser::T__1);
          setState(493);
          antlrcpp::downCast<StructContext *>(_localctx)->namedExpressionContext = namedExpression();
          antlrcpp::downCast<StructContext *>(_localctx)->argument.push_back(antlrcpp::downCast<StructContext *>(_localctx)->namedExpressionContext);
          setState(498);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(501);
      match(SQLParserParser::T__3);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<FirstContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(502);
      match(SQLParserParser::FIRST);
      setState(503);
      match(SQLParserParser::T__2);
      setState(504);
      expression();
      setState(507);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::IGNORE) {
        setState(505);
        match(SQLParserParser::IGNORE);
        setState(506);
        match(SQLParserParser::NULLS);
      }
      setState(509);
      match(SQLParserParser::T__3);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<LastContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(511);
      match(SQLParserParser::LAST);
      setState(512);
      match(SQLParserParser::T__2);
      setState(513);
      expression();
      setState(516);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::IGNORE) {
        setState(514);
        match(SQLParserParser::IGNORE);
        setState(515);
        match(SQLParserParser::NULLS);
      }
      setState(518);
      match(SQLParserParser::T__3);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<PositionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(520);
      match(SQLParserParser::POSITION);
      setState(521);
      match(SQLParserParser::T__2);
      setState(522);
      antlrcpp::downCast<PositionContext *>(_localctx)->substr = valueExpression(0);
      setState(523);
      match(SQLParserParser::IN);
      setState(524);
      antlrcpp::downCast<PositionContext *>(_localctx)->str = valueExpression(0);
      setState(525);
      match(SQLParserParser::T__3);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<ConstantDefaultContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(527);
      constant();
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<StarContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(528);
      match(SQLParserParser::ASTERISK);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<StarContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(529);
      qualifiedName();
      setState(530);
      match(SQLParserParser::T__4);
      setState(531);
      match(SQLParserParser::ASTERISK);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<RowConstructorContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(533);
      match(SQLParserParser::T__2);
      setState(534);
      namedExpression();
      setState(537); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(535);
        match(SQLParserParser::T__1);
        setState(536);
        namedExpression();
        setState(539); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == SQLParserParser::T__1);
      setState(541);
      match(SQLParserParser::T__3);
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<SubqueryExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(543);
      match(SQLParserParser::T__2);
      setState(544);
      query();
      setState(545);
      match(SQLParserParser::T__3);
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<FunctionCallContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(547);
      functionName();
      setState(548);
      match(SQLParserParser::T__2);
      setState(557);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -504) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & -1) != 0) || ((((_la - 264) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 264)) & 2096167) != 0)) {
        setState(549);
        antlrcpp::downCast<FunctionCallContext *>(_localctx)->expressionContext = expression();
        antlrcpp::downCast<FunctionCallContext *>(_localctx)->argument.push_back(antlrcpp::downCast<FunctionCallContext *>(_localctx)->expressionContext);
        setState(554);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == SQLParserParser::T__1) {
          setState(550);
          match(SQLParserParser::T__1);
          setState(551);
          antlrcpp::downCast<FunctionCallContext *>(_localctx)->expressionContext = expression();
          antlrcpp::downCast<FunctionCallContext *>(_localctx)->argument.push_back(antlrcpp::downCast<FunctionCallContext *>(_localctx)->expressionContext);
          setState(556);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(559);
      match(SQLParserParser::T__3);
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<ColumnReferenceContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(561);
      identifier();
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<ParenthesizedExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(562);
      match(SQLParserParser::T__2);
      setState(563);
      expression();
      setState(564);
      match(SQLParserParser::T__3);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(578);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(576);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<SubscriptContext>(_tracker.createInstance<PrimaryExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->value = previousContext;
          pushNewRecursionContext(newContext, startState, RulePrimaryExpression);
          setState(568);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(569);
          match(SQLParserParser::T__5);
          setState(570);
          antlrcpp::downCast<SubscriptContext *>(_localctx)->index = valueExpression(0);
          setState(571);
          match(SQLParserParser::T__6);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<DereferenceContext>(_tracker.createInstance<PrimaryExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->base = previousContext;
          pushNewRecursionContext(newContext, startState, RulePrimaryExpression);
          setState(573);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(574);
          match(SQLParserParser::T__4);
          setState(575);
          antlrcpp::downCast<DereferenceContext *>(_localctx)->fieldName = identifier();
          break;
        }

        default:
          break;
        } 
      }
      setState(580);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ConstantContext ------------------------------------------------------------------

SQLParserParser::ConstantContext::ConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SQLParserParser::ConstantContext::getRuleIndex() const {
  return SQLParserParser::RuleConstant;
}

void SQLParserParser::ConstantContext::copyFrom(ConstantContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- NullLiteralContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::NullLiteralContext::NULL_() {
  return getToken(SQLParserParser::NULL_, 0);
}

SQLParserParser::NullLiteralContext::NullLiteralContext(ConstantContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::NullLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitNullLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StringLiteralContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> SQLParserParser::StringLiteralContext::STRING() {
  return getTokens(SQLParserParser::STRING);
}

tree::TerminalNode* SQLParserParser::StringLiteralContext::STRING(size_t i) {
  return getToken(SQLParserParser::STRING, i);
}

SQLParserParser::StringLiteralContext::StringLiteralContext(ConstantContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::StringLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitStringLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeConstructorContext ------------------------------------------------------------------

SQLParserParser::IdentifierContext* SQLParserParser::TypeConstructorContext::identifier() {
  return getRuleContext<SQLParserParser::IdentifierContext>(0);
}

tree::TerminalNode* SQLParserParser::TypeConstructorContext::STRING() {
  return getToken(SQLParserParser::STRING, 0);
}

SQLParserParser::TypeConstructorContext::TypeConstructorContext(ConstantContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::TypeConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitTypeConstructor(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IntervalLiteralContext ------------------------------------------------------------------

SQLParserParser::IntervalContext* SQLParserParser::IntervalLiteralContext::interval() {
  return getRuleContext<SQLParserParser::IntervalContext>(0);
}

SQLParserParser::IntervalLiteralContext::IntervalLiteralContext(ConstantContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::IntervalLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitIntervalLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NumericLiteralContext ------------------------------------------------------------------

SQLParserParser::NumberContext* SQLParserParser::NumericLiteralContext::number() {
  return getRuleContext<SQLParserParser::NumberContext>(0);
}

SQLParserParser::NumericLiteralContext::NumericLiteralContext(ConstantContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::NumericLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitNumericLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BooleanLiteralContext ------------------------------------------------------------------

SQLParserParser::BooleanValueContext* SQLParserParser::BooleanLiteralContext::booleanValue() {
  return getRuleContext<SQLParserParser::BooleanValueContext>(0);
}

SQLParserParser::BooleanLiteralContext::BooleanLiteralContext(ConstantContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::BooleanLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitBooleanLiteral(this);
  else
    return visitor->visitChildren(this);
}
SQLParserParser::ConstantContext* SQLParserParser::constant() {
  ConstantContext *_localctx = _tracker.createInstance<ConstantContext>(_ctx, getState());
  enterRule(_localctx, 64, SQLParserParser::RuleConstant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(593);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<SQLParserParser::NullLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(581);
      match(SQLParserParser::NULL_);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<SQLParserParser::IntervalLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(582);
      interval();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<SQLParserParser::TypeConstructorContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(583);
      identifier();
      setState(584);
      match(SQLParserParser::STRING);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<SQLParserParser::NumericLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(586);
      number();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<SQLParserParser::BooleanLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(587);
      booleanValue();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<SQLParserParser::StringLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(589); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(588);
                match(SQLParserParser::STRING);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(591); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonOperatorContext ------------------------------------------------------------------

SQLParserParser::ComparisonOperatorContext::ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::ComparisonOperatorContext::EQ() {
  return getToken(SQLParserParser::EQ, 0);
}

tree::TerminalNode* SQLParserParser::ComparisonOperatorContext::NEQ() {
  return getToken(SQLParserParser::NEQ, 0);
}

tree::TerminalNode* SQLParserParser::ComparisonOperatorContext::NEQJ() {
  return getToken(SQLParserParser::NEQJ, 0);
}

tree::TerminalNode* SQLParserParser::ComparisonOperatorContext::LT() {
  return getToken(SQLParserParser::LT, 0);
}

tree::TerminalNode* SQLParserParser::ComparisonOperatorContext::LTE() {
  return getToken(SQLParserParser::LTE, 0);
}

tree::TerminalNode* SQLParserParser::ComparisonOperatorContext::GT() {
  return getToken(SQLParserParser::GT, 0);
}

tree::TerminalNode* SQLParserParser::ComparisonOperatorContext::GTE() {
  return getToken(SQLParserParser::GTE, 0);
}

tree::TerminalNode* SQLParserParser::ComparisonOperatorContext::NSEQ() {
  return getToken(SQLParserParser::NSEQ, 0);
}


size_t SQLParserParser::ComparisonOperatorContext::getRuleIndex() const {
  return SQLParserParser::RuleComparisonOperator;
}


std::any SQLParserParser::ComparisonOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitComparisonOperator(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::ComparisonOperatorContext* SQLParserParser::comparisonOperator() {
  ComparisonOperatorContext *_localctx = _tracker.createInstance<ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 66, SQLParserParser::RuleComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(595);
    _la = _input->LA(1);
    if (!(((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & 255) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArithmeticOperatorContext ------------------------------------------------------------------

SQLParserParser::ArithmeticOperatorContext::ArithmeticOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::ArithmeticOperatorContext::PLUS() {
  return getToken(SQLParserParser::PLUS, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticOperatorContext::MINUS() {
  return getToken(SQLParserParser::MINUS, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticOperatorContext::ASTERISK() {
  return getToken(SQLParserParser::ASTERISK, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticOperatorContext::SLASH() {
  return getToken(SQLParserParser::SLASH, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticOperatorContext::PERCENT() {
  return getToken(SQLParserParser::PERCENT, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticOperatorContext::DIV() {
  return getToken(SQLParserParser::DIV, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticOperatorContext::TILDE() {
  return getToken(SQLParserParser::TILDE, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticOperatorContext::AMPERSAND() {
  return getToken(SQLParserParser::AMPERSAND, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticOperatorContext::PIPE() {
  return getToken(SQLParserParser::PIPE, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticOperatorContext::CONCAT_PIPE() {
  return getToken(SQLParserParser::CONCAT_PIPE, 0);
}

tree::TerminalNode* SQLParserParser::ArithmeticOperatorContext::HAT() {
  return getToken(SQLParserParser::HAT, 0);
}


size_t SQLParserParser::ArithmeticOperatorContext::getRuleIndex() const {
  return SQLParserParser::RuleArithmeticOperator;
}


std::any SQLParserParser::ArithmeticOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitArithmeticOperator(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::ArithmeticOperatorContext* SQLParserParser::arithmeticOperator() {
  ArithmeticOperatorContext *_localctx = _tracker.createInstance<ArithmeticOperatorContext>(_ctx, getState());
  enterRule(_localctx, 68, SQLParserParser::RuleArithmeticOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(597);
    _la = _input->LA(1);
    if (!(_la == SQLParserParser::DIV || ((((_la - 264) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 264)) & 1023) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredicateOperatorContext ------------------------------------------------------------------

SQLParserParser::PredicateOperatorContext::PredicateOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::PredicateOperatorContext::OR() {
  return getToken(SQLParserParser::OR, 0);
}

tree::TerminalNode* SQLParserParser::PredicateOperatorContext::AND() {
  return getToken(SQLParserParser::AND, 0);
}

tree::TerminalNode* SQLParserParser::PredicateOperatorContext::IN() {
  return getToken(SQLParserParser::IN, 0);
}

tree::TerminalNode* SQLParserParser::PredicateOperatorContext::NOT() {
  return getToken(SQLParserParser::NOT, 0);
}


size_t SQLParserParser::PredicateOperatorContext::getRuleIndex() const {
  return SQLParserParser::RulePredicateOperator;
}


std::any SQLParserParser::PredicateOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitPredicateOperator(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::PredicateOperatorContext* SQLParserParser::predicateOperator() {
  PredicateOperatorContext *_localctx = _tracker.createInstance<PredicateOperatorContext>(_ctx, getState());
  enterRule(_localctx, 70, SQLParserParser::RulePredicateOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(599);
    _la = _input->LA(1);
    if (!(_la == SQLParserParser::AND || ((((_la - 109) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 109)) & 70643622084609) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanValueContext ------------------------------------------------------------------

SQLParserParser::BooleanValueContext::BooleanValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::BooleanValueContext::TRUE() {
  return getToken(SQLParserParser::TRUE, 0);
}

tree::TerminalNode* SQLParserParser::BooleanValueContext::FALSE() {
  return getToken(SQLParserParser::FALSE, 0);
}


size_t SQLParserParser::BooleanValueContext::getRuleIndex() const {
  return SQLParserParser::RuleBooleanValue;
}


std::any SQLParserParser::BooleanValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitBooleanValue(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::BooleanValueContext* SQLParserParser::booleanValue() {
  BooleanValueContext *_localctx = _tracker.createInstance<BooleanValueContext>(_ctx, getState());
  enterRule(_localctx, 72, SQLParserParser::RuleBooleanValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(601);
    _la = _input->LA(1);
    if (!(_la == SQLParserParser::FALSE || _la == SQLParserParser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalContext ------------------------------------------------------------------

SQLParserParser::IntervalContext::IntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::IntervalContext::INTERVAL() {
  return getToken(SQLParserParser::INTERVAL, 0);
}

SQLParserParser::ErrorCapturingMultiUnitsIntervalContext* SQLParserParser::IntervalContext::errorCapturingMultiUnitsInterval() {
  return getRuleContext<SQLParserParser::ErrorCapturingMultiUnitsIntervalContext>(0);
}

SQLParserParser::ErrorCapturingUnitToUnitIntervalContext* SQLParserParser::IntervalContext::errorCapturingUnitToUnitInterval() {
  return getRuleContext<SQLParserParser::ErrorCapturingUnitToUnitIntervalContext>(0);
}


size_t SQLParserParser::IntervalContext::getRuleIndex() const {
  return SQLParserParser::RuleInterval;
}


std::any SQLParserParser::IntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitInterval(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::IntervalContext* SQLParserParser::interval() {
  IntervalContext *_localctx = _tracker.createInstance<IntervalContext>(_ctx, getState());
  enterRule(_localctx, 74, SQLParserParser::RuleInterval);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(603);
    match(SQLParserParser::INTERVAL);
    setState(606);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      setState(604);
      errorCapturingMultiUnitsInterval();
      break;
    }

    case 2: {
      setState(605);
      errorCapturingUnitToUnitInterval();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ErrorCapturingMultiUnitsIntervalContext ------------------------------------------------------------------

SQLParserParser::ErrorCapturingMultiUnitsIntervalContext::ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::MultiUnitsIntervalContext* SQLParserParser::ErrorCapturingMultiUnitsIntervalContext::multiUnitsInterval() {
  return getRuleContext<SQLParserParser::MultiUnitsIntervalContext>(0);
}

SQLParserParser::UnitToUnitIntervalContext* SQLParserParser::ErrorCapturingMultiUnitsIntervalContext::unitToUnitInterval() {
  return getRuleContext<SQLParserParser::UnitToUnitIntervalContext>(0);
}


size_t SQLParserParser::ErrorCapturingMultiUnitsIntervalContext::getRuleIndex() const {
  return SQLParserParser::RuleErrorCapturingMultiUnitsInterval;
}


std::any SQLParserParser::ErrorCapturingMultiUnitsIntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitErrorCapturingMultiUnitsInterval(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::ErrorCapturingMultiUnitsIntervalContext* SQLParserParser::errorCapturingMultiUnitsInterval() {
  ErrorCapturingMultiUnitsIntervalContext *_localctx = _tracker.createInstance<ErrorCapturingMultiUnitsIntervalContext>(_ctx, getState());
  enterRule(_localctx, 76, SQLParserParser::RuleErrorCapturingMultiUnitsInterval);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(608);
    multiUnitsInterval();
    setState(610);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      setState(609);
      unitToUnitInterval();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiUnitsIntervalContext ------------------------------------------------------------------

SQLParserParser::MultiUnitsIntervalContext::MultiUnitsIntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SQLParserParser::IntervalValueContext *> SQLParserParser::MultiUnitsIntervalContext::intervalValue() {
  return getRuleContexts<SQLParserParser::IntervalValueContext>();
}

SQLParserParser::IntervalValueContext* SQLParserParser::MultiUnitsIntervalContext::intervalValue(size_t i) {
  return getRuleContext<SQLParserParser::IntervalValueContext>(i);
}

std::vector<SQLParserParser::IdentifierContext *> SQLParserParser::MultiUnitsIntervalContext::identifier() {
  return getRuleContexts<SQLParserParser::IdentifierContext>();
}

SQLParserParser::IdentifierContext* SQLParserParser::MultiUnitsIntervalContext::identifier(size_t i) {
  return getRuleContext<SQLParserParser::IdentifierContext>(i);
}


size_t SQLParserParser::MultiUnitsIntervalContext::getRuleIndex() const {
  return SQLParserParser::RuleMultiUnitsInterval;
}


std::any SQLParserParser::MultiUnitsIntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitMultiUnitsInterval(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::MultiUnitsIntervalContext* SQLParserParser::multiUnitsInterval() {
  MultiUnitsIntervalContext *_localctx = _tracker.createInstance<MultiUnitsIntervalContext>(_ctx, getState());
  enterRule(_localctx, 78, SQLParserParser::RuleMultiUnitsInterval);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(615); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(612);
              intervalValue();
              setState(613);
              antlrcpp::downCast<MultiUnitsIntervalContext *>(_localctx)->identifierContext = identifier();
              antlrcpp::downCast<MultiUnitsIntervalContext *>(_localctx)->unit.push_back(antlrcpp::downCast<MultiUnitsIntervalContext *>(_localctx)->identifierContext);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(617); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ErrorCapturingUnitToUnitIntervalContext ------------------------------------------------------------------

SQLParserParser::ErrorCapturingUnitToUnitIntervalContext::ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SQLParserParser::UnitToUnitIntervalContext *> SQLParserParser::ErrorCapturingUnitToUnitIntervalContext::unitToUnitInterval() {
  return getRuleContexts<SQLParserParser::UnitToUnitIntervalContext>();
}

SQLParserParser::UnitToUnitIntervalContext* SQLParserParser::ErrorCapturingUnitToUnitIntervalContext::unitToUnitInterval(size_t i) {
  return getRuleContext<SQLParserParser::UnitToUnitIntervalContext>(i);
}

SQLParserParser::MultiUnitsIntervalContext* SQLParserParser::ErrorCapturingUnitToUnitIntervalContext::multiUnitsInterval() {
  return getRuleContext<SQLParserParser::MultiUnitsIntervalContext>(0);
}


size_t SQLParserParser::ErrorCapturingUnitToUnitIntervalContext::getRuleIndex() const {
  return SQLParserParser::RuleErrorCapturingUnitToUnitInterval;
}


std::any SQLParserParser::ErrorCapturingUnitToUnitIntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitErrorCapturingUnitToUnitInterval(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::ErrorCapturingUnitToUnitIntervalContext* SQLParserParser::errorCapturingUnitToUnitInterval() {
  ErrorCapturingUnitToUnitIntervalContext *_localctx = _tracker.createInstance<ErrorCapturingUnitToUnitIntervalContext>(_ctx, getState());
  enterRule(_localctx, 80, SQLParserParser::RuleErrorCapturingUnitToUnitInterval);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(619);
    antlrcpp::downCast<ErrorCapturingUnitToUnitIntervalContext *>(_localctx)->body = unitToUnitInterval();
    setState(622);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      setState(620);
      antlrcpp::downCast<ErrorCapturingUnitToUnitIntervalContext *>(_localctx)->error1 = multiUnitsInterval();
      break;
    }

    case 2: {
      setState(621);
      antlrcpp::downCast<ErrorCapturingUnitToUnitIntervalContext *>(_localctx)->error2 = unitToUnitInterval();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnitToUnitIntervalContext ------------------------------------------------------------------

SQLParserParser::UnitToUnitIntervalContext::UnitToUnitIntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::UnitToUnitIntervalContext::TO() {
  return getToken(SQLParserParser::TO, 0);
}

SQLParserParser::IntervalValueContext* SQLParserParser::UnitToUnitIntervalContext::intervalValue() {
  return getRuleContext<SQLParserParser::IntervalValueContext>(0);
}

std::vector<SQLParserParser::IdentifierContext *> SQLParserParser::UnitToUnitIntervalContext::identifier() {
  return getRuleContexts<SQLParserParser::IdentifierContext>();
}

SQLParserParser::IdentifierContext* SQLParserParser::UnitToUnitIntervalContext::identifier(size_t i) {
  return getRuleContext<SQLParserParser::IdentifierContext>(i);
}


size_t SQLParserParser::UnitToUnitIntervalContext::getRuleIndex() const {
  return SQLParserParser::RuleUnitToUnitInterval;
}


std::any SQLParserParser::UnitToUnitIntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitUnitToUnitInterval(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::UnitToUnitIntervalContext* SQLParserParser::unitToUnitInterval() {
  UnitToUnitIntervalContext *_localctx = _tracker.createInstance<UnitToUnitIntervalContext>(_ctx, getState());
  enterRule(_localctx, 82, SQLParserParser::RuleUnitToUnitInterval);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(624);
    antlrcpp::downCast<UnitToUnitIntervalContext *>(_localctx)->value = intervalValue();
    setState(625);
    antlrcpp::downCast<UnitToUnitIntervalContext *>(_localctx)->from = identifier();
    setState(626);
    match(SQLParserParser::TO);
    setState(627);
    antlrcpp::downCast<UnitToUnitIntervalContext *>(_localctx)->to = identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalValueContext ------------------------------------------------------------------

SQLParserParser::IntervalValueContext::IntervalValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::IntervalValueContext::INTEGER_VALUE() {
  return getToken(SQLParserParser::INTEGER_VALUE, 0);
}

tree::TerminalNode* SQLParserParser::IntervalValueContext::DECIMAL_VALUE() {
  return getToken(SQLParserParser::DECIMAL_VALUE, 0);
}

tree::TerminalNode* SQLParserParser::IntervalValueContext::PLUS() {
  return getToken(SQLParserParser::PLUS, 0);
}

tree::TerminalNode* SQLParserParser::IntervalValueContext::MINUS() {
  return getToken(SQLParserParser::MINUS, 0);
}

tree::TerminalNode* SQLParserParser::IntervalValueContext::STRING() {
  return getToken(SQLParserParser::STRING, 0);
}


size_t SQLParserParser::IntervalValueContext::getRuleIndex() const {
  return SQLParserParser::RuleIntervalValue;
}


std::any SQLParserParser::IntervalValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitIntervalValue(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::IntervalValueContext* SQLParserParser::intervalValue() {
  IntervalValueContext *_localctx = _tracker.createInstance<IntervalValueContext>(_ctx, getState());
  enterRule(_localctx, 84, SQLParserParser::RuleIntervalValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(634);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SQLParserParser::PLUS:
      case SQLParserParser::MINUS:
      case SQLParserParser::INTEGER_VALUE:
      case SQLParserParser::DECIMAL_VALUE: {
        enterOuterAlt(_localctx, 1);
        setState(630);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SQLParserParser::PLUS

        || _la == SQLParserParser::MINUS) {
          setState(629);
          _la = _input->LA(1);
          if (!(_la == SQLParserParser::PLUS

          || _la == SQLParserParser::MINUS)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(632);
        _la = _input->LA(1);
        if (!(_la == SQLParserParser::INTEGER_VALUE

        || _la == SQLParserParser::DECIMAL_VALUE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case SQLParserParser::STRING: {
        enterOuterAlt(_localctx, 2);
        setState(633);
        match(SQLParserParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColPositionContext ------------------------------------------------------------------

SQLParserParser::ColPositionContext::ColPositionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::ColPositionContext::FIRST() {
  return getToken(SQLParserParser::FIRST, 0);
}

tree::TerminalNode* SQLParserParser::ColPositionContext::AFTER() {
  return getToken(SQLParserParser::AFTER, 0);
}

SQLParserParser::ErrorCapturingIdentifierContext* SQLParserParser::ColPositionContext::errorCapturingIdentifier() {
  return getRuleContext<SQLParserParser::ErrorCapturingIdentifierContext>(0);
}


size_t SQLParserParser::ColPositionContext::getRuleIndex() const {
  return SQLParserParser::RuleColPosition;
}


std::any SQLParserParser::ColPositionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitColPosition(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::ColPositionContext* SQLParserParser::colPosition() {
  ColPositionContext *_localctx = _tracker.createInstance<ColPositionContext>(_ctx, getState());
  enterRule(_localctx, 86, SQLParserParser::RuleColPosition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(639);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SQLParserParser::FIRST: {
        enterOuterAlt(_localctx, 1);
        setState(636);
        antlrcpp::downCast<ColPositionContext *>(_localctx)->position = match(SQLParserParser::FIRST);
        break;
      }

      case SQLParserParser::AFTER: {
        enterOuterAlt(_localctx, 2);
        setState(637);
        antlrcpp::downCast<ColPositionContext *>(_localctx)->position = match(SQLParserParser::AFTER);
        setState(638);
        antlrcpp::downCast<ColPositionContext *>(_localctx)->afterCol = errorCapturingIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataTypeContext ------------------------------------------------------------------

SQLParserParser::DataTypeContext::DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SQLParserParser::DataTypeContext::getRuleIndex() const {
  return SQLParserParser::RuleDataType;
}

void SQLParserParser::DataTypeContext::copyFrom(DataTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ComplexDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::ComplexDataTypeContext::LT() {
  return getToken(SQLParserParser::LT, 0);
}

std::vector<SQLParserParser::DataTypeContext *> SQLParserParser::ComplexDataTypeContext::dataType() {
  return getRuleContexts<SQLParserParser::DataTypeContext>();
}

SQLParserParser::DataTypeContext* SQLParserParser::ComplexDataTypeContext::dataType(size_t i) {
  return getRuleContext<SQLParserParser::DataTypeContext>(i);
}

tree::TerminalNode* SQLParserParser::ComplexDataTypeContext::GT() {
  return getToken(SQLParserParser::GT, 0);
}

tree::TerminalNode* SQLParserParser::ComplexDataTypeContext::ARRAY() {
  return getToken(SQLParserParser::ARRAY, 0);
}

tree::TerminalNode* SQLParserParser::ComplexDataTypeContext::MAP() {
  return getToken(SQLParserParser::MAP, 0);
}

tree::TerminalNode* SQLParserParser::ComplexDataTypeContext::STRUCT() {
  return getToken(SQLParserParser::STRUCT, 0);
}

tree::TerminalNode* SQLParserParser::ComplexDataTypeContext::NEQ() {
  return getToken(SQLParserParser::NEQ, 0);
}

SQLParserParser::ComplexColTypeListContext* SQLParserParser::ComplexDataTypeContext::complexColTypeList() {
  return getRuleContext<SQLParserParser::ComplexColTypeListContext>(0);
}

SQLParserParser::ComplexDataTypeContext::ComplexDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::ComplexDataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitComplexDataType(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimitiveDataTypeContext ------------------------------------------------------------------

SQLParserParser::IdentifierContext* SQLParserParser::PrimitiveDataTypeContext::identifier() {
  return getRuleContext<SQLParserParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> SQLParserParser::PrimitiveDataTypeContext::INTEGER_VALUE() {
  return getTokens(SQLParserParser::INTEGER_VALUE);
}

tree::TerminalNode* SQLParserParser::PrimitiveDataTypeContext::INTEGER_VALUE(size_t i) {
  return getToken(SQLParserParser::INTEGER_VALUE, i);
}

SQLParserParser::PrimitiveDataTypeContext::PrimitiveDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::PrimitiveDataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitPrimitiveDataType(this);
  else
    return visitor->visitChildren(this);
}
SQLParserParser::DataTypeContext* SQLParserParser::dataType() {
  DataTypeContext *_localctx = _tracker.createInstance<DataTypeContext>(_ctx, getState());
  enterRule(_localctx, 88, SQLParserParser::RuleDataType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(675);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<SQLParserParser::ComplexDataTypeContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(641);
      antlrcpp::downCast<ComplexDataTypeContext *>(_localctx)->complex = match(SQLParserParser::ARRAY);
      setState(642);
      match(SQLParserParser::LT);
      setState(643);
      dataType();
      setState(644);
      match(SQLParserParser::GT);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<SQLParserParser::ComplexDataTypeContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(646);
      antlrcpp::downCast<ComplexDataTypeContext *>(_localctx)->complex = match(SQLParserParser::MAP);
      setState(647);
      match(SQLParserParser::LT);
      setState(648);
      dataType();
      setState(649);
      match(SQLParserParser::T__1);
      setState(650);
      dataType();
      setState(651);
      match(SQLParserParser::GT);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<SQLParserParser::ComplexDataTypeContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(653);
      antlrcpp::downCast<ComplexDataTypeContext *>(_localctx)->complex = match(SQLParserParser::STRUCT);
      setState(660);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case SQLParserParser::LT: {
          setState(654);
          match(SQLParserParser::LT);
          setState(656);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & -512) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 192)) & -1) != 0) || _la == SQLParserParser::IDENTIFIER

          || _la == SQLParserParser::BACKQUOTED_IDENTIFIER) {
            setState(655);
            complexColTypeList();
          }
          setState(658);
          match(SQLParserParser::GT);
          break;
        }

        case SQLParserParser::NEQ: {
          setState(659);
          match(SQLParserParser::NEQ);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<SQLParserParser::PrimitiveDataTypeContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(662);
      identifier();
      setState(673);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::T__2) {
        setState(663);
        match(SQLParserParser::T__2);
        setState(664);
        match(SQLParserParser::INTEGER_VALUE);
        setState(669);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == SQLParserParser::T__1) {
          setState(665);
          match(SQLParserParser::T__1);
          setState(666);
          match(SQLParserParser::INTEGER_VALUE);
          setState(671);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(672);
        match(SQLParserParser::T__3);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedColTypeWithPositionListContext ------------------------------------------------------------------

SQLParserParser::QualifiedColTypeWithPositionListContext::QualifiedColTypeWithPositionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SQLParserParser::QualifiedColTypeWithPositionContext *> SQLParserParser::QualifiedColTypeWithPositionListContext::qualifiedColTypeWithPosition() {
  return getRuleContexts<SQLParserParser::QualifiedColTypeWithPositionContext>();
}

SQLParserParser::QualifiedColTypeWithPositionContext* SQLParserParser::QualifiedColTypeWithPositionListContext::qualifiedColTypeWithPosition(size_t i) {
  return getRuleContext<SQLParserParser::QualifiedColTypeWithPositionContext>(i);
}


size_t SQLParserParser::QualifiedColTypeWithPositionListContext::getRuleIndex() const {
  return SQLParserParser::RuleQualifiedColTypeWithPositionList;
}


std::any SQLParserParser::QualifiedColTypeWithPositionListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitQualifiedColTypeWithPositionList(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::QualifiedColTypeWithPositionListContext* SQLParserParser::qualifiedColTypeWithPositionList() {
  QualifiedColTypeWithPositionListContext *_localctx = _tracker.createInstance<QualifiedColTypeWithPositionListContext>(_ctx, getState());
  enterRule(_localctx, 90, SQLParserParser::RuleQualifiedColTypeWithPositionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(677);
    qualifiedColTypeWithPosition();
    setState(682);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SQLParserParser::T__1) {
      setState(678);
      match(SQLParserParser::T__1);
      setState(679);
      qualifiedColTypeWithPosition();
      setState(684);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedColTypeWithPositionContext ------------------------------------------------------------------

SQLParserParser::QualifiedColTypeWithPositionContext::QualifiedColTypeWithPositionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::DataTypeContext* SQLParserParser::QualifiedColTypeWithPositionContext::dataType() {
  return getRuleContext<SQLParserParser::DataTypeContext>(0);
}

SQLParserParser::MultipartIdentifierContext* SQLParserParser::QualifiedColTypeWithPositionContext::multipartIdentifier() {
  return getRuleContext<SQLParserParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* SQLParserParser::QualifiedColTypeWithPositionContext::NOT() {
  return getToken(SQLParserParser::NOT, 0);
}

tree::TerminalNode* SQLParserParser::QualifiedColTypeWithPositionContext::NULL_() {
  return getToken(SQLParserParser::NULL_, 0);
}

SQLParserParser::CommentSpecContext* SQLParserParser::QualifiedColTypeWithPositionContext::commentSpec() {
  return getRuleContext<SQLParserParser::CommentSpecContext>(0);
}

SQLParserParser::ColPositionContext* SQLParserParser::QualifiedColTypeWithPositionContext::colPosition() {
  return getRuleContext<SQLParserParser::ColPositionContext>(0);
}


size_t SQLParserParser::QualifiedColTypeWithPositionContext::getRuleIndex() const {
  return SQLParserParser::RuleQualifiedColTypeWithPosition;
}


std::any SQLParserParser::QualifiedColTypeWithPositionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitQualifiedColTypeWithPosition(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::QualifiedColTypeWithPositionContext* SQLParserParser::qualifiedColTypeWithPosition() {
  QualifiedColTypeWithPositionContext *_localctx = _tracker.createInstance<QualifiedColTypeWithPositionContext>(_ctx, getState());
  enterRule(_localctx, 92, SQLParserParser::RuleQualifiedColTypeWithPosition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(685);
    antlrcpp::downCast<QualifiedColTypeWithPositionContext *>(_localctx)->name = multipartIdentifier();
    setState(686);
    dataType();
    setState(689);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::NOT) {
      setState(687);
      match(SQLParserParser::NOT);
      setState(688);
      match(SQLParserParser::NULL_);
    }
    setState(692);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::COMMENT) {
      setState(691);
      commentSpec();
    }
    setState(695);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::AFTER || _la == SQLParserParser::FIRST) {
      setState(694);
      colPosition();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColTypeListContext ------------------------------------------------------------------

SQLParserParser::ColTypeListContext::ColTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SQLParserParser::ColTypeContext *> SQLParserParser::ColTypeListContext::colType() {
  return getRuleContexts<SQLParserParser::ColTypeContext>();
}

SQLParserParser::ColTypeContext* SQLParserParser::ColTypeListContext::colType(size_t i) {
  return getRuleContext<SQLParserParser::ColTypeContext>(i);
}


size_t SQLParserParser::ColTypeListContext::getRuleIndex() const {
  return SQLParserParser::RuleColTypeList;
}


std::any SQLParserParser::ColTypeListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitColTypeList(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::ColTypeListContext* SQLParserParser::colTypeList() {
  ColTypeListContext *_localctx = _tracker.createInstance<ColTypeListContext>(_ctx, getState());
  enterRule(_localctx, 94, SQLParserParser::RuleColTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(697);
    colType();
    setState(702);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SQLParserParser::T__1) {
      setState(698);
      match(SQLParserParser::T__1);
      setState(699);
      colType();
      setState(704);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColTypeContext ------------------------------------------------------------------

SQLParserParser::ColTypeContext::ColTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::DataTypeContext* SQLParserParser::ColTypeContext::dataType() {
  return getRuleContext<SQLParserParser::DataTypeContext>(0);
}

SQLParserParser::ErrorCapturingIdentifierContext* SQLParserParser::ColTypeContext::errorCapturingIdentifier() {
  return getRuleContext<SQLParserParser::ErrorCapturingIdentifierContext>(0);
}

tree::TerminalNode* SQLParserParser::ColTypeContext::NOT() {
  return getToken(SQLParserParser::NOT, 0);
}

tree::TerminalNode* SQLParserParser::ColTypeContext::NULL_() {
  return getToken(SQLParserParser::NULL_, 0);
}

SQLParserParser::CommentSpecContext* SQLParserParser::ColTypeContext::commentSpec() {
  return getRuleContext<SQLParserParser::CommentSpecContext>(0);
}


size_t SQLParserParser::ColTypeContext::getRuleIndex() const {
  return SQLParserParser::RuleColType;
}


std::any SQLParserParser::ColTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitColType(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::ColTypeContext* SQLParserParser::colType() {
  ColTypeContext *_localctx = _tracker.createInstance<ColTypeContext>(_ctx, getState());
  enterRule(_localctx, 96, SQLParserParser::RuleColType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(705);
    antlrcpp::downCast<ColTypeContext *>(_localctx)->colName = errorCapturingIdentifier();
    setState(706);
    dataType();
    setState(709);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::NOT) {
      setState(707);
      match(SQLParserParser::NOT);
      setState(708);
      match(SQLParserParser::NULL_);
    }
    setState(712);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::COMMENT) {
      setState(711);
      commentSpec();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComplexColTypeListContext ------------------------------------------------------------------

SQLParserParser::ComplexColTypeListContext::ComplexColTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SQLParserParser::ComplexColTypeContext *> SQLParserParser::ComplexColTypeListContext::complexColType() {
  return getRuleContexts<SQLParserParser::ComplexColTypeContext>();
}

SQLParserParser::ComplexColTypeContext* SQLParserParser::ComplexColTypeListContext::complexColType(size_t i) {
  return getRuleContext<SQLParserParser::ComplexColTypeContext>(i);
}


size_t SQLParserParser::ComplexColTypeListContext::getRuleIndex() const {
  return SQLParserParser::RuleComplexColTypeList;
}


std::any SQLParserParser::ComplexColTypeListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitComplexColTypeList(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::ComplexColTypeListContext* SQLParserParser::complexColTypeList() {
  ComplexColTypeListContext *_localctx = _tracker.createInstance<ComplexColTypeListContext>(_ctx, getState());
  enterRule(_localctx, 98, SQLParserParser::RuleComplexColTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(714);
    complexColType();
    setState(719);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SQLParserParser::T__1) {
      setState(715);
      match(SQLParserParser::T__1);
      setState(716);
      complexColType();
      setState(721);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComplexColTypeContext ------------------------------------------------------------------

SQLParserParser::ComplexColTypeContext::ComplexColTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::IdentifierContext* SQLParserParser::ComplexColTypeContext::identifier() {
  return getRuleContext<SQLParserParser::IdentifierContext>(0);
}

SQLParserParser::DataTypeContext* SQLParserParser::ComplexColTypeContext::dataType() {
  return getRuleContext<SQLParserParser::DataTypeContext>(0);
}

tree::TerminalNode* SQLParserParser::ComplexColTypeContext::NOT() {
  return getToken(SQLParserParser::NOT, 0);
}

tree::TerminalNode* SQLParserParser::ComplexColTypeContext::NULL_() {
  return getToken(SQLParserParser::NULL_, 0);
}

SQLParserParser::CommentSpecContext* SQLParserParser::ComplexColTypeContext::commentSpec() {
  return getRuleContext<SQLParserParser::CommentSpecContext>(0);
}


size_t SQLParserParser::ComplexColTypeContext::getRuleIndex() const {
  return SQLParserParser::RuleComplexColType;
}


std::any SQLParserParser::ComplexColTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitComplexColType(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::ComplexColTypeContext* SQLParserParser::complexColType() {
  ComplexColTypeContext *_localctx = _tracker.createInstance<ComplexColTypeContext>(_ctx, getState());
  enterRule(_localctx, 100, SQLParserParser::RuleComplexColType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(722);
    identifier();
    setState(723);
    match(SQLParserParser::T__7);
    setState(724);
    dataType();
    setState(727);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::NOT) {
      setState(725);
      match(SQLParserParser::NOT);
      setState(726);
      match(SQLParserParser::NULL_);
    }
    setState(730);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SQLParserParser::COMMENT) {
      setState(729);
      commentSpec();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhenClauseContext ------------------------------------------------------------------

SQLParserParser::WhenClauseContext::WhenClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::WhenClauseContext::WHEN() {
  return getToken(SQLParserParser::WHEN, 0);
}

tree::TerminalNode* SQLParserParser::WhenClauseContext::THEN() {
  return getToken(SQLParserParser::THEN, 0);
}

std::vector<SQLParserParser::ExpressionContext *> SQLParserParser::WhenClauseContext::expression() {
  return getRuleContexts<SQLParserParser::ExpressionContext>();
}

SQLParserParser::ExpressionContext* SQLParserParser::WhenClauseContext::expression(size_t i) {
  return getRuleContext<SQLParserParser::ExpressionContext>(i);
}


size_t SQLParserParser::WhenClauseContext::getRuleIndex() const {
  return SQLParserParser::RuleWhenClause;
}


std::any SQLParserParser::WhenClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitWhenClause(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::WhenClauseContext* SQLParserParser::whenClause() {
  WhenClauseContext *_localctx = _tracker.createInstance<WhenClauseContext>(_ctx, getState());
  enterRule(_localctx, 102, SQLParserParser::RuleWhenClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(732);
    match(SQLParserParser::WHEN);
    setState(733);
    antlrcpp::downCast<WhenClauseContext *>(_localctx)->condition = expression();
    setState(734);
    match(SQLParserParser::THEN);
    setState(735);
    antlrcpp::downCast<WhenClauseContext *>(_localctx)->result = expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowClauseContext ------------------------------------------------------------------

SQLParserParser::WindowClauseContext::WindowClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::WindowClauseContext::WINDOW() {
  return getToken(SQLParserParser::WINDOW, 0);
}

std::vector<SQLParserParser::NamedWindowContext *> SQLParserParser::WindowClauseContext::namedWindow() {
  return getRuleContexts<SQLParserParser::NamedWindowContext>();
}

SQLParserParser::NamedWindowContext* SQLParserParser::WindowClauseContext::namedWindow(size_t i) {
  return getRuleContext<SQLParserParser::NamedWindowContext>(i);
}


size_t SQLParserParser::WindowClauseContext::getRuleIndex() const {
  return SQLParserParser::RuleWindowClause;
}


std::any SQLParserParser::WindowClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitWindowClause(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::WindowClauseContext* SQLParserParser::windowClause() {
  WindowClauseContext *_localctx = _tracker.createInstance<WindowClauseContext>(_ctx, getState());
  enterRule(_localctx, 104, SQLParserParser::RuleWindowClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(737);
    match(SQLParserParser::WINDOW);
    setState(738);
    namedWindow();
    setState(743);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SQLParserParser::T__1) {
      setState(739);
      match(SQLParserParser::T__1);
      setState(740);
      namedWindow();
      setState(745);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedWindowContext ------------------------------------------------------------------

SQLParserParser::NamedWindowContext::NamedWindowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::NamedWindowContext::AS() {
  return getToken(SQLParserParser::AS, 0);
}

SQLParserParser::WindowSpecContext* SQLParserParser::NamedWindowContext::windowSpec() {
  return getRuleContext<SQLParserParser::WindowSpecContext>(0);
}

SQLParserParser::ErrorCapturingIdentifierContext* SQLParserParser::NamedWindowContext::errorCapturingIdentifier() {
  return getRuleContext<SQLParserParser::ErrorCapturingIdentifierContext>(0);
}


size_t SQLParserParser::NamedWindowContext::getRuleIndex() const {
  return SQLParserParser::RuleNamedWindow;
}


std::any SQLParserParser::NamedWindowContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitNamedWindow(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::NamedWindowContext* SQLParserParser::namedWindow() {
  NamedWindowContext *_localctx = _tracker.createInstance<NamedWindowContext>(_ctx, getState());
  enterRule(_localctx, 106, SQLParserParser::RuleNamedWindow);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(746);
    antlrcpp::downCast<NamedWindowContext *>(_localctx)->name = errorCapturingIdentifier();
    setState(747);
    match(SQLParserParser::AS);
    setState(748);
    windowSpec();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowSpecContext ------------------------------------------------------------------

SQLParserParser::WindowSpecContext::WindowSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SQLParserParser::WindowSpecContext::getRuleIndex() const {
  return SQLParserParser::RuleWindowSpec;
}

void SQLParserParser::WindowSpecContext::copyFrom(WindowSpecContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- WindowRefContext ------------------------------------------------------------------

SQLParserParser::ErrorCapturingIdentifierContext* SQLParserParser::WindowRefContext::errorCapturingIdentifier() {
  return getRuleContext<SQLParserParser::ErrorCapturingIdentifierContext>(0);
}

SQLParserParser::WindowRefContext::WindowRefContext(WindowSpecContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::WindowRefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitWindowRef(this);
  else
    return visitor->visitChildren(this);
}
//----------------- WindowDefContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::WindowDefContext::CLUSTER() {
  return getToken(SQLParserParser::CLUSTER, 0);
}

std::vector<tree::TerminalNode *> SQLParserParser::WindowDefContext::BY() {
  return getTokens(SQLParserParser::BY);
}

tree::TerminalNode* SQLParserParser::WindowDefContext::BY(size_t i) {
  return getToken(SQLParserParser::BY, i);
}

std::vector<SQLParserParser::ExpressionContext *> SQLParserParser::WindowDefContext::expression() {
  return getRuleContexts<SQLParserParser::ExpressionContext>();
}

SQLParserParser::ExpressionContext* SQLParserParser::WindowDefContext::expression(size_t i) {
  return getRuleContext<SQLParserParser::ExpressionContext>(i);
}

SQLParserParser::WindowFrameContext* SQLParserParser::WindowDefContext::windowFrame() {
  return getRuleContext<SQLParserParser::WindowFrameContext>(0);
}

std::vector<SQLParserParser::SortItemContext *> SQLParserParser::WindowDefContext::sortItem() {
  return getRuleContexts<SQLParserParser::SortItemContext>();
}

SQLParserParser::SortItemContext* SQLParserParser::WindowDefContext::sortItem(size_t i) {
  return getRuleContext<SQLParserParser::SortItemContext>(i);
}

tree::TerminalNode* SQLParserParser::WindowDefContext::PARTITION() {
  return getToken(SQLParserParser::PARTITION, 0);
}

tree::TerminalNode* SQLParserParser::WindowDefContext::DISTRIBUTE() {
  return getToken(SQLParserParser::DISTRIBUTE, 0);
}

tree::TerminalNode* SQLParserParser::WindowDefContext::ORDER() {
  return getToken(SQLParserParser::ORDER, 0);
}

tree::TerminalNode* SQLParserParser::WindowDefContext::SORT() {
  return getToken(SQLParserParser::SORT, 0);
}

SQLParserParser::WindowDefContext::WindowDefContext(WindowSpecContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::WindowDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitWindowDef(this);
  else
    return visitor->visitChildren(this);
}
SQLParserParser::WindowSpecContext* SQLParserParser::windowSpec() {
  WindowSpecContext *_localctx = _tracker.createInstance<WindowSpecContext>(_ctx, getState());
  enterRule(_localctx, 108, SQLParserParser::RuleWindowSpec);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(796);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<SQLParserParser::WindowRefContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(750);
      antlrcpp::downCast<WindowRefContext *>(_localctx)->name = errorCapturingIdentifier();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<SQLParserParser::WindowRefContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(751);
      match(SQLParserParser::T__2);
      setState(752);
      antlrcpp::downCast<WindowRefContext *>(_localctx)->name = errorCapturingIdentifier();
      setState(753);
      match(SQLParserParser::T__3);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<SQLParserParser::WindowDefContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(755);
      match(SQLParserParser::T__2);
      setState(790);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case SQLParserParser::CLUSTER: {
          setState(756);
          match(SQLParserParser::CLUSTER);
          setState(757);
          match(SQLParserParser::BY);
          setState(758);
          antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext = expression();
          antlrcpp::downCast<WindowDefContext *>(_localctx)->partition.push_back(antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext);
          setState(763);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == SQLParserParser::T__1) {
            setState(759);
            match(SQLParserParser::T__1);
            setState(760);
            antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext = expression();
            antlrcpp::downCast<WindowDefContext *>(_localctx)->partition.push_back(antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext);
            setState(765);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          break;
        }

        case SQLParserParser::T__3:
        case SQLParserParser::DISTRIBUTE:
        case SQLParserParser::ORDER:
        case SQLParserParser::PARTITION:
        case SQLParserParser::RANGE:
        case SQLParserParser::ROWS:
        case SQLParserParser::SORT: {
          setState(776);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == SQLParserParser::DISTRIBUTE || _la == SQLParserParser::PARTITION) {
            setState(766);
            _la = _input->LA(1);
            if (!(_la == SQLParserParser::DISTRIBUTE || _la == SQLParserParser::PARTITION)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(767);
            match(SQLParserParser::BY);
            setState(768);
            antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext = expression();
            antlrcpp::downCast<WindowDefContext *>(_localctx)->partition.push_back(antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext);
            setState(773);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == SQLParserParser::T__1) {
              setState(769);
              match(SQLParserParser::T__1);
              setState(770);
              antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext = expression();
              antlrcpp::downCast<WindowDefContext *>(_localctx)->partition.push_back(antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext);
              setState(775);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
          }
          setState(788);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == SQLParserParser::ORDER

          || _la == SQLParserParser::SORT) {
            setState(778);
            _la = _input->LA(1);
            if (!(_la == SQLParserParser::ORDER

            || _la == SQLParserParser::SORT)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(779);
            match(SQLParserParser::BY);
            setState(780);
            sortItem();
            setState(785);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == SQLParserParser::T__1) {
              setState(781);
              match(SQLParserParser::T__1);
              setState(782);
              sortItem();
              setState(787);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(793);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::RANGE

      || _la == SQLParserParser::ROWS) {
        setState(792);
        windowFrame();
      }
      setState(795);
      match(SQLParserParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowFrameContext ------------------------------------------------------------------

SQLParserParser::WindowFrameContext::WindowFrameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::WindowFrameContext::RANGE() {
  return getToken(SQLParserParser::RANGE, 0);
}

std::vector<SQLParserParser::FrameBoundContext *> SQLParserParser::WindowFrameContext::frameBound() {
  return getRuleContexts<SQLParserParser::FrameBoundContext>();
}

SQLParserParser::FrameBoundContext* SQLParserParser::WindowFrameContext::frameBound(size_t i) {
  return getRuleContext<SQLParserParser::FrameBoundContext>(i);
}

tree::TerminalNode* SQLParserParser::WindowFrameContext::ROWS() {
  return getToken(SQLParserParser::ROWS, 0);
}

tree::TerminalNode* SQLParserParser::WindowFrameContext::BETWEEN() {
  return getToken(SQLParserParser::BETWEEN, 0);
}

tree::TerminalNode* SQLParserParser::WindowFrameContext::AND() {
  return getToken(SQLParserParser::AND, 0);
}


size_t SQLParserParser::WindowFrameContext::getRuleIndex() const {
  return SQLParserParser::RuleWindowFrame;
}


std::any SQLParserParser::WindowFrameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitWindowFrame(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::WindowFrameContext* SQLParserParser::windowFrame() {
  WindowFrameContext *_localctx = _tracker.createInstance<WindowFrameContext>(_ctx, getState());
  enterRule(_localctx, 110, SQLParserParser::RuleWindowFrame);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(814);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(798);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(SQLParserParser::RANGE);
      setState(799);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(800);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(SQLParserParser::ROWS);
      setState(801);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(802);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(SQLParserParser::RANGE);
      setState(803);
      match(SQLParserParser::BETWEEN);
      setState(804);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      setState(805);
      match(SQLParserParser::AND);
      setState(806);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->end = frameBound();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(808);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(SQLParserParser::ROWS);
      setState(809);
      match(SQLParserParser::BETWEEN);
      setState(810);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      setState(811);
      match(SQLParserParser::AND);
      setState(812);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->end = frameBound();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FrameBoundContext ------------------------------------------------------------------

SQLParserParser::FrameBoundContext::FrameBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::FrameBoundContext::UNBOUNDED() {
  return getToken(SQLParserParser::UNBOUNDED, 0);
}

tree::TerminalNode* SQLParserParser::FrameBoundContext::PRECEDING() {
  return getToken(SQLParserParser::PRECEDING, 0);
}

tree::TerminalNode* SQLParserParser::FrameBoundContext::FOLLOWING() {
  return getToken(SQLParserParser::FOLLOWING, 0);
}

tree::TerminalNode* SQLParserParser::FrameBoundContext::ROW() {
  return getToken(SQLParserParser::ROW, 0);
}

tree::TerminalNode* SQLParserParser::FrameBoundContext::CURRENT() {
  return getToken(SQLParserParser::CURRENT, 0);
}

SQLParserParser::ExpressionContext* SQLParserParser::FrameBoundContext::expression() {
  return getRuleContext<SQLParserParser::ExpressionContext>(0);
}


size_t SQLParserParser::FrameBoundContext::getRuleIndex() const {
  return SQLParserParser::RuleFrameBound;
}


std::any SQLParserParser::FrameBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitFrameBound(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::FrameBoundContext* SQLParserParser::frameBound() {
  FrameBoundContext *_localctx = _tracker.createInstance<FrameBoundContext>(_ctx, getState());
  enterRule(_localctx, 112, SQLParserParser::RuleFrameBound);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(823);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(816);
      match(SQLParserParser::UNBOUNDED);
      setState(817);
      antlrcpp::downCast<FrameBoundContext *>(_localctx)->boundType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == SQLParserParser::FOLLOWING || _la == SQLParserParser::PRECEDING)) {
        antlrcpp::downCast<FrameBoundContext *>(_localctx)->boundType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(818);
      antlrcpp::downCast<FrameBoundContext *>(_localctx)->boundType = match(SQLParserParser::CURRENT);
      setState(819);
      match(SQLParserParser::ROW);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(820);
      expression();
      setState(821);
      antlrcpp::downCast<FrameBoundContext *>(_localctx)->boundType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == SQLParserParser::FOLLOWING || _la == SQLParserParser::PRECEDING)) {
        antlrcpp::downCast<FrameBoundContext *>(_localctx)->boundType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedNameListContext ------------------------------------------------------------------

SQLParserParser::QualifiedNameListContext::QualifiedNameListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SQLParserParser::QualifiedNameContext *> SQLParserParser::QualifiedNameListContext::qualifiedName() {
  return getRuleContexts<SQLParserParser::QualifiedNameContext>();
}

SQLParserParser::QualifiedNameContext* SQLParserParser::QualifiedNameListContext::qualifiedName(size_t i) {
  return getRuleContext<SQLParserParser::QualifiedNameContext>(i);
}


size_t SQLParserParser::QualifiedNameListContext::getRuleIndex() const {
  return SQLParserParser::RuleQualifiedNameList;
}


std::any SQLParserParser::QualifiedNameListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitQualifiedNameList(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::QualifiedNameListContext* SQLParserParser::qualifiedNameList() {
  QualifiedNameListContext *_localctx = _tracker.createInstance<QualifiedNameListContext>(_ctx, getState());
  enterRule(_localctx, 114, SQLParserParser::RuleQualifiedNameList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(825);
    qualifiedName();
    setState(830);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SQLParserParser::T__1) {
      setState(826);
      match(SQLParserParser::T__1);
      setState(827);
      qualifiedName();
      setState(832);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionNameContext ------------------------------------------------------------------

SQLParserParser::FunctionNameContext::FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::QualifiedNameContext* SQLParserParser::FunctionNameContext::qualifiedName() {
  return getRuleContext<SQLParserParser::QualifiedNameContext>(0);
}

tree::TerminalNode* SQLParserParser::FunctionNameContext::FILTER() {
  return getToken(SQLParserParser::FILTER, 0);
}

tree::TerminalNode* SQLParserParser::FunctionNameContext::LEFT() {
  return getToken(SQLParserParser::LEFT, 0);
}

tree::TerminalNode* SQLParserParser::FunctionNameContext::RIGHT() {
  return getToken(SQLParserParser::RIGHT, 0);
}


size_t SQLParserParser::FunctionNameContext::getRuleIndex() const {
  return SQLParserParser::RuleFunctionName;
}


std::any SQLParserParser::FunctionNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitFunctionName(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::FunctionNameContext* SQLParserParser::functionName() {
  FunctionNameContext *_localctx = _tracker.createInstance<FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 116, SQLParserParser::RuleFunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(837);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(833);
      qualifiedName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(834);
      match(SQLParserParser::FILTER);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(835);
      match(SQLParserParser::LEFT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(836);
      match(SQLParserParser::RIGHT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedNameContext ------------------------------------------------------------------

SQLParserParser::QualifiedNameContext::QualifiedNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SQLParserParser::IdentifierContext *> SQLParserParser::QualifiedNameContext::identifier() {
  return getRuleContexts<SQLParserParser::IdentifierContext>();
}

SQLParserParser::IdentifierContext* SQLParserParser::QualifiedNameContext::identifier(size_t i) {
  return getRuleContext<SQLParserParser::IdentifierContext>(i);
}


size_t SQLParserParser::QualifiedNameContext::getRuleIndex() const {
  return SQLParserParser::RuleQualifiedName;
}


std::any SQLParserParser::QualifiedNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitQualifiedName(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::QualifiedNameContext* SQLParserParser::qualifiedName() {
  QualifiedNameContext *_localctx = _tracker.createInstance<QualifiedNameContext>(_ctx, getState());
  enterRule(_localctx, 118, SQLParserParser::RuleQualifiedName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(839);
    identifier();
    setState(844);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(840);
        match(SQLParserParser::T__4);
        setState(841);
        identifier(); 
      }
      setState(846);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ErrorCapturingIdentifierContext ------------------------------------------------------------------

SQLParserParser::ErrorCapturingIdentifierContext::ErrorCapturingIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::IdentifierContext* SQLParserParser::ErrorCapturingIdentifierContext::identifier() {
  return getRuleContext<SQLParserParser::IdentifierContext>(0);
}

SQLParserParser::ErrorCapturingIdentifierExtraContext* SQLParserParser::ErrorCapturingIdentifierContext::errorCapturingIdentifierExtra() {
  return getRuleContext<SQLParserParser::ErrorCapturingIdentifierExtraContext>(0);
}


size_t SQLParserParser::ErrorCapturingIdentifierContext::getRuleIndex() const {
  return SQLParserParser::RuleErrorCapturingIdentifier;
}


std::any SQLParserParser::ErrorCapturingIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitErrorCapturingIdentifier(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::ErrorCapturingIdentifierContext* SQLParserParser::errorCapturingIdentifier() {
  ErrorCapturingIdentifierContext *_localctx = _tracker.createInstance<ErrorCapturingIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 120, SQLParserParser::RuleErrorCapturingIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(847);
    identifier();
    setState(848);
    errorCapturingIdentifierExtra();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ErrorCapturingIdentifierExtraContext ------------------------------------------------------------------

SQLParserParser::ErrorCapturingIdentifierExtraContext::ErrorCapturingIdentifierExtraContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SQLParserParser::ErrorCapturingIdentifierExtraContext::getRuleIndex() const {
  return SQLParserParser::RuleErrorCapturingIdentifierExtra;
}

void SQLParserParser::ErrorCapturingIdentifierExtraContext::copyFrom(ErrorCapturingIdentifierExtraContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ErrorIdentContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> SQLParserParser::ErrorIdentContext::MINUS() {
  return getTokens(SQLParserParser::MINUS);
}

tree::TerminalNode* SQLParserParser::ErrorIdentContext::MINUS(size_t i) {
  return getToken(SQLParserParser::MINUS, i);
}

std::vector<SQLParserParser::IdentifierContext *> SQLParserParser::ErrorIdentContext::identifier() {
  return getRuleContexts<SQLParserParser::IdentifierContext>();
}

SQLParserParser::IdentifierContext* SQLParserParser::ErrorIdentContext::identifier(size_t i) {
  return getRuleContext<SQLParserParser::IdentifierContext>(i);
}

SQLParserParser::ErrorIdentContext::ErrorIdentContext(ErrorCapturingIdentifierExtraContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::ErrorIdentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitErrorIdent(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RealIdentContext ------------------------------------------------------------------

SQLParserParser::RealIdentContext::RealIdentContext(ErrorCapturingIdentifierExtraContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::RealIdentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitRealIdent(this);
  else
    return visitor->visitChildren(this);
}
SQLParserParser::ErrorCapturingIdentifierExtraContext* SQLParserParser::errorCapturingIdentifierExtra() {
  ErrorCapturingIdentifierExtraContext *_localctx = _tracker.createInstance<ErrorCapturingIdentifierExtraContext>(_ctx, getState());
  enterRule(_localctx, 122, SQLParserParser::RuleErrorCapturingIdentifierExtra);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(857);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SQLParserParser::MINUS: {
        _localctx = _tracker.createInstance<SQLParserParser::ErrorIdentContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(852); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(850);
          match(SQLParserParser::MINUS);
          setState(851);
          identifier();
          setState(854); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == SQLParserParser::MINUS);
        break;
      }

      case SQLParserParser::EOF:
      case SQLParserParser::T__0:
      case SQLParserParser::T__1:
      case SQLParserParser::T__3:
      case SQLParserParser::T__4:
      case SQLParserParser::ADD:
      case SQLParserParser::AFTER:
      case SQLParserParser::ALL:
      case SQLParserParser::ALTER:
      case SQLParserParser::ANALYZE:
      case SQLParserParser::AND:
      case SQLParserParser::ANTI:
      case SQLParserParser::ANY:
      case SQLParserParser::ARCHIVE:
      case SQLParserParser::ARRAY:
      case SQLParserParser::AS:
      case SQLParserParser::ASC:
      case SQLParserParser::AT:
      case SQLParserParser::AUTHORIZATION:
      case SQLParserParser::BETWEEN:
      case SQLParserParser::BOTH:
      case SQLParserParser::BUCKET:
      case SQLParserParser::BUCKETS:
      case SQLParserParser::BY:
      case SQLParserParser::CACHE:
      case SQLParserParser::CASCADE:
      case SQLParserParser::CASE:
      case SQLParserParser::CAST:
      case SQLParserParser::CHANGE:
      case SQLParserParser::CHECK:
      case SQLParserParser::CLEAR:
      case SQLParserParser::CLUSTER:
      case SQLParserParser::CLUSTERED:
      case SQLParserParser::CODEGEN:
      case SQLParserParser::COLLATE:
      case SQLParserParser::COLLECTION:
      case SQLParserParser::COLUMN:
      case SQLParserParser::COLUMNS:
      case SQLParserParser::COMMENT:
      case SQLParserParser::COMMIT:
      case SQLParserParser::COMPACT:
      case SQLParserParser::COMPACTIONS:
      case SQLParserParser::COMPUTE:
      case SQLParserParser::CONCATENATE:
      case SQLParserParser::CONSTRAINT:
      case SQLParserParser::COST:
      case SQLParserParser::CREATE:
      case SQLParserParser::CROSS:
      case SQLParserParser::CUBE:
      case SQLParserParser::CURRENT:
      case SQLParserParser::CURRENT_DATE:
      case SQLParserParser::CURRENT_TIME:
      case SQLParserParser::CURRENT_TIMESTAMP:
      case SQLParserParser::CURRENT_USER:
      case SQLParserParser::DATA:
      case SQLParserParser::DATABASE:
      case SQLParserParser::DATABASES:
      case SQLParserParser::DBPROPERTIES:
      case SQLParserParser::DEFINED:
      case SQLParserParser::DELETE:
      case SQLParserParser::DELIMITED:
      case SQLParserParser::DESC:
      case SQLParserParser::DESCRIBE:
      case SQLParserParser::DFS:
      case SQLParserParser::DIRECTORIES:
      case SQLParserParser::DIRECTORY:
      case SQLParserParser::DISTINCT:
      case SQLParserParser::DISTRIBUTE:
      case SQLParserParser::DIV:
      case SQLParserParser::DROP:
      case SQLParserParser::ELSE:
      case SQLParserParser::END:
      case SQLParserParser::ESCAPE:
      case SQLParserParser::ESCAPED:
      case SQLParserParser::EXCEPT:
      case SQLParserParser::EXCHANGE:
      case SQLParserParser::EXISTS:
      case SQLParserParser::EXPLAIN:
      case SQLParserParser::EXPORT:
      case SQLParserParser::EXTENDED:
      case SQLParserParser::EXTERNAL:
      case SQLParserParser::EXTRACT:
      case SQLParserParser::FALSE:
      case SQLParserParser::FETCH:
      case SQLParserParser::FIELDS:
      case SQLParserParser::FILTER:
      case SQLParserParser::FILEFORMAT:
      case SQLParserParser::FIRST:
      case SQLParserParser::FOLLOWING:
      case SQLParserParser::FOR:
      case SQLParserParser::FOREIGN:
      case SQLParserParser::FORMAT:
      case SQLParserParser::FORMATTED:
      case SQLParserParser::FROM:
      case SQLParserParser::FULL:
      case SQLParserParser::FUNCTION:
      case SQLParserParser::FUNCTIONS:
      case SQLParserParser::GLOBAL:
      case SQLParserParser::GRANT:
      case SQLParserParser::GROUP:
      case SQLParserParser::GROUPING:
      case SQLParserParser::HAVING:
      case SQLParserParser::IF:
      case SQLParserParser::IGNORE:
      case SQLParserParser::IMPORT:
      case SQLParserParser::IN:
      case SQLParserParser::INDEX:
      case SQLParserParser::INDEXES:
      case SQLParserParser::INNER:
      case SQLParserParser::INPATH:
      case SQLParserParser::INPUTFORMAT:
      case SQLParserParser::INSERT:
      case SQLParserParser::INTERSECT:
      case SQLParserParser::INTERVAL:
      case SQLParserParser::INTO:
      case SQLParserParser::IS:
      case SQLParserParser::ITEMS:
      case SQLParserParser::JOIN:
      case SQLParserParser::KEYS:
      case SQLParserParser::LAST:
      case SQLParserParser::LATERAL:
      case SQLParserParser::LAZY:
      case SQLParserParser::LEADING:
      case SQLParserParser::LEFT:
      case SQLParserParser::LIKE:
      case SQLParserParser::LIMIT:
      case SQLParserParser::LINES:
      case SQLParserParser::LIST:
      case SQLParserParser::LOAD:
      case SQLParserParser::LOCAL:
      case SQLParserParser::LOCATION:
      case SQLParserParser::LOCK:
      case SQLParserParser::LOCKS:
      case SQLParserParser::LOGICAL:
      case SQLParserParser::MACRO:
      case SQLParserParser::MAP:
      case SQLParserParser::MATCHED:
      case SQLParserParser::MERGE:
      case SQLParserParser::MSCK:
      case SQLParserParser::NAMESPACE:
      case SQLParserParser::NAMESPACES:
      case SQLParserParser::NATURAL:
      case SQLParserParser::NO:
      case SQLParserParser::NOT:
      case SQLParserParser::NULL_:
      case SQLParserParser::NULLS:
      case SQLParserParser::OF:
      case SQLParserParser::ON:
      case SQLParserParser::ONLY:
      case SQLParserParser::OPTION:
      case SQLParserParser::OPTIONS:
      case SQLParserParser::OR:
      case SQLParserParser::ORDER:
      case SQLParserParser::OUT:
      case SQLParserParser::OUTER:
      case SQLParserParser::OUTPUTFORMAT:
      case SQLParserParser::OVER:
      case SQLParserParser::OVERLAPS:
      case SQLParserParser::OVERLAY:
      case SQLParserParser::OVERWRITE:
      case SQLParserParser::PARTITION:
      case SQLParserParser::PARTITIONED:
      case SQLParserParser::PARTITIONS:
      case SQLParserParser::PERCENTLIT:
      case SQLParserParser::PIVOT:
      case SQLParserParser::PLACING:
      case SQLParserParser::POSITION:
      case SQLParserParser::PRECEDING:
      case SQLParserParser::PRIMARY:
      case SQLParserParser::PRINCIPALS:
      case SQLParserParser::PROPERTIES:
      case SQLParserParser::PURGE:
      case SQLParserParser::QUERY:
      case SQLParserParser::RANGE:
      case SQLParserParser::RECORDREADER:
      case SQLParserParser::RECORDWRITER:
      case SQLParserParser::RECOVER:
      case SQLParserParser::REDUCE:
      case SQLParserParser::REFERENCES:
      case SQLParserParser::REFRESH:
      case SQLParserParser::RENAME:
      case SQLParserParser::REPAIR:
      case SQLParserParser::REPLACE:
      case SQLParserParser::RESET:
      case SQLParserParser::RESTRICT:
      case SQLParserParser::REVOKE:
      case SQLParserParser::RIGHT:
      case SQLParserParser::RLIKE:
      case SQLParserParser::ROLE:
      case SQLParserParser::ROLES:
      case SQLParserParser::ROLLBACK:
      case SQLParserParser::ROLLUP:
      case SQLParserParser::ROW:
      case SQLParserParser::ROWS:
      case SQLParserParser::SCHEMA:
      case SQLParserParser::SELECT:
      case SQLParserParser::SEMI:
      case SQLParserParser::SEPARATED:
      case SQLParserParser::SERDE:
      case SQLParserParser::SERDEPROPERTIES:
      case SQLParserParser::SESSION_USER:
      case SQLParserParser::SET:
      case SQLParserParser::SETMINUS:
      case SQLParserParser::SETS:
      case SQLParserParser::SHOW:
      case SQLParserParser::SKEWED:
      case SQLParserParser::SOME:
      case SQLParserParser::SORT:
      case SQLParserParser::SORTED:
      case SQLParserParser::START:
      case SQLParserParser::STATISTICS:
      case SQLParserParser::STORED:
      case SQLParserParser::STRATIFY:
      case SQLParserParser::STRUCT:
      case SQLParserParser::SUBSTR:
      case SQLParserParser::SUBSTRING:
      case SQLParserParser::TABLE:
      case SQLParserParser::TABLES:
      case SQLParserParser::TABLESAMPLE:
      case SQLParserParser::TBLPROPERTIES:
      case SQLParserParser::TEMPORARY:
      case SQLParserParser::TERMINATED:
      case SQLParserParser::THEN:
      case SQLParserParser::TO:
      case SQLParserParser::TOUCH:
      case SQLParserParser::TRAILING:
      case SQLParserParser::TRANSACTION:
      case SQLParserParser::TRANSACTIONS:
      case SQLParserParser::TRANSFORM:
      case SQLParserParser::TRIM:
      case SQLParserParser::TRUE:
      case SQLParserParser::TRUNCATE:
      case SQLParserParser::TYPE:
      case SQLParserParser::UNARCHIVE:
      case SQLParserParser::UNBOUNDED:
      case SQLParserParser::UNCACHE:
      case SQLParserParser::UNION:
      case SQLParserParser::UNIQUE:
      case SQLParserParser::UNKNOWN:
      case SQLParserParser::UNLOCK:
      case SQLParserParser::UNSET:
      case SQLParserParser::UPDATE:
      case SQLParserParser::USE:
      case SQLParserParser::USER:
      case SQLParserParser::USING:
      case SQLParserParser::VALUES:
      case SQLParserParser::VIEW:
      case SQLParserParser::VIEWS:
      case SQLParserParser::WHEN:
      case SQLParserParser::WHERE:
      case SQLParserParser::WINDOW:
      case SQLParserParser::WITH:
      case SQLParserParser::IDENTIFIER:
      case SQLParserParser::BACKQUOTED_IDENTIFIER: {
        _localctx = _tracker.createInstance<SQLParserParser::RealIdentContext>(_localctx);
        enterOuterAlt(_localctx, 2);

        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

SQLParserParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SQLParserParser::StrictIdentifierContext* SQLParserParser::IdentifierContext::strictIdentifier() {
  return getRuleContext<SQLParserParser::StrictIdentifierContext>(0);
}

SQLParserParser::StrictNonReservedContext* SQLParserParser::IdentifierContext::strictNonReserved() {
  return getRuleContext<SQLParserParser::StrictNonReservedContext>(0);
}


size_t SQLParserParser::IdentifierContext::getRuleIndex() const {
  return SQLParserParser::RuleIdentifier;
}


std::any SQLParserParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::IdentifierContext* SQLParserParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 124, SQLParserParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(861);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(859);
      strictIdentifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(860);
      strictNonReserved();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StrictIdentifierContext ------------------------------------------------------------------

SQLParserParser::StrictIdentifierContext::StrictIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SQLParserParser::StrictIdentifierContext::getRuleIndex() const {
  return SQLParserParser::RuleStrictIdentifier;
}

void SQLParserParser::StrictIdentifierContext::copyFrom(StrictIdentifierContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- QuotedIdentifierAlternativeContext ------------------------------------------------------------------

SQLParserParser::QuotedIdentifierContext* SQLParserParser::QuotedIdentifierAlternativeContext::quotedIdentifier() {
  return getRuleContext<SQLParserParser::QuotedIdentifierContext>(0);
}

SQLParserParser::QuotedIdentifierAlternativeContext::QuotedIdentifierAlternativeContext(StrictIdentifierContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::QuotedIdentifierAlternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitQuotedIdentifierAlternative(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnquotedIdentifierContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::UnquotedIdentifierContext::IDENTIFIER() {
  return getToken(SQLParserParser::IDENTIFIER, 0);
}

SQLParserParser::AnsiNonReservedContext* SQLParserParser::UnquotedIdentifierContext::ansiNonReserved() {
  return getRuleContext<SQLParserParser::AnsiNonReservedContext>(0);
}

SQLParserParser::NonReservedContext* SQLParserParser::UnquotedIdentifierContext::nonReserved() {
  return getRuleContext<SQLParserParser::NonReservedContext>(0);
}

SQLParserParser::UnquotedIdentifierContext::UnquotedIdentifierContext(StrictIdentifierContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::UnquotedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitUnquotedIdentifier(this);
  else
    return visitor->visitChildren(this);
}
SQLParserParser::StrictIdentifierContext* SQLParserParser::strictIdentifier() {
  StrictIdentifierContext *_localctx = _tracker.createInstance<StrictIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 126, SQLParserParser::RuleStrictIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(867);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<SQLParserParser::UnquotedIdentifierContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(863);
      match(SQLParserParser::IDENTIFIER);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<SQLParserParser::QuotedIdentifierAlternativeContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(864);
      quotedIdentifier();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<SQLParserParser::UnquotedIdentifierContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(865);
      ansiNonReserved();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<SQLParserParser::UnquotedIdentifierContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(866);
      nonReserved();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotedIdentifierContext ------------------------------------------------------------------

SQLParserParser::QuotedIdentifierContext::QuotedIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::QuotedIdentifierContext::BACKQUOTED_IDENTIFIER() {
  return getToken(SQLParserParser::BACKQUOTED_IDENTIFIER, 0);
}


size_t SQLParserParser::QuotedIdentifierContext::getRuleIndex() const {
  return SQLParserParser::RuleQuotedIdentifier;
}


std::any SQLParserParser::QuotedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitQuotedIdentifier(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::QuotedIdentifierContext* SQLParserParser::quotedIdentifier() {
  QuotedIdentifierContext *_localctx = _tracker.createInstance<QuotedIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 128, SQLParserParser::RuleQuotedIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(869);
    match(SQLParserParser::BACKQUOTED_IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberContext ------------------------------------------------------------------

SQLParserParser::NumberContext::NumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SQLParserParser::NumberContext::getRuleIndex() const {
  return SQLParserParser::RuleNumber;
}

void SQLParserParser::NumberContext::copyFrom(NumberContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BigIntLiteralContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::BigIntLiteralContext::BIGINT_LITERAL() {
  return getToken(SQLParserParser::BIGINT_LITERAL, 0);
}

tree::TerminalNode* SQLParserParser::BigIntLiteralContext::MINUS() {
  return getToken(SQLParserParser::MINUS, 0);
}

SQLParserParser::BigIntLiteralContext::BigIntLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::BigIntLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitBigIntLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TinyIntLiteralContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::TinyIntLiteralContext::TINYINT_LITERAL() {
  return getToken(SQLParserParser::TINYINT_LITERAL, 0);
}

tree::TerminalNode* SQLParserParser::TinyIntLiteralContext::MINUS() {
  return getToken(SQLParserParser::MINUS, 0);
}

SQLParserParser::TinyIntLiteralContext::TinyIntLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::TinyIntLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitTinyIntLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LegacyDecimalLiteralContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::LegacyDecimalLiteralContext::EXPONENT_VALUE() {
  return getToken(SQLParserParser::EXPONENT_VALUE, 0);
}

tree::TerminalNode* SQLParserParser::LegacyDecimalLiteralContext::DECIMAL_VALUE() {
  return getToken(SQLParserParser::DECIMAL_VALUE, 0);
}

tree::TerminalNode* SQLParserParser::LegacyDecimalLiteralContext::MINUS() {
  return getToken(SQLParserParser::MINUS, 0);
}

SQLParserParser::LegacyDecimalLiteralContext::LegacyDecimalLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::LegacyDecimalLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitLegacyDecimalLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BigDecimalLiteralContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::BigDecimalLiteralContext::BIGDECIMAL_LITERAL() {
  return getToken(SQLParserParser::BIGDECIMAL_LITERAL, 0);
}

tree::TerminalNode* SQLParserParser::BigDecimalLiteralContext::MINUS() {
  return getToken(SQLParserParser::MINUS, 0);
}

SQLParserParser::BigDecimalLiteralContext::BigDecimalLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::BigDecimalLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitBigDecimalLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DoubleLiteralContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::DoubleLiteralContext::DOUBLE_LITERAL() {
  return getToken(SQLParserParser::DOUBLE_LITERAL, 0);
}

tree::TerminalNode* SQLParserParser::DoubleLiteralContext::MINUS() {
  return getToken(SQLParserParser::MINUS, 0);
}

SQLParserParser::DoubleLiteralContext::DoubleLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::DoubleLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitDoubleLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IntegerLiteralContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::IntegerLiteralContext::INTEGER_VALUE() {
  return getToken(SQLParserParser::INTEGER_VALUE, 0);
}

tree::TerminalNode* SQLParserParser::IntegerLiteralContext::MINUS() {
  return getToken(SQLParserParser::MINUS, 0);
}

SQLParserParser::IntegerLiteralContext::IntegerLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::IntegerLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitIntegerLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SmallIntLiteralContext ------------------------------------------------------------------

tree::TerminalNode* SQLParserParser::SmallIntLiteralContext::SMALLINT_LITERAL() {
  return getToken(SQLParserParser::SMALLINT_LITERAL, 0);
}

tree::TerminalNode* SQLParserParser::SmallIntLiteralContext::MINUS() {
  return getToken(SQLParserParser::MINUS, 0);
}

SQLParserParser::SmallIntLiteralContext::SmallIntLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


std::any SQLParserParser::SmallIntLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitSmallIntLiteral(this);
  else
    return visitor->visitChildren(this);
}
SQLParserParser::NumberContext* SQLParserParser::number() {
  NumberContext *_localctx = _tracker.createInstance<NumberContext>(_ctx, getState());
  enterRule(_localctx, 130, SQLParserParser::RuleNumber);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(899);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<SQLParserParser::LegacyDecimalLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(872);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::MINUS) {
        setState(871);
        match(SQLParserParser::MINUS);
      }
      setState(874);
      _la = _input->LA(1);
      if (!(_la == SQLParserParser::EXPONENT_VALUE

      || _la == SQLParserParser::DECIMAL_VALUE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<SQLParserParser::IntegerLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(876);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::MINUS) {
        setState(875);
        match(SQLParserParser::MINUS);
      }
      setState(878);
      match(SQLParserParser::INTEGER_VALUE);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<SQLParserParser::BigIntLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(880);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::MINUS) {
        setState(879);
        match(SQLParserParser::MINUS);
      }
      setState(882);
      match(SQLParserParser::BIGINT_LITERAL);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<SQLParserParser::SmallIntLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(884);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::MINUS) {
        setState(883);
        match(SQLParserParser::MINUS);
      }
      setState(886);
      match(SQLParserParser::SMALLINT_LITERAL);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<SQLParserParser::TinyIntLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(888);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::MINUS) {
        setState(887);
        match(SQLParserParser::MINUS);
      }
      setState(890);
      match(SQLParserParser::TINYINT_LITERAL);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<SQLParserParser::DoubleLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(892);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::MINUS) {
        setState(891);
        match(SQLParserParser::MINUS);
      }
      setState(894);
      match(SQLParserParser::DOUBLE_LITERAL);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<SQLParserParser::BigDecimalLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(896);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SQLParserParser::MINUS) {
        setState(895);
        match(SQLParserParser::MINUS);
      }
      setState(898);
      match(SQLParserParser::BIGDECIMAL_LITERAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterColumnActionContext ------------------------------------------------------------------

SQLParserParser::AlterColumnActionContext::AlterColumnActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::AlterColumnActionContext::TYPE() {
  return getToken(SQLParserParser::TYPE, 0);
}

SQLParserParser::DataTypeContext* SQLParserParser::AlterColumnActionContext::dataType() {
  return getRuleContext<SQLParserParser::DataTypeContext>(0);
}

SQLParserParser::CommentSpecContext* SQLParserParser::AlterColumnActionContext::commentSpec() {
  return getRuleContext<SQLParserParser::CommentSpecContext>(0);
}

SQLParserParser::ColPositionContext* SQLParserParser::AlterColumnActionContext::colPosition() {
  return getRuleContext<SQLParserParser::ColPositionContext>(0);
}

tree::TerminalNode* SQLParserParser::AlterColumnActionContext::NOT() {
  return getToken(SQLParserParser::NOT, 0);
}

tree::TerminalNode* SQLParserParser::AlterColumnActionContext::NULL_() {
  return getToken(SQLParserParser::NULL_, 0);
}

tree::TerminalNode* SQLParserParser::AlterColumnActionContext::SET() {
  return getToken(SQLParserParser::SET, 0);
}

tree::TerminalNode* SQLParserParser::AlterColumnActionContext::DROP() {
  return getToken(SQLParserParser::DROP, 0);
}


size_t SQLParserParser::AlterColumnActionContext::getRuleIndex() const {
  return SQLParserParser::RuleAlterColumnAction;
}


std::any SQLParserParser::AlterColumnActionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterColumnAction(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::AlterColumnActionContext* SQLParserParser::alterColumnAction() {
  AlterColumnActionContext *_localctx = _tracker.createInstance<AlterColumnActionContext>(_ctx, getState());
  enterRule(_localctx, 132, SQLParserParser::RuleAlterColumnAction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(908);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SQLParserParser::TYPE: {
        enterOuterAlt(_localctx, 1);
        setState(901);
        match(SQLParserParser::TYPE);
        setState(902);
        dataType();
        break;
      }

      case SQLParserParser::COMMENT: {
        enterOuterAlt(_localctx, 2);
        setState(903);
        commentSpec();
        break;
      }

      case SQLParserParser::AFTER:
      case SQLParserParser::FIRST: {
        enterOuterAlt(_localctx, 3);
        setState(904);
        colPosition();
        break;
      }

      case SQLParserParser::DROP:
      case SQLParserParser::SET: {
        enterOuterAlt(_localctx, 4);
        setState(905);
        antlrcpp::downCast<AlterColumnActionContext *>(_localctx)->setOrDrop = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == SQLParserParser::DROP || _la == SQLParserParser::SET)) {
          antlrcpp::downCast<AlterColumnActionContext *>(_localctx)->setOrDrop = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(906);
        match(SQLParserParser::NOT);
        setState(907);
        match(SQLParserParser::NULL_);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnsiNonReservedContext ------------------------------------------------------------------

SQLParserParser::AnsiNonReservedContext::AnsiNonReservedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::ADD() {
  return getToken(SQLParserParser::ADD, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::AFTER() {
  return getToken(SQLParserParser::AFTER, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::ALTER() {
  return getToken(SQLParserParser::ALTER, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::ANALYZE() {
  return getToken(SQLParserParser::ANALYZE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::ANTI() {
  return getToken(SQLParserParser::ANTI, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::ARCHIVE() {
  return getToken(SQLParserParser::ARCHIVE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::ARRAY() {
  return getToken(SQLParserParser::ARRAY, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::ASC() {
  return getToken(SQLParserParser::ASC, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::AT() {
  return getToken(SQLParserParser::AT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::BETWEEN() {
  return getToken(SQLParserParser::BETWEEN, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::BUCKET() {
  return getToken(SQLParserParser::BUCKET, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::BUCKETS() {
  return getToken(SQLParserParser::BUCKETS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::BY() {
  return getToken(SQLParserParser::BY, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::CACHE() {
  return getToken(SQLParserParser::CACHE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::CASCADE() {
  return getToken(SQLParserParser::CASCADE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::CHANGE() {
  return getToken(SQLParserParser::CHANGE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::CLEAR() {
  return getToken(SQLParserParser::CLEAR, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::CLUSTER() {
  return getToken(SQLParserParser::CLUSTER, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::CLUSTERED() {
  return getToken(SQLParserParser::CLUSTERED, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::CODEGEN() {
  return getToken(SQLParserParser::CODEGEN, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::COLLECTION() {
  return getToken(SQLParserParser::COLLECTION, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::COLUMNS() {
  return getToken(SQLParserParser::COLUMNS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::COMMENT() {
  return getToken(SQLParserParser::COMMENT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::COMMIT() {
  return getToken(SQLParserParser::COMMIT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::COMPACT() {
  return getToken(SQLParserParser::COMPACT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::COMPACTIONS() {
  return getToken(SQLParserParser::COMPACTIONS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::COMPUTE() {
  return getToken(SQLParserParser::COMPUTE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::CONCATENATE() {
  return getToken(SQLParserParser::CONCATENATE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::COST() {
  return getToken(SQLParserParser::COST, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::CUBE() {
  return getToken(SQLParserParser::CUBE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::CURRENT() {
  return getToken(SQLParserParser::CURRENT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::DATA() {
  return getToken(SQLParserParser::DATA, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::DATABASE() {
  return getToken(SQLParserParser::DATABASE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::DATABASES() {
  return getToken(SQLParserParser::DATABASES, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::DBPROPERTIES() {
  return getToken(SQLParserParser::DBPROPERTIES, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::DEFINED() {
  return getToken(SQLParserParser::DEFINED, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::DELETE() {
  return getToken(SQLParserParser::DELETE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::DELIMITED() {
  return getToken(SQLParserParser::DELIMITED, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::DESC() {
  return getToken(SQLParserParser::DESC, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::DESCRIBE() {
  return getToken(SQLParserParser::DESCRIBE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::DFS() {
  return getToken(SQLParserParser::DFS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::DIRECTORIES() {
  return getToken(SQLParserParser::DIRECTORIES, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::DIRECTORY() {
  return getToken(SQLParserParser::DIRECTORY, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::DISTRIBUTE() {
  return getToken(SQLParserParser::DISTRIBUTE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::DIV() {
  return getToken(SQLParserParser::DIV, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::DROP() {
  return getToken(SQLParserParser::DROP, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::ESCAPED() {
  return getToken(SQLParserParser::ESCAPED, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::EXCHANGE() {
  return getToken(SQLParserParser::EXCHANGE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::EXISTS() {
  return getToken(SQLParserParser::EXISTS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::EXPLAIN() {
  return getToken(SQLParserParser::EXPLAIN, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::EXPORT() {
  return getToken(SQLParserParser::EXPORT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::EXTENDED() {
  return getToken(SQLParserParser::EXTENDED, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::EXTERNAL() {
  return getToken(SQLParserParser::EXTERNAL, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::EXTRACT() {
  return getToken(SQLParserParser::EXTRACT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::FIELDS() {
  return getToken(SQLParserParser::FIELDS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::FILEFORMAT() {
  return getToken(SQLParserParser::FILEFORMAT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::FIRST() {
  return getToken(SQLParserParser::FIRST, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::FOLLOWING() {
  return getToken(SQLParserParser::FOLLOWING, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::FORMAT() {
  return getToken(SQLParserParser::FORMAT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::FORMATTED() {
  return getToken(SQLParserParser::FORMATTED, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::FUNCTION() {
  return getToken(SQLParserParser::FUNCTION, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::FUNCTIONS() {
  return getToken(SQLParserParser::FUNCTIONS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::GLOBAL() {
  return getToken(SQLParserParser::GLOBAL, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::GROUPING() {
  return getToken(SQLParserParser::GROUPING, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::IF() {
  return getToken(SQLParserParser::IF, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::IGNORE() {
  return getToken(SQLParserParser::IGNORE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::IMPORT() {
  return getToken(SQLParserParser::IMPORT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::INDEX() {
  return getToken(SQLParserParser::INDEX, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::INDEXES() {
  return getToken(SQLParserParser::INDEXES, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::INPATH() {
  return getToken(SQLParserParser::INPATH, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::INPUTFORMAT() {
  return getToken(SQLParserParser::INPUTFORMAT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::INSERT() {
  return getToken(SQLParserParser::INSERT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::INTERVAL() {
  return getToken(SQLParserParser::INTERVAL, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::ITEMS() {
  return getToken(SQLParserParser::ITEMS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::KEYS() {
  return getToken(SQLParserParser::KEYS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::LAST() {
  return getToken(SQLParserParser::LAST, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::LATERAL() {
  return getToken(SQLParserParser::LATERAL, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::LAZY() {
  return getToken(SQLParserParser::LAZY, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::LIKE() {
  return getToken(SQLParserParser::LIKE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::LIMIT() {
  return getToken(SQLParserParser::LIMIT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::LINES() {
  return getToken(SQLParserParser::LINES, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::LIST() {
  return getToken(SQLParserParser::LIST, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::LOAD() {
  return getToken(SQLParserParser::LOAD, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::LOCAL() {
  return getToken(SQLParserParser::LOCAL, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::LOCATION() {
  return getToken(SQLParserParser::LOCATION, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::LOCK() {
  return getToken(SQLParserParser::LOCK, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::LOCKS() {
  return getToken(SQLParserParser::LOCKS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::LOGICAL() {
  return getToken(SQLParserParser::LOGICAL, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::MACRO() {
  return getToken(SQLParserParser::MACRO, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::MAP() {
  return getToken(SQLParserParser::MAP, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::MATCHED() {
  return getToken(SQLParserParser::MATCHED, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::MERGE() {
  return getToken(SQLParserParser::MERGE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::MSCK() {
  return getToken(SQLParserParser::MSCK, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::NAMESPACE() {
  return getToken(SQLParserParser::NAMESPACE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::NAMESPACES() {
  return getToken(SQLParserParser::NAMESPACES, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::NO() {
  return getToken(SQLParserParser::NO, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::NULLS() {
  return getToken(SQLParserParser::NULLS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::OF() {
  return getToken(SQLParserParser::OF, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::OPTION() {
  return getToken(SQLParserParser::OPTION, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::OPTIONS() {
  return getToken(SQLParserParser::OPTIONS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::OUT() {
  return getToken(SQLParserParser::OUT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::OUTPUTFORMAT() {
  return getToken(SQLParserParser::OUTPUTFORMAT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::OVER() {
  return getToken(SQLParserParser::OVER, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::OVERLAY() {
  return getToken(SQLParserParser::OVERLAY, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::OVERWRITE() {
  return getToken(SQLParserParser::OVERWRITE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::PARTITION() {
  return getToken(SQLParserParser::PARTITION, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::PARTITIONED() {
  return getToken(SQLParserParser::PARTITIONED, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::PARTITIONS() {
  return getToken(SQLParserParser::PARTITIONS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::PERCENTLIT() {
  return getToken(SQLParserParser::PERCENTLIT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::PIVOT() {
  return getToken(SQLParserParser::PIVOT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::PLACING() {
  return getToken(SQLParserParser::PLACING, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::POSITION() {
  return getToken(SQLParserParser::POSITION, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::PRECEDING() {
  return getToken(SQLParserParser::PRECEDING, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::PRINCIPALS() {
  return getToken(SQLParserParser::PRINCIPALS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::PROPERTIES() {
  return getToken(SQLParserParser::PROPERTIES, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::PURGE() {
  return getToken(SQLParserParser::PURGE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::QUERY() {
  return getToken(SQLParserParser::QUERY, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::RANGE() {
  return getToken(SQLParserParser::RANGE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::RECORDREADER() {
  return getToken(SQLParserParser::RECORDREADER, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::RECORDWRITER() {
  return getToken(SQLParserParser::RECORDWRITER, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::RECOVER() {
  return getToken(SQLParserParser::RECOVER, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::REDUCE() {
  return getToken(SQLParserParser::REDUCE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::REFRESH() {
  return getToken(SQLParserParser::REFRESH, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::RENAME() {
  return getToken(SQLParserParser::RENAME, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::REPAIR() {
  return getToken(SQLParserParser::REPAIR, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::REPLACE() {
  return getToken(SQLParserParser::REPLACE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::RESET() {
  return getToken(SQLParserParser::RESET, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::RESTRICT() {
  return getToken(SQLParserParser::RESTRICT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::REVOKE() {
  return getToken(SQLParserParser::REVOKE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::RLIKE() {
  return getToken(SQLParserParser::RLIKE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::ROLE() {
  return getToken(SQLParserParser::ROLE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::ROLES() {
  return getToken(SQLParserParser::ROLES, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::ROLLBACK() {
  return getToken(SQLParserParser::ROLLBACK, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::ROLLUP() {
  return getToken(SQLParserParser::ROLLUP, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::ROW() {
  return getToken(SQLParserParser::ROW, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::ROWS() {
  return getToken(SQLParserParser::ROWS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::SCHEMA() {
  return getToken(SQLParserParser::SCHEMA, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::SEMI() {
  return getToken(SQLParserParser::SEMI, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::SEPARATED() {
  return getToken(SQLParserParser::SEPARATED, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::SERDE() {
  return getToken(SQLParserParser::SERDE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::SERDEPROPERTIES() {
  return getToken(SQLParserParser::SERDEPROPERTIES, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::SET() {
  return getToken(SQLParserParser::SET, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::SETMINUS() {
  return getToken(SQLParserParser::SETMINUS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::SETS() {
  return getToken(SQLParserParser::SETS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::SHOW() {
  return getToken(SQLParserParser::SHOW, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::SKEWED() {
  return getToken(SQLParserParser::SKEWED, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::SORT() {
  return getToken(SQLParserParser::SORT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::SORTED() {
  return getToken(SQLParserParser::SORTED, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::START() {
  return getToken(SQLParserParser::START, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::STATISTICS() {
  return getToken(SQLParserParser::STATISTICS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::STORED() {
  return getToken(SQLParserParser::STORED, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::STRATIFY() {
  return getToken(SQLParserParser::STRATIFY, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::STRUCT() {
  return getToken(SQLParserParser::STRUCT, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::SUBSTR() {
  return getToken(SQLParserParser::SUBSTR, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::SUBSTRING() {
  return getToken(SQLParserParser::SUBSTRING, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::TABLES() {
  return getToken(SQLParserParser::TABLES, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::TABLESAMPLE() {
  return getToken(SQLParserParser::TABLESAMPLE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::TBLPROPERTIES() {
  return getToken(SQLParserParser::TBLPROPERTIES, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::TEMPORARY() {
  return getToken(SQLParserParser::TEMPORARY, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::TERMINATED() {
  return getToken(SQLParserParser::TERMINATED, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::TOUCH() {
  return getToken(SQLParserParser::TOUCH, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::TRANSACTION() {
  return getToken(SQLParserParser::TRANSACTION, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::TRANSACTIONS() {
  return getToken(SQLParserParser::TRANSACTIONS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::TRANSFORM() {
  return getToken(SQLParserParser::TRANSFORM, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::TRIM() {
  return getToken(SQLParserParser::TRIM, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::TRUE() {
  return getToken(SQLParserParser::TRUE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::TRUNCATE() {
  return getToken(SQLParserParser::TRUNCATE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::TYPE() {
  return getToken(SQLParserParser::TYPE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::UNARCHIVE() {
  return getToken(SQLParserParser::UNARCHIVE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::UNBOUNDED() {
  return getToken(SQLParserParser::UNBOUNDED, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::UNCACHE() {
  return getToken(SQLParserParser::UNCACHE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::UNLOCK() {
  return getToken(SQLParserParser::UNLOCK, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::UNSET() {
  return getToken(SQLParserParser::UNSET, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::UPDATE() {
  return getToken(SQLParserParser::UPDATE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::USE() {
  return getToken(SQLParserParser::USE, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::VALUES() {
  return getToken(SQLParserParser::VALUES, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::VIEW() {
  return getToken(SQLParserParser::VIEW, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::VIEWS() {
  return getToken(SQLParserParser::VIEWS, 0);
}

tree::TerminalNode* SQLParserParser::AnsiNonReservedContext::WINDOW() {
  return getToken(SQLParserParser::WINDOW, 0);
}


size_t SQLParserParser::AnsiNonReservedContext::getRuleIndex() const {
  return SQLParserParser::RuleAnsiNonReserved;
}


std::any SQLParserParser::AnsiNonReservedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitAnsiNonReserved(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::AnsiNonReservedContext* SQLParserParser::ansiNonReserved() {
  AnsiNonReservedContext *_localctx = _tracker.createInstance<AnsiNonReservedContext>(_ctx, getState());
  enterRule(_localctx, 134, SQLParserParser::RuleAnsiNonReserved);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(910);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -273876538561743360) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 4408704324763362239) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & -4629718019216113665) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & 5654550617893105535) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StrictNonReservedContext ------------------------------------------------------------------

SQLParserParser::StrictNonReservedContext::StrictNonReservedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::StrictNonReservedContext::ANTI() {
  return getToken(SQLParserParser::ANTI, 0);
}

tree::TerminalNode* SQLParserParser::StrictNonReservedContext::CROSS() {
  return getToken(SQLParserParser::CROSS, 0);
}

tree::TerminalNode* SQLParserParser::StrictNonReservedContext::EXCEPT() {
  return getToken(SQLParserParser::EXCEPT, 0);
}

tree::TerminalNode* SQLParserParser::StrictNonReservedContext::FULL() {
  return getToken(SQLParserParser::FULL, 0);
}

tree::TerminalNode* SQLParserParser::StrictNonReservedContext::INNER() {
  return getToken(SQLParserParser::INNER, 0);
}

tree::TerminalNode* SQLParserParser::StrictNonReservedContext::INTERSECT() {
  return getToken(SQLParserParser::INTERSECT, 0);
}

tree::TerminalNode* SQLParserParser::StrictNonReservedContext::JOIN() {
  return getToken(SQLParserParser::JOIN, 0);
}

tree::TerminalNode* SQLParserParser::StrictNonReservedContext::LEFT() {
  return getToken(SQLParserParser::LEFT, 0);
}

tree::TerminalNode* SQLParserParser::StrictNonReservedContext::NATURAL() {
  return getToken(SQLParserParser::NATURAL, 0);
}

tree::TerminalNode* SQLParserParser::StrictNonReservedContext::ON() {
  return getToken(SQLParserParser::ON, 0);
}

tree::TerminalNode* SQLParserParser::StrictNonReservedContext::RIGHT() {
  return getToken(SQLParserParser::RIGHT, 0);
}

tree::TerminalNode* SQLParserParser::StrictNonReservedContext::SEMI() {
  return getToken(SQLParserParser::SEMI, 0);
}

tree::TerminalNode* SQLParserParser::StrictNonReservedContext::SETMINUS() {
  return getToken(SQLParserParser::SETMINUS, 0);
}

tree::TerminalNode* SQLParserParser::StrictNonReservedContext::UNION() {
  return getToken(SQLParserParser::UNION, 0);
}

tree::TerminalNode* SQLParserParser::StrictNonReservedContext::USING() {
  return getToken(SQLParserParser::USING, 0);
}


size_t SQLParserParser::StrictNonReservedContext::getRuleIndex() const {
  return SQLParserParser::RuleStrictNonReserved;
}


std::any SQLParserParser::StrictNonReservedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitStrictNonReserved(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::StrictNonReservedContext* SQLParserParser::strictNonReserved() {
  StrictNonReservedContext *_localctx = _tracker.createInstance<StrictNonReservedContext>(_ctx, getState());
  enterRule(_localctx, 136, SQLParserParser::RuleStrictNonReserved);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(912);
    _la = _input->LA(1);
    if (!(((((_la - 15) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 15)) & -9223371968135299071) != 0) || ((((_la - 98) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 98)) & 9147937288634369) != 0) || ((((_la - 190) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 190)) & 289356276058620929) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonReservedContext ------------------------------------------------------------------

SQLParserParser::NonReservedContext::NonReservedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ADD() {
  return getToken(SQLParserParser::ADD, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::AFTER() {
  return getToken(SQLParserParser::AFTER, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ALL() {
  return getToken(SQLParserParser::ALL, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ALTER() {
  return getToken(SQLParserParser::ALTER, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ANALYZE() {
  return getToken(SQLParserParser::ANALYZE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::AND() {
  return getToken(SQLParserParser::AND, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ANY() {
  return getToken(SQLParserParser::ANY, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ARCHIVE() {
  return getToken(SQLParserParser::ARCHIVE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ARRAY() {
  return getToken(SQLParserParser::ARRAY, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::AS() {
  return getToken(SQLParserParser::AS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ASC() {
  return getToken(SQLParserParser::ASC, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::AT() {
  return getToken(SQLParserParser::AT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::AUTHORIZATION() {
  return getToken(SQLParserParser::AUTHORIZATION, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::BETWEEN() {
  return getToken(SQLParserParser::BETWEEN, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::BOTH() {
  return getToken(SQLParserParser::BOTH, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::BUCKET() {
  return getToken(SQLParserParser::BUCKET, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::BUCKETS() {
  return getToken(SQLParserParser::BUCKETS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::BY() {
  return getToken(SQLParserParser::BY, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CACHE() {
  return getToken(SQLParserParser::CACHE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CASCADE() {
  return getToken(SQLParserParser::CASCADE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CASE() {
  return getToken(SQLParserParser::CASE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CAST() {
  return getToken(SQLParserParser::CAST, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CHANGE() {
  return getToken(SQLParserParser::CHANGE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CHECK() {
  return getToken(SQLParserParser::CHECK, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CLEAR() {
  return getToken(SQLParserParser::CLEAR, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CLUSTER() {
  return getToken(SQLParserParser::CLUSTER, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CLUSTERED() {
  return getToken(SQLParserParser::CLUSTERED, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CODEGEN() {
  return getToken(SQLParserParser::CODEGEN, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::COLLATE() {
  return getToken(SQLParserParser::COLLATE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::COLLECTION() {
  return getToken(SQLParserParser::COLLECTION, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::COLUMN() {
  return getToken(SQLParserParser::COLUMN, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::COLUMNS() {
  return getToken(SQLParserParser::COLUMNS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::COMMENT() {
  return getToken(SQLParserParser::COMMENT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::COMMIT() {
  return getToken(SQLParserParser::COMMIT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::COMPACT() {
  return getToken(SQLParserParser::COMPACT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::COMPACTIONS() {
  return getToken(SQLParserParser::COMPACTIONS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::COMPUTE() {
  return getToken(SQLParserParser::COMPUTE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CONCATENATE() {
  return getToken(SQLParserParser::CONCATENATE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CONSTRAINT() {
  return getToken(SQLParserParser::CONSTRAINT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::COST() {
  return getToken(SQLParserParser::COST, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CREATE() {
  return getToken(SQLParserParser::CREATE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CUBE() {
  return getToken(SQLParserParser::CUBE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CURRENT() {
  return getToken(SQLParserParser::CURRENT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CURRENT_DATE() {
  return getToken(SQLParserParser::CURRENT_DATE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CURRENT_TIME() {
  return getToken(SQLParserParser::CURRENT_TIME, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CURRENT_TIMESTAMP() {
  return getToken(SQLParserParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::CURRENT_USER() {
  return getToken(SQLParserParser::CURRENT_USER, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DATA() {
  return getToken(SQLParserParser::DATA, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DATABASE() {
  return getToken(SQLParserParser::DATABASE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DATABASES() {
  return getToken(SQLParserParser::DATABASES, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DBPROPERTIES() {
  return getToken(SQLParserParser::DBPROPERTIES, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DEFINED() {
  return getToken(SQLParserParser::DEFINED, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DELETE() {
  return getToken(SQLParserParser::DELETE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DELIMITED() {
  return getToken(SQLParserParser::DELIMITED, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DESC() {
  return getToken(SQLParserParser::DESC, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DESCRIBE() {
  return getToken(SQLParserParser::DESCRIBE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DFS() {
  return getToken(SQLParserParser::DFS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DIRECTORIES() {
  return getToken(SQLParserParser::DIRECTORIES, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DIRECTORY() {
  return getToken(SQLParserParser::DIRECTORY, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DISTINCT() {
  return getToken(SQLParserParser::DISTINCT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DISTRIBUTE() {
  return getToken(SQLParserParser::DISTRIBUTE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DIV() {
  return getToken(SQLParserParser::DIV, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::DROP() {
  return getToken(SQLParserParser::DROP, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ELSE() {
  return getToken(SQLParserParser::ELSE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::END() {
  return getToken(SQLParserParser::END, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ESCAPE() {
  return getToken(SQLParserParser::ESCAPE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ESCAPED() {
  return getToken(SQLParserParser::ESCAPED, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::EXCHANGE() {
  return getToken(SQLParserParser::EXCHANGE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::EXISTS() {
  return getToken(SQLParserParser::EXISTS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::EXPLAIN() {
  return getToken(SQLParserParser::EXPLAIN, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::EXPORT() {
  return getToken(SQLParserParser::EXPORT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::EXTENDED() {
  return getToken(SQLParserParser::EXTENDED, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::EXTERNAL() {
  return getToken(SQLParserParser::EXTERNAL, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::EXTRACT() {
  return getToken(SQLParserParser::EXTRACT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::FALSE() {
  return getToken(SQLParserParser::FALSE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::FETCH() {
  return getToken(SQLParserParser::FETCH, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::FILTER() {
  return getToken(SQLParserParser::FILTER, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::FIELDS() {
  return getToken(SQLParserParser::FIELDS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::FILEFORMAT() {
  return getToken(SQLParserParser::FILEFORMAT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::FIRST() {
  return getToken(SQLParserParser::FIRST, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::FOLLOWING() {
  return getToken(SQLParserParser::FOLLOWING, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::FOR() {
  return getToken(SQLParserParser::FOR, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::FOREIGN() {
  return getToken(SQLParserParser::FOREIGN, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::FORMAT() {
  return getToken(SQLParserParser::FORMAT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::FORMATTED() {
  return getToken(SQLParserParser::FORMATTED, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::FROM() {
  return getToken(SQLParserParser::FROM, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::FUNCTION() {
  return getToken(SQLParserParser::FUNCTION, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::FUNCTIONS() {
  return getToken(SQLParserParser::FUNCTIONS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::GLOBAL() {
  return getToken(SQLParserParser::GLOBAL, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::GRANT() {
  return getToken(SQLParserParser::GRANT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::GROUP() {
  return getToken(SQLParserParser::GROUP, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::GROUPING() {
  return getToken(SQLParserParser::GROUPING, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::HAVING() {
  return getToken(SQLParserParser::HAVING, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::IF() {
  return getToken(SQLParserParser::IF, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::IGNORE() {
  return getToken(SQLParserParser::IGNORE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::IMPORT() {
  return getToken(SQLParserParser::IMPORT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::IN() {
  return getToken(SQLParserParser::IN, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::INDEX() {
  return getToken(SQLParserParser::INDEX, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::INDEXES() {
  return getToken(SQLParserParser::INDEXES, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::INPATH() {
  return getToken(SQLParserParser::INPATH, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::INPUTFORMAT() {
  return getToken(SQLParserParser::INPUTFORMAT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::INSERT() {
  return getToken(SQLParserParser::INSERT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::INTERVAL() {
  return getToken(SQLParserParser::INTERVAL, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::INTO() {
  return getToken(SQLParserParser::INTO, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::IS() {
  return getToken(SQLParserParser::IS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ITEMS() {
  return getToken(SQLParserParser::ITEMS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::KEYS() {
  return getToken(SQLParserParser::KEYS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::LAST() {
  return getToken(SQLParserParser::LAST, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::LATERAL() {
  return getToken(SQLParserParser::LATERAL, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::LAZY() {
  return getToken(SQLParserParser::LAZY, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::LEADING() {
  return getToken(SQLParserParser::LEADING, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::LIKE() {
  return getToken(SQLParserParser::LIKE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::LIMIT() {
  return getToken(SQLParserParser::LIMIT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::LINES() {
  return getToken(SQLParserParser::LINES, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::LIST() {
  return getToken(SQLParserParser::LIST, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::LOAD() {
  return getToken(SQLParserParser::LOAD, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::LOCAL() {
  return getToken(SQLParserParser::LOCAL, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::LOCATION() {
  return getToken(SQLParserParser::LOCATION, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::LOCK() {
  return getToken(SQLParserParser::LOCK, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::LOCKS() {
  return getToken(SQLParserParser::LOCKS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::LOGICAL() {
  return getToken(SQLParserParser::LOGICAL, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::MACRO() {
  return getToken(SQLParserParser::MACRO, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::MAP() {
  return getToken(SQLParserParser::MAP, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::MATCHED() {
  return getToken(SQLParserParser::MATCHED, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::MERGE() {
  return getToken(SQLParserParser::MERGE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::MSCK() {
  return getToken(SQLParserParser::MSCK, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::NAMESPACE() {
  return getToken(SQLParserParser::NAMESPACE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::NAMESPACES() {
  return getToken(SQLParserParser::NAMESPACES, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::NO() {
  return getToken(SQLParserParser::NO, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::NOT() {
  return getToken(SQLParserParser::NOT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::NULL_() {
  return getToken(SQLParserParser::NULL_, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::NULLS() {
  return getToken(SQLParserParser::NULLS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::OF() {
  return getToken(SQLParserParser::OF, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ONLY() {
  return getToken(SQLParserParser::ONLY, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::OPTION() {
  return getToken(SQLParserParser::OPTION, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::OPTIONS() {
  return getToken(SQLParserParser::OPTIONS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::OR() {
  return getToken(SQLParserParser::OR, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ORDER() {
  return getToken(SQLParserParser::ORDER, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::OUT() {
  return getToken(SQLParserParser::OUT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::OUTER() {
  return getToken(SQLParserParser::OUTER, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::OUTPUTFORMAT() {
  return getToken(SQLParserParser::OUTPUTFORMAT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::OVER() {
  return getToken(SQLParserParser::OVER, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::OVERLAPS() {
  return getToken(SQLParserParser::OVERLAPS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::OVERLAY() {
  return getToken(SQLParserParser::OVERLAY, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::OVERWRITE() {
  return getToken(SQLParserParser::OVERWRITE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::PARTITION() {
  return getToken(SQLParserParser::PARTITION, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::PARTITIONED() {
  return getToken(SQLParserParser::PARTITIONED, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::PARTITIONS() {
  return getToken(SQLParserParser::PARTITIONS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::PERCENTLIT() {
  return getToken(SQLParserParser::PERCENTLIT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::PIVOT() {
  return getToken(SQLParserParser::PIVOT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::PLACING() {
  return getToken(SQLParserParser::PLACING, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::POSITION() {
  return getToken(SQLParserParser::POSITION, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::PRECEDING() {
  return getToken(SQLParserParser::PRECEDING, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::PRIMARY() {
  return getToken(SQLParserParser::PRIMARY, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::PRINCIPALS() {
  return getToken(SQLParserParser::PRINCIPALS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::PROPERTIES() {
  return getToken(SQLParserParser::PROPERTIES, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::PURGE() {
  return getToken(SQLParserParser::PURGE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::QUERY() {
  return getToken(SQLParserParser::QUERY, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::RANGE() {
  return getToken(SQLParserParser::RANGE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::RECORDREADER() {
  return getToken(SQLParserParser::RECORDREADER, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::RECORDWRITER() {
  return getToken(SQLParserParser::RECORDWRITER, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::RECOVER() {
  return getToken(SQLParserParser::RECOVER, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::REDUCE() {
  return getToken(SQLParserParser::REDUCE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::REFERENCES() {
  return getToken(SQLParserParser::REFERENCES, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::REFRESH() {
  return getToken(SQLParserParser::REFRESH, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::RENAME() {
  return getToken(SQLParserParser::RENAME, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::REPAIR() {
  return getToken(SQLParserParser::REPAIR, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::REPLACE() {
  return getToken(SQLParserParser::REPLACE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::RESET() {
  return getToken(SQLParserParser::RESET, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::RESTRICT() {
  return getToken(SQLParserParser::RESTRICT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::REVOKE() {
  return getToken(SQLParserParser::REVOKE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::RLIKE() {
  return getToken(SQLParserParser::RLIKE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ROLE() {
  return getToken(SQLParserParser::ROLE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ROLES() {
  return getToken(SQLParserParser::ROLES, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ROLLBACK() {
  return getToken(SQLParserParser::ROLLBACK, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ROLLUP() {
  return getToken(SQLParserParser::ROLLUP, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ROW() {
  return getToken(SQLParserParser::ROW, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::ROWS() {
  return getToken(SQLParserParser::ROWS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::SCHEMA() {
  return getToken(SQLParserParser::SCHEMA, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::SELECT() {
  return getToken(SQLParserParser::SELECT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::SEPARATED() {
  return getToken(SQLParserParser::SEPARATED, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::SERDE() {
  return getToken(SQLParserParser::SERDE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::SERDEPROPERTIES() {
  return getToken(SQLParserParser::SERDEPROPERTIES, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::SESSION_USER() {
  return getToken(SQLParserParser::SESSION_USER, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::SET() {
  return getToken(SQLParserParser::SET, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::SETS() {
  return getToken(SQLParserParser::SETS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::SHOW() {
  return getToken(SQLParserParser::SHOW, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::SKEWED() {
  return getToken(SQLParserParser::SKEWED, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::SOME() {
  return getToken(SQLParserParser::SOME, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::SORT() {
  return getToken(SQLParserParser::SORT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::SORTED() {
  return getToken(SQLParserParser::SORTED, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::START() {
  return getToken(SQLParserParser::START, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::STATISTICS() {
  return getToken(SQLParserParser::STATISTICS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::STORED() {
  return getToken(SQLParserParser::STORED, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::STRATIFY() {
  return getToken(SQLParserParser::STRATIFY, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::STRUCT() {
  return getToken(SQLParserParser::STRUCT, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::SUBSTR() {
  return getToken(SQLParserParser::SUBSTR, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::SUBSTRING() {
  return getToken(SQLParserParser::SUBSTRING, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TABLE() {
  return getToken(SQLParserParser::TABLE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TABLES() {
  return getToken(SQLParserParser::TABLES, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TABLESAMPLE() {
  return getToken(SQLParserParser::TABLESAMPLE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TBLPROPERTIES() {
  return getToken(SQLParserParser::TBLPROPERTIES, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TEMPORARY() {
  return getToken(SQLParserParser::TEMPORARY, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TERMINATED() {
  return getToken(SQLParserParser::TERMINATED, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::THEN() {
  return getToken(SQLParserParser::THEN, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TO() {
  return getToken(SQLParserParser::TO, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TOUCH() {
  return getToken(SQLParserParser::TOUCH, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TRAILING() {
  return getToken(SQLParserParser::TRAILING, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TRANSACTION() {
  return getToken(SQLParserParser::TRANSACTION, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TRANSACTIONS() {
  return getToken(SQLParserParser::TRANSACTIONS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TRANSFORM() {
  return getToken(SQLParserParser::TRANSFORM, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TRIM() {
  return getToken(SQLParserParser::TRIM, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TRUE() {
  return getToken(SQLParserParser::TRUE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TRUNCATE() {
  return getToken(SQLParserParser::TRUNCATE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::TYPE() {
  return getToken(SQLParserParser::TYPE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::UNARCHIVE() {
  return getToken(SQLParserParser::UNARCHIVE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::UNBOUNDED() {
  return getToken(SQLParserParser::UNBOUNDED, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::UNCACHE() {
  return getToken(SQLParserParser::UNCACHE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::UNIQUE() {
  return getToken(SQLParserParser::UNIQUE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::UNKNOWN() {
  return getToken(SQLParserParser::UNKNOWN, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::UNLOCK() {
  return getToken(SQLParserParser::UNLOCK, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::UNSET() {
  return getToken(SQLParserParser::UNSET, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::UPDATE() {
  return getToken(SQLParserParser::UPDATE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::USE() {
  return getToken(SQLParserParser::USE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::USER() {
  return getToken(SQLParserParser::USER, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::VALUES() {
  return getToken(SQLParserParser::VALUES, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::VIEW() {
  return getToken(SQLParserParser::VIEW, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::VIEWS() {
  return getToken(SQLParserParser::VIEWS, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::WHEN() {
  return getToken(SQLParserParser::WHEN, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::WHERE() {
  return getToken(SQLParserParser::WHERE, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::WINDOW() {
  return getToken(SQLParserParser::WINDOW, 0);
}

tree::TerminalNode* SQLParserParser::NonReservedContext::WITH() {
  return getToken(SQLParserParser::WITH, 0);
}


size_t SQLParserParser::NonReservedContext::getRuleIndex() const {
  return SQLParserParser::RuleNonReserved;
}


std::any SQLParserParser::NonReservedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SQLParserVisitor*>(visitor))
    return parserVisitor->visitNonReserved(this);
  else
    return visitor->visitChildren(this);
}

SQLParserParser::NonReservedContext* SQLParserParser::nonReserved() {
  NonReservedContext *_localctx = _tracker.createInstance<NonReservedContext>(_ctx, getState());
  enterRule(_localctx, 138, SQLParserParser::RuleNonReserved);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(914);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2251799813718528) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 9074471756994953215) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & -4611686018435907585) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & -72339069014655233) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool SQLParserParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 28: return booleanExpressionSempred(antlrcpp::downCast<BooleanExpressionContext *>(context), predicateIndex);
    case 30: return valueExpressionSempred(antlrcpp::downCast<ValueExpressionContext *>(context), predicateIndex);
    case 31: return primaryExpressionSempred(antlrcpp::downCast<PrimaryExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool SQLParserParser::booleanExpressionSempred(BooleanExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 2);
    case 1: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool SQLParserParser::valueExpressionSempred(ValueExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 6);
    case 3: return precpred(_ctx, 5);
    case 4: return precpred(_ctx, 4);
    case 5: return precpred(_ctx, 3);
    case 6: return precpred(_ctx, 2);
    case 7: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool SQLParserParser::primaryExpressionSempred(PrimaryExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 4);
    case 9: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

void SQLParserParser::initialize() {
  ::antlr4::internal::call_once(sqlparserParserOnceFlag, sqlparserParserInitialize);
}
